
arpcServerSTM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007814  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dec  08007dec  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df4  08007df4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  200000fc  08007ef8  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  08007ef8  00021670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115cf  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f5  00000000  00000000  0003173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00034938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a86  00000000  00000000  00035730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001850c  00000000  00000000  000361b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130f1  00000000  00000000  0004e6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000887bc  00000000  00000000  000617b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003860  00000000  00000000  000e9f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ed7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007990 	.word	0x08007990

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007990 	.word	0x08007990

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <setLED>:
/* USER CODE BEGIN 0 */

RPC void HAL_Delay(uint32_t Delay);
RPC void setLED(uint8_t value);

void setLED(uint8_t value){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, (GPIO_PinState)value);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	461a      	mov	r2, r3
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <setLED+0x20>)
 80004e4:	f000 fd40 	bl	8000f68 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40020800 	.word	0x40020800

080004f4 <sendByte>:

void sendByte(uint8_t byte) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
#ifdef USE_VCOM
	while(CDC_Transmit_FS(&byte, 1) != USBD_OK){
 80004fe:	e007      	b.n	8000510 <sendByte+0x1c>
		HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <sendByte+0x38>)
 8000506:	f000 fd48 	bl	8000f9a <HAL_GPIO_TogglePin>
		      	   HAL_Delay(50);
 800050a:	2032      	movs	r0, #50	; 0x32
 800050c:	f000 fa72 	bl	80009f4 <HAL_Delay>
	while(CDC_Transmit_FS(&byte, 1) != USBD_OK){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f006 fdaf 	bl	8007078 <CDC_Transmit_FS>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1ef      	bne.n	8000500 <sendByte+0xc>
	}
#else
  while(HAL_UART_Transmit(&huart1, &byte, 1, 100) != HAL_OK);
#endif
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40020800 	.word	0x40020800

08000530 <shutdown>:

void shutdown(uint8_t errorCode) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053a:	b672      	cpsid	i
}
 800053c:	bf00      	nop
  __disable_irq();
  for(;;){
      	   HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4803      	ldr	r0, [pc, #12]	; (8000550 <shutdown+0x20>)
 8000544:	f000 fd29 	bl	8000f9a <HAL_GPIO_TogglePin>
      	   HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f000 fa53 	bl	80009f4 <HAL_Delay>
      	   HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800054e:	e7f6      	b.n	800053e <shutdown+0xe>
 8000550:	40020800 	.word	0x40020800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 f9da 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f80a 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f89e 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000564:	f000 f872 	bl	800064c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000568:	f006 fcb4 	bl	8006ed4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  setLED(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff ffaf 	bl	80004d0 <setLED>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x1e>

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f007 f9ca 	bl	800791c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xd4>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e8:	2319      	movs	r3, #25
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ff62 	bl	80024c8 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 f89b 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f9c4 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 f885 	bl	8000744 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x4c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <MX_USART1_UART_Init+0x50>)
 800065a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_USART1_UART_Init+0x48>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_USART1_UART_Init+0x48>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART1_UART_Init+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_USART1_UART_Init+0x48>)
 8000682:	f002 fb79 	bl	8002d78 <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800068c:	f000 f85a 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000118 	.word	0x20000118
 8000698:	40011000 	.word	0x40011000
 800069c:	0003d090 	.word	0x0003d090

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0x9c>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0x9c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x9c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0xa0>)
 8000712:	f000 fc29 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xa0>)
 8000730:	f000 fa96 	bl	8000c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020800 	.word	0x40020800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_UART_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UART_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800080c:	2307      	movs	r3, #7
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_UART_MspInit+0x8c>)
 8000818:	f000 fa22 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40011000 	.word	0x40011000
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f89a 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <OTG_FS_IRQHandler+0x10>)
 800088a:	f000 fcf0 	bl	800126e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000f44 	.word	0x20000f44

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemInit+0x20>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x20>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e6:	f7ff ffd7 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f007 f81f 	bl	800792c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fe31 	bl	8000554 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000900:	08007dfc 	.word	0x08007dfc
  ldr r2, =_sbss
 8000904:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000908:	20001670 	.word	0x20001670

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_Init+0x40>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_Init+0x40>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x40>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f94f 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	200f      	movs	r0, #15
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff ff04 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f967 	bl	8000c46 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f92f 	bl	8000bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	2000015c 	.word	0x2000015c

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000015c 	.word	0x2000015c

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffde 	bl	80009dc <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff29 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff3e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff8e 	bl	8000b30 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff31 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa2 	bl	8000b98 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e159      	b.n	8000f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8148 	bne.w	8000f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a2 	beq.w	8000f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x202>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x1fe>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x1fa>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2fc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x1f6>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x300>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x1f2>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f aea2 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd0:	b08f      	sub	sp, #60	; 0x3c
 8000fd2:	af0a      	add	r7, sp, #40	; 0x28
 8000fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e10f      	b.n	8001200 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d106      	bne.n	8001000 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f006 f984 	bl	8007308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fa81 	bl	8003526 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	687e      	ldr	r6, [r7, #4]
 800102c:	466d      	mov	r5, sp
 800102e:	f106 0410 	add.w	r4, r6, #16
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800103e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001042:	1d33      	adds	r3, r6, #4
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f002 f958 	bl	80032fc <USB_CoreInit>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0d0      	b.n	8001200 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fa6f 	bl	8003548 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e04a      	b.n	8001106 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	333d      	adds	r3, #61	; 0x3d
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	333c      	adds	r3, #60	; 0x3c
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b298      	uxth	r0, r3
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	3344      	adds	r3, #68	; 0x44
 80010ac:	4602      	mov	r2, r0
 80010ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3340      	adds	r3, #64	; 0x40
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3348      	adds	r3, #72	; 0x48
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	334c      	adds	r3, #76	; 0x4c
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3354      	adds	r3, #84	; 0x54
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	3301      	adds	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3af      	bcc.n	8001070 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e044      	b.n	80011a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3301      	adds	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3b5      	bcc.n	8001116 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	687e      	ldr	r6, [r7, #4]
 80011b2:	466d      	mov	r5, sp
 80011b4:	f106 0410 	add.w	r4, r6, #16
 80011b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c8:	1d33      	adds	r3, r6, #4
 80011ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f002 fa07 	bl	80035e0 <USB_DevInit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00d      	b.n	8001200 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fb56 	bl	80048aa <USB_DevDisconnect>

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_PCD_Start+0x1c>
 8001220:	2302      	movs	r3, #2
 8001222:	e020      	b.n	8001266 <HAL_PCD_Start+0x5e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	2b01      	cmp	r3, #1
 8001232:	d109      	bne.n	8001248 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f959 	bl	8003504 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fb06 	bl	8004868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800126e:	b590      	push	{r4, r7, lr}
 8001270:	b08d      	sub	sp, #52	; 0x34
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fbc4 	bl	8004a12 <USB_GetMode>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 848a 	bne.w	8001ba6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fb28 	bl	80048ec <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8480 	beq.w	8001ba4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fb15 	bl	80048ec <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d107      	bne.n	80012dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f002 0202 	and.w	r2, r2, #2
 80012da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fb03 	bl	80048ec <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d161      	bne.n	80013b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0210 	bic.w	r2, r2, #16
 80012fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 020f 	and.w	r2, r3, #15
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	3304      	adds	r3, #4
 800131e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	0c5b      	lsrs	r3, r3, #17
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	2b02      	cmp	r3, #2
 800132a:	d124      	bne.n	8001376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d035      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	6a38      	ldr	r0, [r7, #32]
 800134c:	f003 f93a 	bl	80045c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	441a      	add	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136e:	441a      	add	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	621a      	str	r2, [r3, #32]
 8001374:	e016      	b.n	80013a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	0c5b      	lsrs	r3, r3, #17
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	2b06      	cmp	r3, #6
 8001380:	d110      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	6a38      	ldr	r0, [r7, #32]
 800138e:	f003 f919 	bl	80045c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139e:	441a      	add	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fa97 	bl	80048ec <USB_ReadInterrupts>
 80013be:	4603      	mov	r3, r0
 80013c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013c8:	f040 80a7 	bne.w	800151a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa9c 	bl	8004912 <USB_ReadDevAllOutEpInterrupt>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013dc:	e099      	b.n	8001512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 808e 	beq.w	8001506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fac0 	bl	800497a <USB_ReadDevOutEPInterrupt>
 80013fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2301      	movs	r3, #1
 8001416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fec2 	bl	80021a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2308      	movs	r3, #8
 800143a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800143c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 ff98 	bl	8002374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	2310      	movs	r3, #16
 800145e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d030      	beq.n	80014cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b80      	cmp	r3, #128	; 0x80
 8001474:	d109      	bne.n	800148a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	78db      	ldrb	r3, [r3, #3]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d108      	bne.n	80014ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2200      	movs	r2, #0
 80014ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f006 f823 	bl	8007500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014c6:	461a      	mov	r2, r3
 80014c8:	2302      	movs	r3, #2
 80014ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2320      	movs	r3, #32
 80014e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3301      	adds	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	2b00      	cmp	r3, #0
 8001516:	f47f af62 	bne.w	80013de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 f9e4 	bl	80048ec <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800152e:	f040 80db 	bne.w	80016e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fa05 	bl	8004946 <USB_ReadDevAllInEpInterrupt>
 800153c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001542:	e0cd      	b.n	80016e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80c2 	beq.w	80016d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fa2b 	bl	80049b6 <USB_ReadDevInEPInterrupt>
 8001560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d057      	beq.n	800161c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	2201      	movs	r2, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	69f9      	ldr	r1, [r7, #28]
 8001588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800158c:	4013      	ands	r3, r2
 800158e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159c:	461a      	mov	r2, r3
 800159e:	2301      	movs	r3, #1
 80015a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d132      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	334c      	adds	r3, #76	; 0x4c
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4403      	add	r3, r0
 80015ca:	3348      	adds	r3, #72	; 0x48
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4419      	add	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4403      	add	r3, r0
 80015de:	334c      	adds	r3, #76	; 0x4c
 80015e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d113      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3354      	adds	r3, #84	; 0x54
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	f003 fa32 	bl	8004a74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f005 fef7 	bl	800740a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001632:	461a      	mov	r2, r3
 8001634:	2308      	movs	r3, #8
 8001636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2340      	movs	r3, #64	; 0x40
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d023      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800167a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f002 f913 	bl	80038a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	3338      	adds	r3, #56	; 0x38
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	3304      	adds	r3, #4
 8001694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	78db      	ldrb	r3, [r3, #3]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2200      	movs	r2, #0
 80016a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f005 ff3a 	bl	8007524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016bc:	461a      	mov	r2, r3
 80016be:	2302      	movs	r3, #2
 80016c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fcdb 	bl	800208a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f47f af2e 	bne.w	8001544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 f8fd 	bl	80048ec <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016fc:	d122      	bne.n	8001744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fec2 	bl	80024b0 <HAL_PCDEx_LPM_Callback>
 800172c:	e002      	b.n	8001734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f005 fed8 	bl	80074e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f8cf 	bl	80048ec <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001758:	d112      	bne.n	8001780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f005 fe94 	bl	8007498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800177e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f003 f8b1 	bl	80048ec <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001794:	f040 80b7 	bne.w	8001906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2110      	movs	r1, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 f878 	bl	80038a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017bc:	e046      	b.n	800184c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e2:	0151      	lsls	r1, r2, #5
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	440a      	add	r2, r1
 80017e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fe:	461a      	mov	r2, r3
 8001800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001816:	0151      	lsls	r1, r2, #5
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	440a      	add	r2, r1
 800181c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001836:	0151      	lsls	r1, r2, #5
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	440a      	add	r2, r1
 800183c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	3301      	adds	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	429a      	cmp	r2, r3
 8001854:	d3b3      	bcc.n	80017be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001864:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001868:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001882:	f043 030b 	orr.w	r3, r3, #11
 8001886:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f043 030b 	orr.w	r3, r3, #11
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	e015      	b.n	80018cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c6:	f043 030b 	orr.w	r3, r3, #11
 80018ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f0:	461a      	mov	r2, r3
 80018f2:	f003 f8bf 	bl	8004a74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 ffee 	bl	80048ec <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d124      	bne.n	8001966 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 f884 	bl	8004a2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 f839 	bl	80039a2 <USB_GetDevSpeed>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681c      	ldr	r4, [r3, #0]
 800193c:	f001 f9e8 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4620      	mov	r0, r4
 800194c:	f001 fd38 	bl	80033c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f005 fd82 	bl	800745a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 ffbe 	bl	80048ec <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b08      	cmp	r3, #8
 8001978:	d10a      	bne.n	8001990 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f005 fd5f 	bl	800743e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 0208 	and.w	r2, r2, #8
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ffa9 	bl	80048ec <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d122      	bne.n	80019ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b0:	2301      	movs	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e014      	b.n	80019e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fb27 	bl	8002028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3e5      	bcc.n	80019b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff7c 	bl	80048ec <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019fe:	d13b      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a00:	2301      	movs	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e02b      	b.n	8001a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3340      	adds	r3, #64	; 0x40
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d115      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da12      	bge.n	8001a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	333f      	adds	r3, #63	; 0x3f
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fae8 	bl	8002028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3ce      	bcc.n	8001a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 ff35 	bl	80048ec <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a8c:	d155      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8e:	2301      	movs	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e045      	b.n	8001b20 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d12e      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da2b      	bge.n	8001b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ace:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d121      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10a      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6053      	str	r3, [r2, #4]
            break;
 8001b18:	e007      	b.n	8001b2a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3b4      	bcc.n	8001a94 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fed4 	bl	80048ec <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4e:	d10a      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 fcf9 	bl	8007548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 febe 	bl	80048ec <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d115      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f005 fce9 	bl	8007564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	e000      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ba4:	bf00      	nop
    }
  }
}
 8001ba6:	3734      	adds	r7, #52	; 0x34
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_PCD_SetAddress+0x1a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e013      	b.n	8001bee <HAL_PCD_SetAddress+0x42>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fe1c 	bl	800481c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	461a      	mov	r2, r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	70fb      	strb	r3, [r7, #3]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	803b      	strh	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da0f      	bge.n	8001c3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	705a      	strb	r2, [r3, #1]
 8001c3a:	e00f      	b.n	8001c5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c68:	883a      	ldrh	r2, [r7, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	78ba      	ldrb	r2, [r7, #2]
 8001c72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d102      	bne.n	8001c92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_EP_Open+0xaa>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e00e      	b.n	8001cbe <HAL_PCD_EP_Open+0xc8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fe9c 	bl	80039ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da0f      	bge.n	8001cfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	3338      	adds	r3, #56	; 0x38
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	705a      	strb	r2, [r3, #1]
 8001cf8:	e00f      	b.n	8001d1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 020f 	and.w	r2, r3, #15
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_EP_Close+0x6e>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00e      	b.n	8001d52 <HAL_PCD_EP_Close+0x8c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 feda 	bl	8003afc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	460b      	mov	r3, r1
 8001d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	f003 020f 	and.w	r2, r3, #15
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	f002 f9b9 	bl	8004144 <USB_EP0StartXfer>
 8001dd2:	e008      	b.n	8001de6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6979      	ldr	r1, [r7, #20]
 8001de2:	f001 ff67 	bl	8003cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	f003 020f 	and.w	r2, r3, #15
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	3338      	adds	r3, #56	; 0x38
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6979      	ldr	r1, [r7, #20]
 8001e92:	f002 f957 	bl	8004144 <USB_EP0StartXfer>
 8001e96:	e008      	b.n	8001eaa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6979      	ldr	r1, [r7, #20]
 8001ea6:	f001 ff05 	bl	8003cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d901      	bls.n	8001ed2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e050      	b.n	8001f74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da0f      	bge.n	8001efa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3338      	adds	r3, #56	; 0x38
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	705a      	strb	r2, [r3, #1]
 8001ef8:	e00d      	b.n	8001f16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_EP_SetStall+0x82>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e01e      	b.n	8001f74 <HAL_PCD_EP_SetStall+0xc0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fb95 	bl	8004674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	b2d9      	uxtb	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f64:	461a      	mov	r2, r3
 8001f66:	f002 fd85 	bl	8004a74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d901      	bls.n	8001f9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e042      	b.n	8002020 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da0f      	bge.n	8001fc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3338      	adds	r3, #56	; 0x38
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
 8001fc0:	e00f      	b.n	8001fe2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_PCD_EP_ClrStall+0x86>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e00e      	b.n	8002020 <HAL_PCD_EP_ClrStall+0xa4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fb9d 	bl	8004750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0c      	bge.n	8002056 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3338      	adds	r3, #56	; 0x38
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e00c      	b.n	8002070 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 020f 	and.w	r2, r3, #15
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 f9bc 	bl	80043f4 <USB_EPStopXfer>
 800207c:	4603      	mov	r3, r0
 800207e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002080:	7afb      	ldrb	r3, [r7, #11]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af02      	add	r7, sp, #8
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3338      	adds	r3, #56	; 0x38
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d901      	bls.n	80020c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06c      	b.n	800219c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d902      	bls.n	80020de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3303      	adds	r3, #3
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e6:	e02b      	b.n	8002140 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d902      	bls.n	8002104 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3303      	adds	r3, #3
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800211c:	b2db      	uxtb	r3, r3
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4603      	mov	r3, r0
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f002 fa10 	bl	8004548 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	441a      	add	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	441a      	add	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	429a      	cmp	r2, r3
 8002154:	d809      	bhi.n	800216a <PCD_WriteEmptyTxFifo+0xe0>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800215e:	429a      	cmp	r2, r3
 8002160:	d203      	bcs.n	800216a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1be      	bne.n	80020e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	429a      	cmp	r2, r3
 8002174:	d811      	bhi.n	800219a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	2201      	movs	r2, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	43db      	mvns	r3, r3
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002196:	4013      	ands	r3, r2
 8002198:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	333c      	adds	r3, #60	; 0x3c
 80021bc:	3304      	adds	r3, #4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d17b      	bne.n	80022d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4a61      	ldr	r2, [pc, #388]	; (800236c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	f240 80b9 	bls.w	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80b3 	beq.w	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220c:	6093      	str	r3, [r2, #8]
 800220e:	e0a7      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	461a      	mov	r2, r3
 8002228:	2320      	movs	r3, #32
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e098      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 8093 	bne.w	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d90f      	bls.n	8002262 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225e:	6093      	str	r3, [r2, #8]
 8002260:	e07e      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	0159      	lsls	r1, r3, #5
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	440b      	add	r3, r1
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ac:	461a      	mov	r2, r3
 80022ae:	2101      	movs	r1, #1
 80022b0:	f002 fbe0 	bl	8004a74 <USB_EP0_OutStart>
 80022b4:	e006      	b.n	80022c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f005 f882 	bl	80073d4 <HAL_PCD_DataOutStageCallback>
 80022d0:	e046      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d124      	bne.n	8002324 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	e032      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	2320      	movs	r3, #32
 8002314:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f005 f859 	bl	80073d4 <HAL_PCD_DataOutStageCallback>
 8002322:	e01d      	b.n	8002360 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <PCD_EP_OutXfrComplete_int+0x1b0>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800234c:	461a      	mov	r2, r3
 800234e:	2100      	movs	r1, #0
 8002350:	f002 fb90 	bl	8004a74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f005 f83a 	bl	80073d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	4f54300a 	.word	0x4f54300a
 8002370:	4f54310a 	.word	0x4f54310a

08002374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	333c      	adds	r3, #60	; 0x3c
 800238c:	3304      	adds	r3, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <PCD_EP_OutSetupPacket_int+0x88>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d90e      	bls.n	80023c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f004 fff1 	bl	80073b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <PCD_EP_OutSetupPacket_int+0x88>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90c      	bls.n	80023f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023e8:	461a      	mov	r2, r3
 80023ea:	2101      	movs	r1, #1
 80023ec:	f002 fb42 	bl	8004a74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	4f54300a 	.word	0x4f54300a

08002400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	4613      	mov	r3, r2
 800240e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800241e:	883b      	ldrh	r3, [r7, #0]
 8002420:	0419      	lsls	r1, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	430a      	orrs	r2, r1
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
 800242c:	e028      	b.n	8002480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e00d      	b.n	800245e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	3340      	adds	r3, #64	; 0x40
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	3b01      	subs	r3, #1
 8002464:	429a      	cmp	r2, r3
 8002466:	d3ec      	bcc.n	8002442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002468:	883b      	ldrh	r3, [r7, #0]
 800246a:	0418      	lsls	r0, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	3b01      	subs	r3, #1
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4302      	orrs	r2, r0
 8002478:	3340      	adds	r3, #64	; 0x40
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e267      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e242      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fa2c 	bl	80009dc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fa28 	bl	80009dc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e207      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fa18 	bl	80009dc <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fa14 	bl	80009dc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1f3      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe f9cd 	bl	80009dc <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe f9c9 	bl	80009dc <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a8      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe f9ac 	bl	80009dc <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe f9a8 	bl	80009dc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e187      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe f98c 	bl	80009dc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe f988 	bl	80009dc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e167      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe f975 	bl	80009dc <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe f971 	bl	80009dc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e150      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe f931 	bl	80009dc <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe f92d 	bl	80009dc <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e10c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe f8f2 	bl	80009dc <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe f8ee 	bl	80009dc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0cb      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe f8dc 	bl	80009dc <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe f8d8 	bl	80009dc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b5      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a1 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe f8ac 	bl	80009dc <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe f8a8 	bl	80009dc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e087      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe f881 	bl	80009dc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe f87d 	bl	80009dc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e05c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e054      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe f86a 	bl	80009dc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe f866 	bl	80009dc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e045      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e03d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e038      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fd ff98 	bl	80009dc <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fd ff94 	bl	80009dc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fef8 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	080079d8 	.word	0x080079d8
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b090      	sub	sp, #64	; 0x40
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b94:	2300      	movs	r3, #0
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80a1 	bhi.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e09b      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bbc:	e09b      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc2:	e098      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	627a      	str	r2, [r7, #36]	; 0x24
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bec:	2100      	movs	r1, #0
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf0:	fb03 f201 	mul.w	r2, r3, r1
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c04:	460a      	mov	r2, r1
 8002c06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	4413      	add	r3, r2
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	2200      	movs	r2, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	61fa      	str	r2, [r7, #28]
 8002c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c1e:	f7fd fad9 	bl	80001d4 <__aeabi_uldivmod>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4613      	mov	r3, r2
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2a:	e053      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	2200      	movs	r2, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	617a      	str	r2, [r7, #20]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c3e:	f04f 0b00 	mov.w	fp, #0
 8002c42:	4652      	mov	r2, sl
 8002c44:	465b      	mov	r3, fp
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	0159      	lsls	r1, r3, #5
 8002c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c54:	0150      	lsls	r0, r2, #5
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c76:	ebb2 0408 	subs.w	r4, r2, r8
 8002c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	00eb      	lsls	r3, r5, #3
 8002c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8c:	00e2      	lsls	r2, r4, #3
 8002c8e:	4614      	mov	r4, r2
 8002c90:	461d      	mov	r5, r3
 8002c92:	eb14 030a 	adds.w	r3, r4, sl
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	eb45 030b 	adc.w	r3, r5, fp
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002caa:	4629      	mov	r1, r5
 8002cac:	028b      	lsls	r3, r1, #10
 8002cae:	4621      	mov	r1, r4
 8002cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	028a      	lsls	r2, r1, #10
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cc8:	f7fd fa84 	bl	80001d4 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3740      	adds	r7, #64	; 0x40
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	080079e8 	.word	0x080079e8

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080079e8 	.word	0x080079e8

08002d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e03f      	b.n	8002e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fcfe 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f829 	bl	8002e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b0c0      	sub	sp, #256	; 0x100
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	ea40 0301 	orr.w	r3, r0, r1
 8002e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e6c:	f021 010c 	bic.w	r1, r1, #12
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8e:	6999      	ldr	r1, [r3, #24]
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	ea40 0301 	orr.w	r3, r0, r1
 8002e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <UART_SetConfig+0x2cc>)
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <UART_SetConfig+0xa0>
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <UART_SetConfig+0x2d0>)
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d104      	bne.n	8002ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb4:	f7ff ff4c 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8002eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ebc:	e003      	b.n	8002ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ebe:	f7ff ff33 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8002ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed0:	f040 810c 	bne.w	80030ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	1891      	adds	r1, r2, r2
 8002eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	eb12 0801 	adds.w	r8, r2, r1
 8002efc:	4629      	mov	r1, r5
 8002efe:	eb43 0901 	adc.w	r9, r3, r1
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f16:	4690      	mov	r8, r2
 8002f18:	4699      	mov	r9, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	eb18 0303 	adds.w	r3, r8, r3
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f24:	462b      	mov	r3, r5
 8002f26:	eb49 0303 	adc.w	r3, r9, r3
 8002f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f42:	460b      	mov	r3, r1
 8002f44:	18db      	adds	r3, r3, r3
 8002f46:	653b      	str	r3, [r7, #80]	; 0x50
 8002f48:	4613      	mov	r3, r2
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f58:	f7fd f93c 	bl	80001d4 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <UART_SetConfig+0x2d4>)
 8002f62:	fba3 2302 	umull	r2, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	011c      	lsls	r4, r3, #4
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	1891      	adds	r1, r2, r2
 8002f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f84:	415b      	adcs	r3, r3
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb43 0b01 	adc.w	fp, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fac:	4692      	mov	sl, r2
 8002fae:	469b      	mov	fp, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	18db      	adds	r3, r3, r3
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fde:	4613      	mov	r3, r2
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fee:	f7fd f8f1 	bl	80001d4 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <UART_SetConfig+0x2d4>)
 8002ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2264      	movs	r2, #100	; 0x64
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	1acb      	subs	r3, r1, r3
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <UART_SetConfig+0x2d4>)
 8003010:	fba3 2302 	umull	r2, r3, r3, r2
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800301c:	441c      	add	r4, r3
 800301e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800302c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	1891      	adds	r1, r2, r2
 8003036:	63b9      	str	r1, [r7, #56]	; 0x38
 8003038:	415b      	adcs	r3, r3
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003040:	4641      	mov	r1, r8
 8003042:	1851      	adds	r1, r2, r1
 8003044:	6339      	str	r1, [r7, #48]	; 0x30
 8003046:	4649      	mov	r1, r9
 8003048:	414b      	adcs	r3, r1
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003058:	4659      	mov	r1, fp
 800305a:	00cb      	lsls	r3, r1, #3
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003062:	4651      	mov	r1, sl
 8003064:	00ca      	lsls	r2, r1, #3
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	4603      	mov	r3, r0
 800306c:	4642      	mov	r2, r8
 800306e:	189b      	adds	r3, r3, r2
 8003070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003074:	464b      	mov	r3, r9
 8003076:	460a      	mov	r2, r1
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800308c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003094:	460b      	mov	r3, r1
 8003096:	18db      	adds	r3, r3, r3
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	4613      	mov	r3, r2
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030aa:	f7fd f893 	bl	80001d4 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <UART_SetConfig+0x2d4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	; 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <UART_SetConfig+0x2d4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 0207 	and.w	r2, r3, #7
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030dc:	e106      	b.n	80032ec <UART_SetConfig+0x4d8>
 80030de:	bf00      	nop
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40011400 	.word	0x40011400
 80030e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030fe:	4642      	mov	r2, r8
 8003100:	464b      	mov	r3, r9
 8003102:	1891      	adds	r1, r2, r2
 8003104:	6239      	str	r1, [r7, #32]
 8003106:	415b      	adcs	r3, r3
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310e:	4641      	mov	r1, r8
 8003110:	1854      	adds	r4, r2, r1
 8003112:	4649      	mov	r1, r9
 8003114:	eb43 0501 	adc.w	r5, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	00eb      	lsls	r3, r5, #3
 8003122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003126:	00e2      	lsls	r2, r4, #3
 8003128:	4614      	mov	r4, r2
 800312a:	461d      	mov	r5, r3
 800312c:	4643      	mov	r3, r8
 800312e:	18e3      	adds	r3, r4, r3
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003134:	464b      	mov	r3, r9
 8003136:	eb45 0303 	adc.w	r3, r5, r3
 800313a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800314a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800315a:	4629      	mov	r1, r5
 800315c:	008b      	lsls	r3, r1, #2
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003164:	4621      	mov	r1, r4
 8003166:	008a      	lsls	r2, r1, #2
 8003168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800316c:	f7fd f832 	bl	80001d4 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b60      	ldr	r3, [pc, #384]	; (80032f8 <UART_SetConfig+0x4e4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011c      	lsls	r4, r3, #4
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800318c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	61b9      	str	r1, [r7, #24]
 8003198:	415b      	adcs	r3, r3
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a0:	4641      	mov	r1, r8
 80031a2:	1851      	adds	r1, r2, r1
 80031a4:	6139      	str	r1, [r7, #16]
 80031a6:	4649      	mov	r1, r9
 80031a8:	414b      	adcs	r3, r1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b8:	4659      	mov	r1, fp
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c2:	4651      	mov	r1, sl
 80031c4:	00ca      	lsls	r2, r1, #3
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	4642      	mov	r2, r8
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d4:	464b      	mov	r3, r9
 80031d6:	460a      	mov	r2, r1
 80031d8:	eb42 0303 	adc.w	r3, r2, r3
 80031dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031f8:	4649      	mov	r1, r9
 80031fa:	008b      	lsls	r3, r1, #2
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003202:	4641      	mov	r1, r8
 8003204:	008a      	lsls	r2, r1, #2
 8003206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800320a:	f7fc ffe3 	bl	80001d4 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <UART_SetConfig+0x4e4>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	; 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	; 0x32
 8003228:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <UART_SetConfig+0x4e4>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	441c      	add	r4, r3
 8003236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323a:	2200      	movs	r2, #0
 800323c:	673b      	str	r3, [r7, #112]	; 0x70
 800323e:	677a      	str	r2, [r7, #116]	; 0x74
 8003240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	415b      	adcs	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003254:	4641      	mov	r1, r8
 8003256:	1851      	adds	r1, r2, r1
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	4649      	mov	r1, r9
 800325c:	414b      	adcs	r3, r1
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800326c:	4659      	mov	r1, fp
 800326e:	00cb      	lsls	r3, r1, #3
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003276:	4651      	mov	r1, sl
 8003278:	00ca      	lsls	r2, r1, #3
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	4603      	mov	r3, r0
 8003280:	4642      	mov	r2, r8
 8003282:	189b      	adds	r3, r3, r2
 8003284:	66bb      	str	r3, [r7, #104]	; 0x68
 8003286:	464b      	mov	r3, r9
 8003288:	460a      	mov	r2, r1
 800328a:	eb42 0303 	adc.w	r3, r2, r3
 800328e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
 800329a:	667a      	str	r2, [r7, #100]	; 0x64
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032a8:	4649      	mov	r1, r9
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b2:	4641      	mov	r1, r8
 80032b4:	008a      	lsls	r2, r1, #2
 80032b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ba:	f7fc ff8b 	bl	80001d4 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <UART_SetConfig+0x4e4>)
 80032c4:	fba3 1302 	umull	r1, r3, r3, r2
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	2164      	movs	r1, #100	; 0x64
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	3332      	adds	r3, #50	; 0x32
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <UART_SetConfig+0x4e4>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4422      	add	r2, r4
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032f2:	46bd      	mov	sp, r7
 80032f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f8:	51eb851f 	.word	0x51eb851f

080032fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032fc:	b084      	sub	sp, #16
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	f107 001c 	add.w	r0, r7, #28
 800330a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	2b01      	cmp	r3, #1
 8003312:	d122      	bne.n	800335a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f001 fbee 	bl	8004b30 <USB_CoreReset>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e01a      	b.n	8003390 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f001 fbe2 	bl	8004b30 <USB_CoreReset>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
 8003382:	e005      	b.n	8003390 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	2b01      	cmp	r3, #1
 8003394:	d10b      	bne.n	80033ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f043 0206 	orr.w	r2, r3, #6
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ba:	b004      	add	sp, #16
 80033bc:	4770      	bx	lr
	...

080033c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d165      	bne.n	80034a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a41      	ldr	r2, [pc, #260]	; (80034dc <USB_SetTurnaroundTime+0x11c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d906      	bls.n	80033ea <USB_SetTurnaroundTime+0x2a>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <USB_SetTurnaroundTime+0x120>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d202      	bcs.n	80033ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033e4:	230f      	movs	r3, #15
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e062      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <USB_SetTurnaroundTime+0x120>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d306      	bcc.n	8003400 <USB_SetTurnaroundTime+0x40>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4a3b      	ldr	r2, [pc, #236]	; (80034e4 <USB_SetTurnaroundTime+0x124>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d202      	bcs.n	8003400 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033fa:	230e      	movs	r3, #14
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e057      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a38      	ldr	r2, [pc, #224]	; (80034e4 <USB_SetTurnaroundTime+0x124>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d306      	bcc.n	8003416 <USB_SetTurnaroundTime+0x56>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <USB_SetTurnaroundTime+0x128>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d202      	bcs.n	8003416 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003410:	230d      	movs	r3, #13
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e04c      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <USB_SetTurnaroundTime+0x128>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d306      	bcc.n	800342c <USB_SetTurnaroundTime+0x6c>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a32      	ldr	r2, [pc, #200]	; (80034ec <USB_SetTurnaroundTime+0x12c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d802      	bhi.n	800342c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003426:	230c      	movs	r3, #12
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e041      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <USB_SetTurnaroundTime+0x12c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d906      	bls.n	8003442 <USB_SetTurnaroundTime+0x82>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <USB_SetTurnaroundTime+0x130>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d802      	bhi.n	8003442 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800343c:	230b      	movs	r3, #11
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e036      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <USB_SetTurnaroundTime+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d906      	bls.n	8003458 <USB_SetTurnaroundTime+0x98>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <USB_SetTurnaroundTime+0x134>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003452:	230a      	movs	r3, #10
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e02b      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <USB_SetTurnaroundTime+0x134>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d906      	bls.n	800346e <USB_SetTurnaroundTime+0xae>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <USB_SetTurnaroundTime+0x138>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d202      	bcs.n	800346e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003468:	2309      	movs	r3, #9
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e020      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <USB_SetTurnaroundTime+0x138>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d306      	bcc.n	8003484 <USB_SetTurnaroundTime+0xc4>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a20      	ldr	r2, [pc, #128]	; (80034fc <USB_SetTurnaroundTime+0x13c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d802      	bhi.n	8003484 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800347e:	2308      	movs	r3, #8
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e015      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <USB_SetTurnaroundTime+0x13c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d906      	bls.n	800349a <USB_SetTurnaroundTime+0xda>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <USB_SetTurnaroundTime+0x140>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d202      	bcs.n	800349a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003494:	2307      	movs	r3, #7
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00a      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800349a:	2306      	movs	r3, #6
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e007      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034a6:	2309      	movs	r3, #9
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e001      	b.n	80034b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034ac:	2309      	movs	r3, #9
 80034ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	00d8acbf 	.word	0x00d8acbf
 80034e0:	00e4e1c0 	.word	0x00e4e1c0
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	01067380 	.word	0x01067380
 80034ec:	011a499f 	.word	0x011a499f
 80034f0:	01312cff 	.word	0x01312cff
 80034f4:	014ca43f 	.word	0x014ca43f
 80034f8:	016e3600 	.word	0x016e3600
 80034fc:	01a6ab1f 	.word	0x01a6ab1f
 8003500:	01e84800 	.word	0x01e84800

08003504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f043 0201 	orr.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d115      	bne.n	8003596 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003576:	2001      	movs	r0, #1
 8003578:	f7fd fa3c 	bl	80009f4 <HAL_Delay>
      ms++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3301      	adds	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fa45 	bl	8004a12 <USB_GetMode>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d01e      	beq.n	80035cc <USB_SetCurrentMode+0x84>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b31      	cmp	r3, #49	; 0x31
 8003592:	d9f0      	bls.n	8003576 <USB_SetCurrentMode+0x2e>
 8003594:	e01a      	b.n	80035cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d115      	bne.n	80035c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7fd fa23 	bl	80009f4 <HAL_Delay>
      ms++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 fa2c 	bl	8004a12 <USB_GetMode>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <USB_SetCurrentMode+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b31      	cmp	r3, #49	; 0x31
 80035c4:	d9f0      	bls.n	80035a8 <USB_SetCurrentMode+0x60>
 80035c6:	e001      	b.n	80035cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e005      	b.n	80035d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b32      	cmp	r3, #50	; 0x32
 80035d0:	d101      	bne.n	80035d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e0:	b084      	sub	sp, #16
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e009      	b.n	8003614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0e      	cmp	r3, #14
 8003618:	d9f2      	bls.n	8003600 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11c      	bne.n	800365a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
 8003658:	e00b      	b.n	8003672 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003678:	461a      	mov	r2, r3
 800367a:	2300      	movs	r3, #0
 800367c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	4619      	mov	r1, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368c:	461a      	mov	r2, r3
 800368e:	680b      	ldr	r3, [r1, #0]
 8003690:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800369e:	2100      	movs	r1, #0
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f965 	bl	8003970 <USB_SetDevSpeed>
 80036a6:	e008      	b.n	80036ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036a8:	2101      	movs	r1, #1
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f960 	bl	8003970 <USB_SetDevSpeed>
 80036b0:	e003      	b.n	80036ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036b2:	2103      	movs	r1, #3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f95b 	bl	8003970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ba:	2110      	movs	r1, #16
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8f3 	bl	80038a8 <USB_FlushTxFifo>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f91f 	bl	8003910 <USB_FlushRxFifo>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ee:	461a      	mov	r2, r3
 80036f0:	2300      	movs	r3, #0
 80036f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	461a      	mov	r2, r3
 80036fc:	2300      	movs	r3, #0
 80036fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e043      	b.n	800378e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371c:	d118      	bne.n	8003750 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e013      	b.n	8003762 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003746:	461a      	mov	r2, r3
 8003748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e008      	b.n	8003762 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2300      	movs	r3, #0
 8003760:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003786:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3301      	adds	r3, #1
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b7      	bcc.n	8003706 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e043      	b.n	8003824 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b2:	d118      	bne.n	80037e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e013      	b.n	80037f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e008      	b.n	80037f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	461a      	mov	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	461a      	mov	r2, r3
 8003818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800381c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3301      	adds	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	429a      	cmp	r2, r3
 800382a:	d3b7      	bcc.n	800379c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800384c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f043 0210 	orr.w	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <USB_DevInit+0x2c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f043 0208 	orr.w	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800388c:	f043 0304 	orr.w	r3, r3, #4
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038a0:	b004      	add	sp, #16
 80038a2:	4770      	bx	lr
 80038a4:	803c3800 	.word	0x803c3800

080038a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <USB_FlushTxFifo+0x64>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e01b      	b.n	8003900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	daf2      	bge.n	80038b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <USB_FlushTxFifo+0x64>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e006      	b.n	8003900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d0f0      	beq.n	80038e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	00030d40 	.word	0x00030d40

08003910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a11      	ldr	r2, [pc, #68]	; (800396c <USB_FlushRxFifo+0x5c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e018      	b.n	8003960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	daf2      	bge.n	800391c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2210      	movs	r2, #16
 800393e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <USB_FlushRxFifo+0x5c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e006      	b.n	8003960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d0f0      	beq.n	8003940 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	00030d40 	.word	0x00030d40

08003970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0306 	and.w	r3, r3, #6
 80039ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]
 80039c6:	e00a      	b.n	80039de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d002      	beq.n	80039d4 <USB_GetDevSpeed+0x32>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d102      	bne.n	80039da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039d4:	2302      	movs	r3, #2
 80039d6:	75fb      	strb	r3, [r7, #23]
 80039d8:	e001      	b.n	80039de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039da:	230f      	movs	r3, #15
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d13a      	bne.n	8003a7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d155      	bne.n	8003aec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	791b      	ldrb	r3, [r3, #4]
 8003a5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	059b      	lsls	r3, r3, #22
 8003a62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	0151      	lsls	r1, r2, #5
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	440a      	add	r2, r1
 8003a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e036      	b.n	8003aec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11a      	bne.n	8003aec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	791b      	ldrb	r3, [r3, #4]
 8003ad0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d161      	bne.n	8003bdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d11f      	bne.n	8003b70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b90:	4013      	ands	r3, r2
 8003b92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	0159      	lsls	r1, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <USB_DeactivateEndpoint+0x1b0>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
 8003bda:	e060      	b.n	8003c9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf2:	d11f      	bne.n	8003c34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c54:	4013      	ands	r3, r2
 8003c56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	43db      	mvns	r3, r3
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	0159      	lsls	r1, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	4619      	mov	r1, r3
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <USB_DeactivateEndpoint+0x1b4>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	ec337800 	.word	0xec337800
 8003cb0:	eff37800 	.word	0xeff37800

08003cb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 815c 	bne.w	8003f8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d132      	bne.n	8003d44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	0cdb      	lsrs	r3, r3, #19
 8003d3e:	04db      	lsls	r3, r3, #19
 8003d40:	6113      	str	r3, [r2, #16]
 8003d42:	e074      	b.n	8003e2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	0cdb      	lsrs	r3, r3, #19
 8003d60:	04db      	lsls	r3, r3, #19
 8003d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	440b      	add	r3, r1
 8003da0:	1e59      	subs	r1, r3, #1
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003daa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dac:	4b9d      	ldr	r3, [pc, #628]	; (8004024 <USB_EPStartXfer+0x370>)
 8003dae:	400b      	ands	r3, r1
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	0148      	lsls	r0, r1, #5
 8003db4:	69f9      	ldr	r1, [r7, #28]
 8003db6:	4401      	add	r1, r0
 8003db8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	0148      	lsls	r0, r1, #5
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	4401      	add	r1, r0
 8003dde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003de2:	4313      	orrs	r3, r2
 8003de4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	791b      	ldrb	r3, [r3, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11f      	bne.n	8003e2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d14b      	bne.n	8003ecc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d128      	bne.n	8003eaa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d110      	bne.n	8003e8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e00f      	b.n	8003eaa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e133      	b.n	8004134 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	791b      	ldrb	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d015      	beq.n	8003f20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 811b 	beq.w	8004134 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f1e:	e109      	b.n	8004134 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e00f      	b.n	8003f72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6919      	ldr	r1, [r3, #16]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	b298      	uxth	r0, r3
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4603      	mov	r3, r0
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fade 	bl	8004548 <USB_WritePacket>
 8003f8c:	e0d2      	b.n	8004134 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa8:	0cdb      	lsrs	r3, r3, #19
 8003faa:	04db      	lsls	r3, r3, #19
 8003fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d126      	bne.n	8004028 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	0148      	lsls	r0, r1, #5
 8003ff4:	69f9      	ldr	r1, [r7, #28]
 8003ff6:	4401      	add	r1, r0
 8003ff8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800401e:	6113      	str	r3, [r2, #16]
 8004020:	e03a      	b.n	8004098 <USB_EPStartXfer+0x3e4>
 8004022:	bf00      	nop
 8004024:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4413      	add	r3, r2
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	8afa      	ldrh	r2, [r7, #22]
 8004044:	fb03 f202 	mul.w	r2, r3, r2
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	8afb      	ldrh	r3, [r7, #22]
 800405c:	04d9      	lsls	r1, r3, #19
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <USB_EPStartXfer+0x48c>)
 8004060:	400b      	ands	r3, r1
 8004062:	69b9      	ldr	r1, [r7, #24]
 8004064:	0148      	lsls	r0, r1, #5
 8004066:	69f9      	ldr	r1, [r7, #28]
 8004068:	4401      	add	r1, r0
 800406a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	0148      	lsls	r0, r1, #5
 800408c:	69f9      	ldr	r1, [r7, #28]
 800408e:	4401      	add	r1, r0
 8004090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004094:	4313      	orrs	r3, r2
 8004096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	460a      	mov	r2, r1
 80040b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	791b      	ldrb	r3, [r3, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d128      	bne.n	8004114 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d110      	bne.n	80040f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00f      	b.n	8004114 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	1ff80000 	.word	0x1ff80000

08004144 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 80ce 	bne.w	8004302 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d132      	bne.n	80041d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	440a      	add	r2, r1
 8004184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	0cdb      	lsrs	r3, r3, #19
 80041ce:	04db      	lsls	r3, r3, #19
 80041d0:	6113      	str	r3, [r2, #16]
 80041d2:	e04e      	b.n	8004272 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ee:	0cdb      	lsrs	r3, r3, #19
 80041f0:	04db      	lsls	r3, r3, #19
 80041f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004216:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	440a      	add	r2, r1
 8004242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800424a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	0148      	lsls	r0, r1, #5
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	4401      	add	r1, r0
 800426a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800426e:	4313      	orrs	r3, r2
 8004270:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11e      	bne.n	80042b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e097      	b.n	80043e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8083 	beq.w	80043e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	6979      	ldr	r1, [r7, #20]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fc:	4313      	orrs	r3, r2
 80042fe:	634b      	str	r3, [r1, #52]	; 0x34
 8004300:	e071      	b.n	80043e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431c:	0cdb      	lsrs	r3, r3, #19
 800431e:	04db      	lsls	r3, r3, #19
 8004320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004344:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800437c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004394:	6939      	ldr	r1, [r7, #16]
 8004396:	0148      	lsls	r0, r1, #5
 8004398:	6979      	ldr	r1, [r7, #20]
 800439a:	4401      	add	r1, r0
 800439c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a0:	4313      	orrs	r3, r2
 80043a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d10d      	bne.n	80043c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6919      	ldr	r1, [r3, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	460a      	mov	r2, r1
 80043c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d14a      	bne.n	80044a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800442a:	f040 8086 	bne.w	800453a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004450:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	440a      	add	r2, r1
 800446c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004474:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004482:	4293      	cmp	r3, r2
 8004484:	d902      	bls.n	800448c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
          break;
 800448a:	e056      	b.n	800453a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a4:	d0e7      	beq.n	8004476 <USB_EPStopXfer+0x82>
 80044a6:	e048      	b.n	800453a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c0:	d13b      	bne.n	800453a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3301      	adds	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f242 7210 	movw	r2, #10000	; 0x2710
 8004516:	4293      	cmp	r3, r2
 8004518:	d902      	bls.n	8004520 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
          break;
 800451e:	e00c      	b.n	800453a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004538:	d0e7      	beq.n	800450a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800453a:	7dfb      	ldrb	r3, [r7, #23]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	460b      	mov	r3, r1
 8004558:	71fb      	strb	r3, [r7, #7]
 800455a:	4613      	mov	r3, r2
 800455c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d123      	bne.n	80045b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800456e:	88bb      	ldrh	r3, [r7, #4]
 8004570:	3303      	adds	r3, #3
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e018      	b.n	80045ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	031a      	lsls	r2, r3, #12
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4413      	add	r3, r2
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	461a      	mov	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3301      	adds	r3, #1
 800459a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d3e2      	bcc.n	800457c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3724      	adds	r7, #36	; 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b08b      	sub	sp, #44	; 0x2c
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	e014      	b.n	800461a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	3301      	adds	r3, #1
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	3301      	adds	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	3301      	adds	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	3301      	adds	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	3301      	adds	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	429a      	cmp	r2, r3
 8004620:	d3e6      	bcc.n	80045f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004622:	8bfb      	ldrh	r3, [r7, #30]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01e      	beq.n	8004666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	461a      	mov	r2, r3
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	701a      	strb	r2, [r3, #0]
      i++;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	3301      	adds	r3, #1
 8004652:	623b      	str	r3, [r7, #32]
      pDest++;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	3301      	adds	r3, #1
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800465a:	8bfb      	ldrh	r3, [r7, #30]
 800465c:	3b01      	subs	r3, #1
 800465e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004660:	8bfb      	ldrh	r3, [r7, #30]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ea      	bne.n	800463c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004668:	4618      	mov	r0, r3
 800466a:	372c      	adds	r7, #44	; 0x2c
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d12c      	bne.n	80046ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db12      	blt.n	80046c8 <USB_EPSetStall+0x54>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00f      	beq.n	80046c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e02b      	b.n	8004742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db12      	blt.n	8004722 <USB_EPSetStall+0xae>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00f      	beq.n	8004722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d128      	bne.n	80047be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800478a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	791b      	ldrb	r3, [r3, #4]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <USB_EPClearStall+0x4c>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	791b      	ldrb	r3, [r3, #4]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d138      	bne.n	800480e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e027      	b.n	800480e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d003      	beq.n	80047ee <USB_EPClearStall+0x9e>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	791b      	ldrb	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d10f      	bne.n	800480e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800483e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004896:	f023 0302 	bic.w	r3, r3, #2
 800489a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048c4:	f023 0303 	bic.w	r3, r3, #3
 80048c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0c1b      	lsrs	r3, r3, #16
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	b29b      	uxth	r3, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049a8:	68bb      	ldr	r3, [r7, #8]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	01db      	lsls	r3, r3, #7
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a04:	68bb      	ldr	r3, [r7, #8]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	333c      	adds	r3, #60	; 0x3c
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <USB_EP0_OutStart+0xb8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d90a      	bls.n	8004aae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa8:	d101      	bne.n	8004aae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e037      	b.n	8004b1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004adc:	f043 0318 	orr.w	r3, r3, #24
 8004ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004af4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10f      	bne.n	8004b1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	4f54300a 	.word	0x4f54300a

08004b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <USB_CoreReset+0x64>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e01b      	b.n	8004b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	daf2      	bge.n	8004b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <USB_CoreReset+0x64>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e006      	b.n	8004b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d0f0      	beq.n	8004b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	00030d40 	.word	0x00030d40

08004b98 <checkBuffer>:
#include "arpc_generic.h"

inline uint8_t checkBuffer(uint8_t *buffer, uint32_t bufferIndex) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  const uint8_t receivedBytes = bufferIndex;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	73fb      	strb	r3, [r7, #15]

  if (receivedBytes < MIN_MESSAGE_BLOCK_LENGTH) {
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d801      	bhi.n	8004bb0 <checkBuffer+0x18>
    return 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e010      	b.n	8004bd2 <checkBuffer+0x3a>
  }

#define LAST_BYTE (buffer[receivedBytes - 1])
  if (LAST_BYTE != SYNC_BYTE) {
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b0a      	cmp	r3, #10
 8004bbc:	d001      	beq.n	8004bc2 <checkBuffer+0x2a>
    return 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e007      	b.n	8004bd2 <checkBuffer+0x3a>
  }

#define FRAME_LENGTH (buffer[0])
  if (FRAME_LENGTH != receivedBytes) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <checkBuffer+0x38>
    return 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e000      	b.n	8004bd2 <checkBuffer+0x3a>
  }

  return 1;
 8004bd0:	2301      	movs	r3, #1
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <resetBuffer>:

inline void resetBuffer(uint8_t *buffer, uint32_t *bufferIndex) {
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  memset(buffer, 0, MAX_MESSAGE_BLOCK_LENGTH);
 8004be8:	22ff      	movs	r2, #255	; 0xff
 8004bea:	2100      	movs	r1, #0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f002 fe95 	bl	800791c <memset>
  *bufferIndex = 0;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <calculateCRC>:

inline uint16_t calculateCRC(arpcDataFrame_t *frame) {
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint16_t crc = 0xFFFF;
 8004c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c0c:	81fb      	strh	r3, [r7, #14]

  return crc;
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <checkCRC>:

inline uint8_t checkCRC(arpcDataFrame_t *frame) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  const uint16_t calculatedCRC = calculateCRC(frame);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ffeb 	bl	8004c00 <calculateCRC>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	81fb      	strh	r3, [r7, #14]
  return frame->crc != calculatedCRC;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004c34:	89fa      	ldrh	r2, [r7, #14]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <arpcEncodeGeneric>:

inline void arpcEncodeGeneric(arpcDataFrame_t *frame, uint8_t functionId,
                              uint8_t *parameters, uint8_t parametersLength) {
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b0c5      	sub	sp, #276	; 0x114
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8004c52:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8004c56:	6020      	str	r0, [r4, #0]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8004c5e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8004c62:	600a      	str	r2, [r1, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c6a:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8004c6e:	4602      	mov	r2, r0
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c76:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	701a      	strb	r2, [r3, #0]

  if (frame == NULL) {
 8004c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <arpcEncodeGeneric+0x4c>
    shutdown(FrameIsNull);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fb fc4f 	bl	8000530 <shutdown>
 8004c92:	e044      	b.n	8004d1e <arpcEncodeGeneric+0xd6>
    return;
  }

  *frame = (const struct arpcDataFrame_t){0}; /* clear */
 8004c94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f002 fe38 	bl	800791c <memset>

  frame->length = MIN_MESSAGE_BLOCK_LENGTH + parametersLength;
 8004cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cb0:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	3305      	adds	r3, #5
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	701a      	strb	r2, [r3, #0]

  frame->functionId = functionId;
 8004cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004cd4:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	705a      	strb	r2, [r3, #1]

  /* not paramter count but parameter length in bytes */
  memcpy(frame->parameters, parameters, parametersLength);
 8004cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1c98      	adds	r0, r3, #2
 8004ce8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cec:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	f002 fe3a 	bl	8007974 <memcpy>

  frame->sync = SYNC_BYTE;
 8004d00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe

  calculateCRC(frame);
 8004d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	f7ff ff71 	bl	8004c00 <calculateCRC>
}
 8004d1e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}

08004d26 <arpcSendFrame>:

inline void arpcSendFrame(arpcDataFrame_t *encodedFrame) {
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  if (encodedFrame == NULL) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <arpcSendFrame+0x16>
    shutdown(EncodedFrameIsNull);
 8004d34:	2001      	movs	r0, #1
 8004d36:	f7fb fbfb 	bl	8000530 <shutdown>
    return;
 8004d3a:	e032      	b.n	8004da2 <arpcSendFrame+0x7c>
  }

  sendByte(encodedFrame->length);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fb fbd7 	bl	80004f4 <sendByte>
  sendByte(encodedFrame->functionId);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fbd2 	bl	80004f4 <sendByte>

  for (uint8_t i = 0; i < encodedFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	e009      	b.n	8004d6a <arpcSendFrame+0x44>
       i++) {
    sendByte(encodedFrame->parameters[i]);
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	789b      	ldrb	r3, [r3, #2]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb fbc8 	bl	80004f4 <sendByte>
       i++) {
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	3301      	adds	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < encodedFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	3b05      	subs	r3, #5
 8004d72:	429a      	cmp	r2, r3
 8004d74:	dbef      	blt.n	8004d56 <arpcSendFrame+0x30>
  }

  sendByte(encodedFrame->crc & 0xFF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fb fbb8 	bl	80004f4 <sendByte>
  sendByte(encodedFrame->crc >> 8);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbaf 	bl	80004f4 <sendByte>
  sendByte(encodedFrame->sync);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fba9 	bl	80004f4 <sendByte>
}
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <arpcReceiveFrame>:
static uint8_t buffer[MAX_MESSAGE_BLOCK_LENGTH] = {0};
static uint32_t bufferIndex = 0;

void arpcReceiveFrame(arpcDataFrame_t *responseFrame, uint8_t *buffer);

inline void arpcReceiveFrame(arpcDataFrame_t *responseFrame, uint8_t *buffer) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  if (responseFrame == NULL) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <arpcReceiveFrame+0x18>
    shutdown(ResponseFrameIsNull);
 8004db8:	2002      	movs	r0, #2
 8004dba:	f7fb fbb9 	bl	8000530 <shutdown>
    return;
 8004dbe:	e013      	b.n	8004de8 <arpcReceiveFrame+0x40>
  }

  responseFrame->length = buffer[0];
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	701a      	strb	r2, [r3, #0]
  responseFrame->functionId = buffer[1];
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	785a      	ldrb	r2, [r3, #1]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	705a      	strb	r2, [r3, #1]

  const uint8_t parameterByteCount =
      responseFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
  const uint8_t parameterByteCount =
 8004dd4:	3b05      	subs	r3, #5
 8004dd6:	73fb      	strb	r3, [r7, #15]

#define OFFSET_BYTE 2
  memcpy(responseFrame->parameters, buffer + OFFSET_BYTE, parameterByteCount);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1c98      	adds	r0, r3, #2
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	3302      	adds	r3, #2
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	4619      	mov	r1, r3
 8004de4:	f002 fdc6 	bl	8007974 <memcpy>
/* not neccesary to copy */
#ifdef COPY_ALL
  responseFrame->crc = buffer[bufferIndex - 2] | (buffer[bufferIndex - 3] << 8);
  responseFrame->sync = buffer[bufferIndex - 1];
#endif
}
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <processBuffer>:

void processBuffer() {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004df6:	af00      	add	r7, sp, #0
  if (!checkBuffer(buffer, bufferIndex))
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <processBuffer+0xa0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4825      	ldr	r0, [pc, #148]	; (8004e94 <processBuffer+0xa4>)
 8004e00:	f7ff feca 	bl	8004b98 <checkBuffer>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d036      	beq.n	8004e78 <processBuffer+0x88>
    goto reset;

  arpcDataFrame_t callFrame = {0};
 8004e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e12:	4618      	mov	r0, r3
 8004e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	f002 fd7e 	bl	800791c <memset>
  arpcDataFrame_t responseFrame = {0};
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2100      	movs	r1, #0
 8004e32:	f002 fd73 	bl	800791c <memset>

  arpcReceiveFrame(&callFrame, buffer);
 8004e36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e3a:	4916      	ldr	r1, [pc, #88]	; (8004e94 <processBuffer+0xa4>)
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ffb3 	bl	8004da8 <arpcReceiveFrame>

  if (!checkCRC(&callFrame))
 8004e42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fee8 	bl	8004c1c <checkCRC>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d014      	beq.n	8004e7c <processBuffer+0x8c>
    goto reset;


  arpcFrameHandler[callFrame.functionId](&callFrame, &responseFrame);
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <processBuffer+0xa8>)
 8004e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e64:	4639      	mov	r1, r7
 8004e66:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4798      	blx	r3


  arpcSendFrame(&responseFrame);
 8004e6e:	463b      	mov	r3, r7
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff58 	bl	8004d26 <arpcSendFrame>
 8004e76:	e002      	b.n	8004e7e <processBuffer+0x8e>
    goto reset;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <processBuffer+0x8e>
    goto reset;
 8004e7c:	bf00      	nop


reset:
  resetBuffer(buffer, &bufferIndex);
 8004e7e:	4904      	ldr	r1, [pc, #16]	; (8004e90 <processBuffer+0xa0>)
 8004e80:	4804      	ldr	r0, [pc, #16]	; (8004e94 <processBuffer+0xa4>)
 8004e82:	f7ff feac 	bl	8004bde <resetBuffer>
}
 8004e86:	bf00      	nop
 8004e88:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000260 	.word	0x20000260
 8004e94:	20000160 	.word	0x20000160
 8004e98:	080079f0 	.word	0x080079f0

08004e9c <arpcByteReceived>:

void arpcByteReceived(uint8_t byte) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  buffer[bufferIndex++] = byte;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <arpcByteReceived+0x44>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <arpcByteReceived+0x44>)
 8004eae:	600a      	str	r2, [r1, #0]
 8004eb0:	490c      	ldr	r1, [pc, #48]	; (8004ee4 <arpcByteReceived+0x48>)
 8004eb2:	79fa      	ldrb	r2, [r7, #7]
 8004eb4:	54ca      	strb	r2, [r1, r3]

#define FRAME_LENGTH (buffer[0])
  if (bufferIndex >= FRAME_LENGTH)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <arpcByteReceived+0x48>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <arpcByteReceived+0x44>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d802      	bhi.n	8004eca <arpcByteReceived+0x2e>
    processBuffer();
 8004ec4:	f7ff ff94 	bl	8004df0 <processBuffer>
  else if (bufferIndex >= MAX_MESSAGE_BLOCK_LENGTH)
    shutdown(BufferOverFlow);
}
 8004ec8:	e006      	b.n	8004ed8 <arpcByteReceived+0x3c>
  else if (bufferIndex >= MAX_MESSAGE_BLOCK_LENGTH)
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <arpcByteReceived+0x44>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2bfe      	cmp	r3, #254	; 0xfe
 8004ed0:	d902      	bls.n	8004ed8 <arpcByteReceived+0x3c>
    shutdown(BufferOverFlow);
 8004ed2:	2004      	movs	r0, #4
 8004ed4:	f7fb fb2c 	bl	8000530 <shutdown>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000260 	.word	0x20000260
 8004ee4:	20000160 	.word	0x20000160

08004ee8 <HAL_Delay_generateResponseFrame>:

#define HAL_Delay_ID 0
extern void HAL_Delay(uint32_t Delay);

void HAL_Delay_generateResponseFrame(arpcDataFrame_t *callFrame,
                                     arpcDataFrame_t *responseFrame) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t Delay;
  memcpy(&Delay, callFrame->parameters, sizeof(uint32_t));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(Delay);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb fd79 	bl	80009f4 <HAL_Delay>

  arpcEncodeGeneric(responseFrame, HAL_Delay_ID, NULL, 0);
 8004f02:	2300      	movs	r3, #0
 8004f04:	2200      	movs	r2, #0
 8004f06:	2100      	movs	r1, #0
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f7ff fe9d 	bl	8004c48 <arpcEncodeGeneric>
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <setLED_generateResponseFrame>:

#define setLED_ID 1
extern void setLED(uint8_t value);

void setLED_generateResponseFrame(arpcDataFrame_t *callFrame,
                                  arpcDataFrame_t *responseFrame) {
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  uint8_t value;
  memcpy(&value, callFrame->parameters, sizeof(uint8_t));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3302      	adds	r3, #2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	73fb      	strb	r3, [r7, #15]
  setLED(value);
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb fad0 	bl	80004d0 <setLED>

  arpcEncodeGeneric(responseFrame, setLED_ID, NULL, 0);
 8004f30:	2300      	movs	r3, #0
 8004f32:	2200      	movs	r2, #0
 8004f34:	2101      	movs	r1, #1
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f7ff fe86 	bl	8004c48 <arpcEncodeGeneric>
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f54:	f002 fc9e 	bl	8007894 <USBD_static_malloc>
 8004f58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	; 0xb0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0d4      	b.n	800511e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f002 fcce 	bl	800791c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32b0      	adds	r2, #176	; 0xb0
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	32b0      	adds	r2, #176	; 0xb0
 8004f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d138      	bne.n	800501e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f002 fb49 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fbc:	4b5a      	ldr	r3, [pc, #360]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	f003 020f 	and.w	r2, r3, #15
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3324      	adds	r3, #36	; 0x24
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fd6:	4b55      	ldr	r3, [pc, #340]	; (800512c <USBD_CDC_Init+0x1e8>)
 8004fd8:	7819      	ldrb	r1, [r3, #0]
 8004fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fde:	2202      	movs	r2, #2
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f002 fb34 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <USBD_CDC_Init+0x1e8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ffe:	2201      	movs	r2, #1
 8005000:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005002:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <USBD_CDC_Init+0x1ec>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3326      	adds	r3, #38	; 0x26
 8005018:	2210      	movs	r2, #16
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e035      	b.n	800508a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800501e:	4b42      	ldr	r3, [pc, #264]	; (8005128 <USBD_CDC_Init+0x1e4>)
 8005020:	7819      	ldrb	r1, [r3, #0]
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	2202      	movs	r2, #2
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f002 fb11 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <USBD_CDC_Init+0x1e4>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	2201      	movs	r2, #1
 8005044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <USBD_CDC_Init+0x1e8>)
 8005048:	7819      	ldrb	r1, [r3, #0]
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	2202      	movs	r2, #2
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 fafd 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <USBD_CDC_Init+0x1e8>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800506c:	2201      	movs	r2, #1
 800506e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005070:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <USBD_CDC_Init+0x1ec>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3326      	adds	r3, #38	; 0x26
 8005086:	2210      	movs	r2, #16
 8005088:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <USBD_CDC_Init+0x1ec>)
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	2308      	movs	r3, #8
 8005090:	2203      	movs	r2, #3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 fadb 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <USBD_CDC_Init+0x1ec>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2201      	movs	r2, #1
 80050b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	33b0      	adds	r3, #176	; 0xb0
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050e8:	2302      	movs	r3, #2
 80050ea:	e018      	b.n	800511e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <USBD_CDC_Init+0x1e8>)
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fb92 	bl	800782c <USBD_LL_PrepareReceive>
 8005108:	e008      	b.n	800511c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <USBD_CDC_Init+0x1e8>)
 800510c:	7819      	ldrb	r1, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005114:	2340      	movs	r3, #64	; 0x40
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fb88 	bl	800782c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000093 	.word	0x20000093
 800512c:	20000094 	.word	0x20000094
 8005130:	20000095 	.word	0x20000095

08005134 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005140:	4b3a      	ldr	r3, [pc, #232]	; (800522c <USBD_CDC_DeInit+0xf8>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f002 faa7 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800514c:	4b37      	ldr	r3, [pc, #220]	; (800522c <USBD_CDC_DeInit+0xf8>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2200      	movs	r2, #0
 8005164:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <USBD_CDC_DeInit+0xfc>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f002 fa94 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <USBD_CDC_DeInit+0xfc>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800518a:	2200      	movs	r2, #0
 800518c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800518e:	4b29      	ldr	r3, [pc, #164]	; (8005234 <USBD_CDC_DeInit+0x100>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f002 fa80 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <USBD_CDC_DeInit+0x100>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	2200      	movs	r2, #0
 80051b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <USBD_CDC_DeInit+0x100>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3326      	adds	r3, #38	; 0x26
 80051ca:	2200      	movs	r2, #0
 80051cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	32b0      	adds	r2, #176	; 0xb0
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01f      	beq.n	8005220 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	33b0      	adds	r3, #176	; 0xb0
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	32b0      	adds	r2, #176	; 0xb0
 80051fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005202:	4618      	mov	r0, r3
 8005204:	f002 fb54 	bl	80078b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	32b0      	adds	r2, #176	; 0xb0
 8005212:	2100      	movs	r1, #0
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000093 	.word	0x20000093
 8005230:	20000094 	.word	0x20000094
 8005234:	20000095 	.word	0x20000095

08005238 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	32b0      	adds	r2, #176	; 0xb0
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005264:	2303      	movs	r3, #3
 8005266:	e0bf      	b.n	80053e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005270:	2b00      	cmp	r3, #0
 8005272:	d050      	beq.n	8005316 <USBD_CDC_Setup+0xde>
 8005274:	2b20      	cmp	r3, #32
 8005276:	f040 80af 	bne.w	80053d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03a      	beq.n	80052f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b25b      	sxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	da1b      	bge.n	80052c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	33b0      	adds	r3, #176	; 0xb0
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	88d2      	ldrh	r2, [r2, #6]
 80052a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	88db      	ldrh	r3, [r3, #6]
 80052ae:	2b07      	cmp	r3, #7
 80052b0:	bf28      	it	cs
 80052b2:	2307      	movcs	r3, #7
 80052b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	89fa      	ldrh	r2, [r7, #14]
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fd89 	bl	8006dd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052c2:	e090      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	785a      	ldrb	r2, [r3, #1]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	88db      	ldrh	r3, [r3, #6]
 80052d2:	2b3f      	cmp	r3, #63	; 0x3f
 80052d4:	d803      	bhi.n	80052de <USBD_CDC_Setup+0xa6>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	88db      	ldrh	r3, [r3, #6]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	e000      	b.n	80052e0 <USBD_CDC_Setup+0xa8>
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052e6:	6939      	ldr	r1, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052ee:	461a      	mov	r2, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fd9b 	bl	8006e2c <USBD_CtlPrepareRx>
      break;
 80052f6:	e076      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	33b0      	adds	r3, #176	; 0xb0
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	7850      	ldrb	r0, [r2, #1]
 800530e:	2200      	movs	r2, #0
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4798      	blx	r3
      break;
 8005314:	e067      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b0b      	cmp	r3, #11
 800531c:	d851      	bhi.n	80053c2 <USBD_CDC_Setup+0x18a>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <USBD_CDC_Setup+0xec>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005355 	.word	0x08005355
 8005328:	080053d1 	.word	0x080053d1
 800532c:	080053c3 	.word	0x080053c3
 8005330:	080053c3 	.word	0x080053c3
 8005334:	080053c3 	.word	0x080053c3
 8005338:	080053c3 	.word	0x080053c3
 800533c:	080053c3 	.word	0x080053c3
 8005340:	080053c3 	.word	0x080053c3
 8005344:	080053c3 	.word	0x080053c3
 8005348:	080053c3 	.word	0x080053c3
 800534c:	0800537f 	.word	0x0800537f
 8005350:	080053a9 	.word	0x080053a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005360:	f107 030a 	add.w	r3, r7, #10
 8005364:	2202      	movs	r2, #2
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fd33 	bl	8006dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800536e:	e032      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fcbd 	bl	8006cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	75fb      	strb	r3, [r7, #23]
          break;
 800537c:	e02b      	b.n	80053d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d107      	bne.n	800539a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800538a:	f107 030d 	add.w	r3, r7, #13
 800538e:	2201      	movs	r2, #1
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fd1e 	bl	8006dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005398:	e01d      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fca8 	bl	8006cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80053a2:	2303      	movs	r3, #3
 80053a4:	75fb      	strb	r3, [r7, #23]
          break;
 80053a6:	e016      	b.n	80053d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d00f      	beq.n	80053d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fc9b 	bl	8006cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053c0:	e008      	b.n	80053d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fc94 	bl	8006cf2 <USBD_CtlError>
          ret = USBD_FAIL;
 80053ca:	2303      	movs	r3, #3
 80053cc:	75fb      	strb	r3, [r7, #23]
          break;
 80053ce:	e002      	b.n	80053d6 <USBD_CDC_Setup+0x19e>
          break;
 80053d0:	bf00      	nop
 80053d2:	e008      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>
          break;
 80053d4:	bf00      	nop
      }
      break;
 80053d6:	e006      	b.n	80053e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 fc89 	bl	8006cf2 <USBD_CtlError>
      ret = USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	75fb      	strb	r3, [r7, #23]
      break;
 80053e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005402:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	32b0      	adds	r2, #176	; 0xb0
 800540e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005416:	2303      	movs	r3, #3
 8005418:	e065      	b.n	80054e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	32b0      	adds	r2, #176	; 0xb0
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3318      	adds	r3, #24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3318      	adds	r3, #24
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 010f 	and.w	r1, r3, #15
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	460b      	mov	r3, r1
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4403      	add	r3, r0
 800546c:	3348      	adds	r3, #72	; 0x48
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	fbb2 f1f3 	udiv	r1, r2, r3
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800547a:	2b00      	cmp	r3, #0
 800547c:	d112      	bne.n	80054a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3318      	adds	r3, #24
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005496:	78f9      	ldrb	r1, [r7, #3]
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f002 f9a4 	bl	80077ea <USBD_LL_Transmit>
 80054a2:	e01f      	b.n	80054e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	33b0      	adds	r3, #176	; 0xb0
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	33b0      	adds	r3, #176	; 0xb0
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32b0      	adds	r2, #176	; 0xb0
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	32b0      	adds	r2, #176	; 0xb0
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e01a      	b.n	8005556 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 f9a2 	bl	800786e <USBD_LL_GetRxDataSize>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	33b0      	adds	r3, #176	; 0xb0
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005550:	4611      	mov	r1, r2
 8005552:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	32b0      	adds	r2, #176	; 0xb0
 8005570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800557c:	2303      	movs	r3, #3
 800557e:	e025      	b.n	80055cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	33b0      	adds	r3, #176	; 0xb0
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01a      	beq.n	80055ca <USBD_CDC_EP0_RxReady+0x6c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800559a:	2bff      	cmp	r3, #255	; 0xff
 800559c:	d015      	beq.n	80055ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	33b0      	adds	r3, #176	; 0xb0
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055be:	b292      	uxth	r2, r2
 80055c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055dc:	2182      	movs	r1, #130	; 0x82
 80055de:	4818      	ldr	r0, [pc, #96]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055e0:	f000 fd4f 	bl	8006082 <USBD_GetEpDesc>
 80055e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055e6:	2101      	movs	r1, #1
 80055e8:	4815      	ldr	r0, [pc, #84]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055ea:	f000 fd4a 	bl	8006082 <USBD_GetEpDesc>
 80055ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055f0:	2181      	movs	r1, #129	; 0x81
 80055f2:	4813      	ldr	r0, [pc, #76]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055f4:	f000 fd45 	bl	8006082 <USBD_GetEpDesc>
 80055f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2210      	movs	r2, #16
 8005604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005614:	711a      	strb	r2, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	711a      	strb	r2, [r3, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2243      	movs	r2, #67	; 0x43
 8005632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000050 	.word	0x20000050

08005644 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800564c:	2182      	movs	r1, #130	; 0x82
 800564e:	4818      	ldr	r0, [pc, #96]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005650:	f000 fd17 	bl	8006082 <USBD_GetEpDesc>
 8005654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005656:	2101      	movs	r1, #1
 8005658:	4815      	ldr	r0, [pc, #84]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800565a:	f000 fd12 	bl	8006082 <USBD_GetEpDesc>
 800565e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005660:	2181      	movs	r1, #129	; 0x81
 8005662:	4813      	ldr	r0, [pc, #76]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005664:	f000 fd0d 	bl	8006082 <USBD_GetEpDesc>
 8005668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2210      	movs	r2, #16
 8005674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2200      	movs	r2, #0
 8005680:	711a      	strb	r2, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f042 0202 	orr.w	r2, r2, #2
 8005688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	711a      	strb	r2, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f042 0202 	orr.w	r2, r2, #2
 800569c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2243      	movs	r2, #67	; 0x43
 80056a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000050 	.word	0x20000050

080056b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056bc:	2182      	movs	r1, #130	; 0x82
 80056be:	4818      	ldr	r0, [pc, #96]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056c0:	f000 fcdf 	bl	8006082 <USBD_GetEpDesc>
 80056c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056c6:	2101      	movs	r1, #1
 80056c8:	4815      	ldr	r0, [pc, #84]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056ca:	f000 fcda 	bl	8006082 <USBD_GetEpDesc>
 80056ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056d0:	2181      	movs	r1, #129	; 0x81
 80056d2:	4813      	ldr	r0, [pc, #76]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056d4:	f000 fcd5 	bl	8006082 <USBD_GetEpDesc>
 80056d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2210      	movs	r2, #16
 80056e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d006      	beq.n	80056fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f4:	711a      	strb	r2, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005708:	711a      	strb	r2, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2243      	movs	r2, #67	; 0x43
 8005712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000050 	.word	0x20000050

08005724 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	220a      	movs	r2, #10
 8005730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	2000000c 	.word	0x2000000c

08005744 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005754:	2303      	movs	r3, #3
 8005756:	e009      	b.n	800576c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	33b0      	adds	r3, #176	; 0xb0
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	32b0      	adds	r2, #176	; 0xb0
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800579a:	2303      	movs	r3, #3
 800579c:	e008      	b.n	80057b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32b0      	adds	r2, #176	; 0xb0
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057dc:	2303      	movs	r3, #3
 80057de:	e004      	b.n	80057ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32b0      	adds	r2, #176	; 0xb0
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32b0      	adds	r2, #176	; 0xb0
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005826:	2303      	movs	r3, #3
 8005828:	e025      	b.n	8005876 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11f      	bne.n	8005874 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2201      	movs	r2, #1
 8005838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <USBD_CDC_TransmitPacket+0x88>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4403      	add	r3, r0
 8005856:	3318      	adds	r3, #24
 8005858:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <USBD_CDC_TransmitPacket+0x88>)
 800585c:	7819      	ldrb	r1, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 ffbd 	bl	80077ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000093 	.word	0x20000093

08005884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	32b0      	adds	r2, #176	; 0xb0
 8005896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	32b0      	adds	r2, #176	; 0xb0
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e018      	b.n	80058e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7c1b      	ldrb	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <USBD_CDC_ReceivePacket+0x68>)
 80058bc:	7819      	ldrb	r1, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 ffaf 	bl	800782c <USBD_LL_PrepareReceive>
 80058ce:	e008      	b.n	80058e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <USBD_CDC_ReceivePacket+0x68>)
 80058d2:	7819      	ldrb	r1, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058da:	2340      	movs	r3, #64	; 0x40
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 ffa5 	bl	800782c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000094 	.word	0x20000094

080058f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005904:	2303      	movs	r3, #3
 8005906:	e01f      	b.n	8005948 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	79fa      	ldrb	r2, [r7, #7]
 800593a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f001 fe1f 	bl	8007580 <USBD_LL_Init>
 8005942:	4603      	mov	r3, r0
 8005944:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	e025      	b.n	80059b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	32ae      	adds	r2, #174	; 0xae
 800597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00f      	beq.n	80059a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	32ae      	adds	r2, #174	; 0xae
 800598e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	f107 020e 	add.w	r2, r7, #14
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fe27 	bl	8007618 <USBD_LL_Start>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d009      	beq.n	8005a18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f908 	bl	8006c7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d01a      	beq.n	8005ac8 <USBD_LL_SetupStage+0x72>
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d822      	bhi.n	8005adc <USBD_LL_SetupStage+0x86>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <USBD_LL_SetupStage+0x4a>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d00a      	beq.n	8005ab4 <USBD_LL_SetupStage+0x5e>
 8005a9e:	e01d      	b.n	8005adc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb5f 	bl	800616c <USBD_StdDevReq>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab2:	e020      	b.n	8005af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fbc7 	bl	8006250 <USBD_StdItfReq>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac6:	e016      	b.n	8005af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fc29 	bl	8006328 <USBD_StdEPReq>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ada:	e00c      	b.n	8005af6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 fdf4 	bl	80076d8 <USBD_LL_StallEP>
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	bf00      	nop
  }

  return ret;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d16e      	bne.n	8005bf6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f040 8098 	bne.w	8005c5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d913      	bls.n	8005b60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	1ad2      	subs	r2, r2, r3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bf28      	it	cs
 8005b52:	4613      	movcs	r3, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f001 f984 	bl	8006e66 <USBD_CtlContinueRx>
 8005b5e:	e07d      	b.n	8005c5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d014      	beq.n	8005b98 <USBD_LL_DataOutStage+0x98>
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d81d      	bhi.n	8005bae <USBD_LL_DataOutStage+0xae>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <USBD_LL_DataOutStage+0x7c>
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d003      	beq.n	8005b82 <USBD_LL_DataOutStage+0x82>
 8005b7a:	e018      	b.n	8005bae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8005b80:	e018      	b.n	8005bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa5e 	bl	800604e <USBD_CoreFindIF>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75bb      	strb	r3, [r7, #22]
            break;
 8005b96:	e00d      	b.n	8005bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fa60 	bl	8006068 <USBD_CoreFindEP>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75bb      	strb	r3, [r7, #22]
            break;
 8005bac:	e002      	b.n	8005bb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8005bb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bb4:	7dbb      	ldrb	r3, [r7, #22]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d113      	bne.n	8005bee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005bc6:	7dba      	ldrb	r2, [r7, #22]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	32ae      	adds	r2, #174	; 0xae
 8005bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005bd6:	7dba      	ldrb	r2, [r7, #22]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bde:	7dba      	ldrb	r2, [r7, #22]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	32ae      	adds	r2, #174	; 0xae
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 f94a 	bl	8006e88 <USBD_CtlSendStatus>
 8005bf4:	e032      	b.n	8005c5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fa31 	bl	8006068 <USBD_CoreFindEP>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c0a:	7dbb      	ldrb	r3, [r7, #22]
 8005c0c:	2bff      	cmp	r3, #255	; 0xff
 8005c0e:	d025      	beq.n	8005c5c <USBD_LL_DataOutStage+0x15c>
 8005c10:	7dbb      	ldrb	r3, [r7, #22]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d122      	bne.n	8005c5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d117      	bne.n	8005c52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c22:	7dba      	ldrb	r2, [r7, #22]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	32ae      	adds	r2, #174	; 0xae
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00f      	beq.n	8005c52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c32:	7dba      	ldrb	r2, [r7, #22]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c3a:	7dba      	ldrb	r2, [r7, #22]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	32ae      	adds	r2, #174	; 0xae
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	7afa      	ldrb	r2, [r7, #11]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	e000      	b.n	8005c5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d16f      	bne.n	8005d5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d15a      	bne.n	8005d40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d914      	bls.n	8005cc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f001 f8ac 	bl	8006e0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f001 fdb7 	bl	800782c <USBD_LL_PrepareReceive>
 8005cbe:	e03f      	b.n	8005d40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d11c      	bne.n	8005d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d316      	bcc.n	8005d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d20f      	bcs.n	8005d06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f001 f88d 	bl	8006e0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f001 fd94 	bl	800782c <USBD_LL_PrepareReceive>
 8005d04:	e01c      	b.n	8005d40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d10f      	bne.n	8005d32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 fccf 	bl	80076d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f001 f8b7 	bl	8006eae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03a      	beq.n	8005dc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fe42 	bl	80059d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d58:	e032      	b.n	8005dc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f97f 	bl	8006068 <USBD_CoreFindEP>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2bff      	cmp	r3, #255	; 0xff
 8005d72:	d025      	beq.n	8005dc0 <USBD_LL_DataInStage+0x15a>
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d122      	bne.n	8005dc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d11c      	bne.n	8005dc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d86:	7dfa      	ldrb	r2, [r7, #23]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	32ae      	adds	r2, #174	; 0xae
 8005d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d014      	beq.n	8005dc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d96:	7dfa      	ldrb	r2, [r7, #23]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d9e:	7dfa      	ldrb	r2, [r7, #23]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	32ae      	adds	r2, #174	; 0xae
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	7afa      	ldrb	r2, [r7, #11]
 8005dac:	4611      	mov	r1, r2
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	4798      	blx	r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005db6:	7dbb      	ldrb	r3, [r7, #22]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005dbc:	7dbb      	ldrb	r3, [r7, #22]
 8005dbe:	e000      	b.n	8005dc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d014      	beq.n	8005e30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00e      	beq.n	8005e30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6852      	ldr	r2, [r2, #4]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	4611      	mov	r1, r2
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e30:	2340      	movs	r3, #64	; 0x40
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fc09 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fbfb 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2240      	movs	r2, #64	; 0x40
 8005e62:	621a      	str	r2, [r3, #32]

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d106      	bne.n	8005edc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d110      	bne.n	8005f20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	32ae      	adds	r2, #174	; 0xae
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e01c      	b.n	8005f86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d115      	bne.n	8005f84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	32ae      	adds	r2, #174	; 0xae
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32ae      	adds	r2, #174	; 0xae
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	32ae      	adds	r2, #174	; 0xae
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e01c      	b.n	8005fea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d115      	bne.n	8005fe8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	32ae      	adds	r2, #174	; 0xae
 8005fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	32ae      	adds	r2, #174	; 0xae
 8005fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6852      	ldr	r2, [r2, #4]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800605a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006074:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d920      	bls.n	80060ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060b2:	e013      	b.n	80060dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060b4:	f107 030a 	add.w	r3, r7, #10
 80060b8:	4619      	mov	r1, r3
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f000 f81b 	bl	80060f6 <USBD_GetNextDesc>
 80060c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d108      	bne.n	80060dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	789b      	ldrb	r3, [r3, #2]
 80060d2:	78fa      	ldrb	r2, [r7, #3]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d008      	beq.n	80060ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d8e5      	bhi.n	80060b4 <USBD_GetEpDesc+0x32>
 80060e8:	e000      	b.n	80060ec <USBD_GetEpDesc+0x6a>
          break;
 80060ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80060ec:	693b      	ldr	r3, [r7, #16]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	4413      	add	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	3301      	adds	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800614e:	8a3b      	ldrh	r3, [r7, #16]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	b21a      	sxth	r2, r3
 8006154:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006158:	4313      	orrs	r3, r2
 800615a:	b21b      	sxth	r3, r3
 800615c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800615e:	89fb      	ldrh	r3, [r7, #14]
}
 8006160:	4618      	mov	r0, r3
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d005      	beq.n	8006192 <USBD_StdDevReq+0x26>
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d857      	bhi.n	800623a <USBD_StdDevReq+0xce>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00f      	beq.n	80061ae <USBD_StdDevReq+0x42>
 800618e:	2b20      	cmp	r3, #32
 8006190:	d153      	bne.n	800623a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	32ae      	adds	r2, #174	; 0xae
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
      break;
 80061ac:	e04a      	b.n	8006244 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	d83b      	bhi.n	800622e <USBD_StdDevReq+0xc2>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USBD_StdDevReq+0x50>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	08006211 	.word	0x08006211
 80061c0:	08006225 	.word	0x08006225
 80061c4:	0800622f 	.word	0x0800622f
 80061c8:	0800621b 	.word	0x0800621b
 80061cc:	0800622f 	.word	0x0800622f
 80061d0:	080061ef 	.word	0x080061ef
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	0800622f 	.word	0x0800622f
 80061dc:	08006207 	.word	0x08006207
 80061e0:	080061f9 	.word	0x080061f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa3c 	bl	8006664 <USBD_GetDescriptor>
          break;
 80061ec:	e024      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fba1 	bl	8006938 <USBD_SetAddress>
          break;
 80061f6:	e01f      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fbe0 	bl	80069c0 <USBD_SetConfig>
 8006200:	4603      	mov	r3, r0
 8006202:	73fb      	strb	r3, [r7, #15]
          break;
 8006204:	e018      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fc83 	bl	8006b14 <USBD_GetConfig>
          break;
 800620e:	e013      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fcb4 	bl	8006b80 <USBD_GetStatus>
          break;
 8006218:	e00e      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fce3 	bl	8006be8 <USBD_SetFeature>
          break;
 8006222:	e009      	b.n	8006238 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fd07 	bl	8006c3a <USBD_ClrFeature>
          break;
 800622c:	e004      	b.n	8006238 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fd5e 	bl	8006cf2 <USBD_CtlError>
          break;
 8006236:	bf00      	nop
      }
      break;
 8006238:	e004      	b.n	8006244 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fd58 	bl	8006cf2 <USBD_CtlError>
      break;
 8006242:	bf00      	nop
  }

  return ret;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d005      	beq.n	8006276 <USBD_StdItfReq+0x26>
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d852      	bhi.n	8006314 <USBD_StdItfReq+0xc4>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <USBD_StdItfReq+0x26>
 8006272:	2b20      	cmp	r3, #32
 8006274:	d14e      	bne.n	8006314 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	2b02      	cmp	r3, #2
 8006282:	d840      	bhi.n	8006306 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	889b      	ldrh	r3, [r3, #4]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d836      	bhi.n	80062fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	889b      	ldrh	r3, [r3, #4]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fed9 	bl	800604e <USBD_CoreFindIF>
 800629c:	4603      	mov	r3, r0
 800629e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	2bff      	cmp	r3, #255	; 0xff
 80062a4:	d01d      	beq.n	80062e2 <USBD_StdItfReq+0x92>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11a      	bne.n	80062e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062ac:	7bba      	ldrb	r2, [r7, #14]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32ae      	adds	r2, #174	; 0xae
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80062bc:	7bba      	ldrb	r2, [r7, #14]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062c4:	7bba      	ldrb	r2, [r7, #14]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32ae      	adds	r2, #174	; 0xae
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062da:	e004      	b.n	80062e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062e0:	e001      	b.n	80062e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80062e2:	2303      	movs	r3, #3
 80062e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	88db      	ldrh	r3, [r3, #6]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d110      	bne.n	8006310 <USBD_StdItfReq+0xc0>
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fdc7 	bl	8006e88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062fa:	e009      	b.n	8006310 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fcf7 	bl	8006cf2 <USBD_CtlError>
          break;
 8006304:	e004      	b.n	8006310 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fcf2 	bl	8006cf2 <USBD_CtlError>
          break;
 800630e:	e000      	b.n	8006312 <USBD_StdItfReq+0xc2>
          break;
 8006310:	bf00      	nop
      }
      break;
 8006312:	e004      	b.n	800631e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fceb 	bl	8006cf2 <USBD_CtlError>
      break;
 800631c:	bf00      	nop
  }

  return ret;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	889b      	ldrh	r3, [r3, #4]
 800633a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d007      	beq.n	8006358 <USBD_StdEPReq+0x30>
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	f200 817f 	bhi.w	800664c <USBD_StdEPReq+0x324>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02a      	beq.n	80063a8 <USBD_StdEPReq+0x80>
 8006352:	2b20      	cmp	r3, #32
 8006354:	f040 817a 	bne.w	800664c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fe83 	bl	8006068 <USBD_CoreFindEP>
 8006362:	4603      	mov	r3, r0
 8006364:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006366:	7b7b      	ldrb	r3, [r7, #13]
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	f000 8174 	beq.w	8006656 <USBD_StdEPReq+0x32e>
 800636e:	7b7b      	ldrb	r3, [r7, #13]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8170 	bne.w	8006656 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006376:	7b7a      	ldrb	r2, [r7, #13]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800637e:	7b7a      	ldrb	r2, [r7, #13]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	32ae      	adds	r2, #174	; 0xae
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8163 	beq.w	8006656 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006390:	7b7a      	ldrb	r2, [r7, #13]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	32ae      	adds	r2, #174	; 0xae
 8006396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063a6:	e156      	b.n	8006656 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d008      	beq.n	80063c2 <USBD_StdEPReq+0x9a>
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	f300 8145 	bgt.w	8006640 <USBD_StdEPReq+0x318>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 809b 	beq.w	80064f2 <USBD_StdEPReq+0x1ca>
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d03c      	beq.n	800643a <USBD_StdEPReq+0x112>
 80063c0:	e13e      	b.n	8006640 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d002      	beq.n	80063d4 <USBD_StdEPReq+0xac>
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d016      	beq.n	8006400 <USBD_StdEPReq+0xd8>
 80063d2:	e02c      	b.n	800642e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <USBD_StdEPReq+0xce>
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d00a      	beq.n	80063f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 f977 	bl	80076d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 f973 	bl	80076d8 <USBD_LL_StallEP>
 80063f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063f4:	e020      	b.n	8006438 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc7a 	bl	8006cf2 <USBD_CtlError>
              break;
 80063fe:	e01b      	b.n	8006438 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	885b      	ldrh	r3, [r3, #2]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10e      	bne.n	8006426 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <USBD_StdEPReq+0xfe>
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d008      	beq.n	8006426 <USBD_StdEPReq+0xfe>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	88db      	ldrh	r3, [r3, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f959 	bl	80076d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fd2e 	bl	8006e88 <USBD_CtlSendStatus>

              break;
 800642c:	e004      	b.n	8006438 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fc5e 	bl	8006cf2 <USBD_CtlError>
              break;
 8006436:	bf00      	nop
          }
          break;
 8006438:	e107      	b.n	800664a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d002      	beq.n	800644c <USBD_StdEPReq+0x124>
 8006446:	2b03      	cmp	r3, #3
 8006448:	d016      	beq.n	8006478 <USBD_StdEPReq+0x150>
 800644a:	e04b      	b.n	80064e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00d      	beq.n	800646e <USBD_StdEPReq+0x146>
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d00a      	beq.n	800646e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 f93b 	bl	80076d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f937 	bl	80076d8 <USBD_LL_StallEP>
 800646a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800646c:	e040      	b.n	80064f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fc3e 	bl	8006cf2 <USBD_CtlError>
              break;
 8006476:	e03b      	b.n	80064f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	885b      	ldrh	r3, [r3, #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d136      	bne.n	80064ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f941 	bl	8007716 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fcf7 	bl	8006e88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fde2 	bl	8006068 <USBD_CoreFindEP>
 80064a4:	4603      	mov	r3, r0
 80064a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064a8:	7b7b      	ldrb	r3, [r7, #13]
 80064aa:	2bff      	cmp	r3, #255	; 0xff
 80064ac:	d01f      	beq.n	80064ee <USBD_StdEPReq+0x1c6>
 80064ae:	7b7b      	ldrb	r3, [r7, #13]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11c      	bne.n	80064ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064b4:	7b7a      	ldrb	r2, [r7, #13]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80064bc:	7b7a      	ldrb	r2, [r7, #13]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32ae      	adds	r2, #174	; 0xae
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064cc:	7b7a      	ldrb	r2, [r7, #13]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	32ae      	adds	r2, #174	; 0xae
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80064e2:	e004      	b.n	80064ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc03 	bl	8006cf2 <USBD_CtlError>
              break;
 80064ec:	e000      	b.n	80064f0 <USBD_StdEPReq+0x1c8>
              break;
 80064ee:	bf00      	nop
          }
          break;
 80064f0:	e0ab      	b.n	800664a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d002      	beq.n	8006504 <USBD_StdEPReq+0x1dc>
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d032      	beq.n	8006568 <USBD_StdEPReq+0x240>
 8006502:	e097      	b.n	8006634 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <USBD_StdEPReq+0x1f2>
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d004      	beq.n	800651a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fbed 	bl	8006cf2 <USBD_CtlError>
                break;
 8006518:	e091      	b.n	800663e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da0b      	bge.n	800653a <USBD_StdEPReq+0x212>
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	3310      	adds	r3, #16
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	3304      	adds	r3, #4
 8006538:	e00b      	b.n	8006552 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2202      	movs	r2, #2
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fc37 	bl	8006dd4 <USBD_CtlSendData>
              break;
 8006566:	e06a      	b.n	800663e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da11      	bge.n	8006594 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d117      	bne.n	80065ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fbb0 	bl	8006cf2 <USBD_CtlError>
                  break;
 8006592:	e054      	b.n	800663e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	f003 020f 	and.w	r2, r3, #15
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb9d 	bl	8006cf2 <USBD_CtlError>
                  break;
 80065b8:	e041      	b.n	800663e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da0b      	bge.n	80065da <USBD_StdEPReq+0x2b2>
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	3310      	adds	r3, #16
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4413      	add	r3, r2
 80065d6:	3304      	adds	r3, #4
 80065d8:	e00b      	b.n	80065f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	3304      	adds	r3, #4
 80065f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <USBD_StdEPReq+0x2d8>
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d103      	bne.n	8006608 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e00e      	b.n	8006626 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f8a1 	bl	8007754 <USBD_LL_IsStallEP>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e002      	b.n	8006626 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2202      	movs	r2, #2
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fbd1 	bl	8006dd4 <USBD_CtlSendData>
              break;
 8006632:	e004      	b.n	800663e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fb5b 	bl	8006cf2 <USBD_CtlError>
              break;
 800663c:	bf00      	nop
          }
          break;
 800663e:	e004      	b.n	800664a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fb55 	bl	8006cf2 <USBD_CtlError>
          break;
 8006648:	bf00      	nop
      }
      break;
 800664a:	e005      	b.n	8006658 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fb4f 	bl	8006cf2 <USBD_CtlError>
      break;
 8006654:	e000      	b.n	8006658 <USBD_StdEPReq+0x330>
      break;
 8006656:	bf00      	nop
  }

  return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	885b      	ldrh	r3, [r3, #2]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	2b06      	cmp	r3, #6
 8006686:	f200 8128 	bhi.w	80068da <USBD_GetDescriptor+0x276>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USBD_GetDescriptor+0x2c>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066c5 	.word	0x080066c5
 8006698:	08006705 	.word	0x08006705
 800669c:	080068db 	.word	0x080068db
 80066a0:	080068db 	.word	0x080068db
 80066a4:	0800687b 	.word	0x0800687b
 80066a8:	080068a7 	.word	0x080068a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7c12      	ldrb	r2, [r2, #16]
 80066b8:	f107 0108 	add.w	r1, r7, #8
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
 80066c0:	60f8      	str	r0, [r7, #12]
      break;
 80066c2:	e112      	b.n	80068ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7c1b      	ldrb	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10d      	bne.n	80066e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	f107 0208 	add.w	r2, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	2202      	movs	r2, #2
 80066e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066e6:	e100      	b.n	80068ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f107 0208 	add.w	r2, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	2202      	movs	r2, #2
 8006700:	701a      	strb	r2, [r3, #0]
      break;
 8006702:	e0f2      	b.n	80068ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	885b      	ldrh	r3, [r3, #2]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b05      	cmp	r3, #5
 800670c:	f200 80ac 	bhi.w	8006868 <USBD_GetDescriptor+0x204>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <USBD_GetDescriptor+0xb4>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006731 	.word	0x08006731
 800671c:	08006765 	.word	0x08006765
 8006720:	08006799 	.word	0x08006799
 8006724:	080067cd 	.word	0x080067cd
 8006728:	08006801 	.word	0x08006801
 800672c:	08006835 	.word	0x08006835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e091      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 facb 	bl	8006cf2 <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e089      	b.n	8006878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e077      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fab1 	bl	8006cf2 <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e06f      	b.n	8006878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e05d      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa97 	bl	8006cf2 <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e055      	b.n	8006878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7c12      	ldrb	r2, [r2, #16]
 80067e4:	f107 0108 	add.w	r1, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ee:	e043      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa7d 	bl	8006cf2 <USBD_CtlError>
            err++;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	3301      	adds	r3, #1
 80067fc:	72fb      	strb	r3, [r7, #11]
          break;
 80067fe:	e03b      	b.n	8006878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	7c12      	ldrb	r2, [r2, #16]
 8006818:	f107 0108 	add.w	r1, r7, #8
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006822:	e029      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa63 	bl	8006cf2 <USBD_CtlError>
            err++;
 800682c:	7afb      	ldrb	r3, [r7, #11]
 800682e:	3301      	adds	r3, #1
 8006830:	72fb      	strb	r3, [r7, #11]
          break;
 8006832:	e021      	b.n	8006878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	7c12      	ldrb	r2, [r2, #16]
 800684c:	f107 0108 	add.w	r1, r7, #8
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006856:	e00f      	b.n	8006878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa49 	bl	8006cf2 <USBD_CtlError>
            err++;
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	3301      	adds	r3, #1
 8006864:	72fb      	strb	r3, [r7, #11]
          break;
 8006866:	e007      	b.n	8006878 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa41 	bl	8006cf2 <USBD_CtlError>
          err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006876:	bf00      	nop
      }
      break;
 8006878:	e037      	b.n	80068ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7c1b      	ldrb	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	f107 0208 	add.w	r2, r7, #8
 800688e:	4610      	mov	r0, r2
 8006890:	4798      	blx	r3
 8006892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006894:	e029      	b.n	80068ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fa2a 	bl	8006cf2 <USBD_CtlError>
        err++;
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	3301      	adds	r3, #1
 80068a2:	72fb      	strb	r3, [r7, #11]
      break;
 80068a4:	e021      	b.n	80068ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7c1b      	ldrb	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f107 0208 	add.w	r2, r7, #8
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
 80068be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	2207      	movs	r2, #7
 80068c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068c8:	e00f      	b.n	80068ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa10 	bl	8006cf2 <USBD_CtlError>
        err++;
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	3301      	adds	r3, #1
 80068d6:	72fb      	strb	r3, [r7, #11]
      break;
 80068d8:	e007      	b.n	80068ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa08 	bl	8006cf2 <USBD_CtlError>
      err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	bf00      	nop
  }

  if (err != 0U)
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11e      	bne.n	800692e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80068f8:	893b      	ldrh	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	88da      	ldrh	r2, [r3, #6]
 8006902:	893b      	ldrh	r3, [r7, #8]
 8006904:	4293      	cmp	r3, r2
 8006906:	bf28      	it	cs
 8006908:	4613      	movcs	r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800690e:	893b      	ldrh	r3, [r7, #8]
 8006910:	461a      	mov	r2, r3
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa5d 	bl	8006dd4 <USBD_CtlSendData>
 800691a:	e009      	b.n	8006930 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9e7 	bl	8006cf2 <USBD_CtlError>
 8006924:	e004      	b.n	8006930 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 faae 	bl	8006e88 <USBD_CtlSendStatus>
 800692c:	e000      	b.n	8006930 <USBD_GetDescriptor+0x2cc>
    return;
 800692e:	bf00      	nop
  }
}
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	889b      	ldrh	r3, [r3, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d131      	bne.n	80069ae <USBD_SetAddress+0x76>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d12d      	bne.n	80069ae <USBD_SetAddress+0x76>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	2b7f      	cmp	r3, #127	; 0x7f
 8006958:	d829      	bhi.n	80069ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	885b      	ldrh	r3, [r3, #2]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d104      	bne.n	800697c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f9bc 	bl	8006cf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697a:	e01d      	b.n	80069b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 ff0f 	bl	80077ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa7a 	bl	8006e88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a2:	e009      	b.n	80069b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ac:	e004      	b.n	80069b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f99e 	bl	8006cf2 <USBD_CtlError>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	885b      	ldrh	r3, [r3, #2]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <USBD_SetConfig+0x150>)
 80069d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069d8:	4b4d      	ldr	r3, [pc, #308]	; (8006b10 <USBD_SetConfig+0x150>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d905      	bls.n	80069ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f985 	bl	8006cf2 <USBD_CtlError>
    return USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e08c      	b.n	8006b06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d002      	beq.n	80069fe <USBD_SetConfig+0x3e>
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d029      	beq.n	8006a50 <USBD_SetConfig+0x90>
 80069fc:	e075      	b.n	8006aea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80069fe:	4b44      	ldr	r3, [pc, #272]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d020      	beq.n	8006a48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a06:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a10:	4b3f      	ldr	r3, [pc, #252]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fe ffe7 	bl	80059ea <USBD_SetClassConfig>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f962 	bl	8006cf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a36:	e065      	b.n	8006b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa25 	bl	8006e88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2203      	movs	r2, #3
 8006a42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a46:	e05d      	b.n	8006b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa1d 	bl	8006e88 <USBD_CtlSendStatus>
      break;
 8006a4e:	e059      	b.n	8006b04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a50:	4b2f      	ldr	r3, [pc, #188]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d112      	bne.n	8006a7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a60:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a6a:	4b29      	ldr	r3, [pc, #164]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fe ffd6 	bl	8005a22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa06 	bl	8006e88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a7c:	e042      	b.n	8006b04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a7e:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d02a      	beq.n	8006ae2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fe ffc4 	bl	8005a22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <USBD_SetConfig+0x150>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <USBD_SetConfig+0x150>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fe ff9d 	bl	80059ea <USBD_SetClassConfig>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f918 	bl	8006cf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fe ffa9 	bl	8005a22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ad8:	e014      	b.n	8006b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9d4 	bl	8006e88 <USBD_CtlSendStatus>
      break;
 8006ae0:	e010      	b.n	8006b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9d0 	bl	8006e88 <USBD_CtlSendStatus>
      break;
 8006ae8:	e00c      	b.n	8006b04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f900 	bl	8006cf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <USBD_SetConfig+0x150>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fe ff92 	bl	8005a22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	73fb      	strb	r3, [r7, #15]
      break;
 8006b02:	bf00      	nop
  }

  return ret;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000264 	.word	0x20000264

08006b14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d004      	beq.n	8006b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8e2 	bl	8006cf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b2e:	e023      	b.n	8006b78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	dc02      	bgt.n	8006b42 <USBD_GetConfig+0x2e>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dc03      	bgt.n	8006b48 <USBD_GetConfig+0x34>
 8006b40:	e015      	b.n	8006b6e <USBD_GetConfig+0x5a>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d00b      	beq.n	8006b5e <USBD_GetConfig+0x4a>
 8006b46:	e012      	b.n	8006b6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3308      	adds	r3, #8
 8006b52:	2201      	movs	r2, #1
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f93c 	bl	8006dd4 <USBD_CtlSendData>
        break;
 8006b5c:	e00c      	b.n	8006b78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f934 	bl	8006dd4 <USBD_CtlSendData>
        break;
 8006b6c:	e004      	b.n	8006b78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8be 	bl	8006cf2 <USBD_CtlError>
        break;
 8006b76:	bf00      	nop
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d81e      	bhi.n	8006bd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d004      	beq.n	8006baa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8a5 	bl	8006cf2 <USBD_CtlError>
        break;
 8006ba8:	e01a      	b.n	8006be0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 0202 	orr.w	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	2202      	movs	r2, #2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f900 	bl	8006dd4 <USBD_CtlSendData>
      break;
 8006bd4:	e004      	b.n	8006be0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f88a 	bl	8006cf2 <USBD_CtlError>
      break;
 8006bde:	bf00      	nop
  }
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	885b      	ldrh	r3, [r3, #2]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f940 	bl	8006e88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c08:	e013      	b.n	8006c32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d10b      	bne.n	8006c2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	889b      	ldrh	r3, [r3, #4]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f930 	bl	8006e88 <USBD_CtlSendStatus>
}
 8006c28:	e003      	b.n	8006c32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f860 	bl	8006cf2 <USBD_CtlError>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d80b      	bhi.n	8006c6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	885b      	ldrh	r3, [r3, #2]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10c      	bne.n	8006c74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f910 	bl	8006e88 <USBD_CtlSendStatus>
      }
      break;
 8006c68:	e004      	b.n	8006c74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f840 	bl	8006cf2 <USBD_CtlError>
      break;
 8006c72:	e000      	b.n	8006c76 <USBD_ClrFeature+0x3c>
      break;
 8006c74:	bf00      	nop
  }
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff fa41 	bl	8006130 <SWAPBYTE>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff fa34 	bl	8006130 <SWAPBYTE>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fa27 	bl	8006130 <SWAPBYTE>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	80da      	strh	r2, [r3, #6]
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cfc:	2180      	movs	r1, #128	; 0x80
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fcea 	bl	80076d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d04:	2100      	movs	r1, #0
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fce6 	bl	80076d8 <USBD_LL_StallEP>
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d036      	beq.n	8006d98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f000 f836 	bl	8006da0 <USBD_GetLen>
 8006d34:	4603      	mov	r3, r0
 8006d36:	3301      	adds	r3, #1
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4413      	add	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	3301      	adds	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	3301      	adds	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d64:	e013      	b.n	8006d8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
    idx++;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	4413      	add	r3, r2
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e7      	bne.n	8006d66 <USBD_GetString+0x52>
 8006d96:	e000      	b.n	8006d9a <USBD_GetString+0x86>
    return;
 8006d98:	bf00      	nop
  }
}
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006db0:	e005      	b.n	8006dbe <USBD_GetLen+0x1e>
  {
    len++;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	3301      	adds	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f5      	bne.n	8006db2 <USBD_GetLen+0x12>
  }

  return len;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fcf5 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fce4 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	2100      	movs	r1, #0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fce8 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	2100      	movs	r1, #0
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fcd7 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2204      	movs	r2, #4
 8006e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fca3 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2205      	movs	r2, #5
 8006eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fcb1 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4912      	ldr	r1, [pc, #72]	; (8006f24 <MX_USB_DEVICE_Init+0x50>)
 8006edc:	4812      	ldr	r0, [pc, #72]	; (8006f28 <MX_USB_DEVICE_Init+0x54>)
 8006ede:	f7fe fd07 	bl	80058f0 <USBD_Init>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ee8:	f7f9 fc2c 	bl	8000744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006eec:	490f      	ldr	r1, [pc, #60]	; (8006f2c <MX_USB_DEVICE_Init+0x58>)
 8006eee:	480e      	ldr	r0, [pc, #56]	; (8006f28 <MX_USB_DEVICE_Init+0x54>)
 8006ef0:	f7fe fd2e 	bl	8005950 <USBD_RegisterClass>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006efa:	f7f9 fc23 	bl	8000744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006efe:	490c      	ldr	r1, [pc, #48]	; (8006f30 <MX_USB_DEVICE_Init+0x5c>)
 8006f00:	4809      	ldr	r0, [pc, #36]	; (8006f28 <MX_USB_DEVICE_Init+0x54>)
 8006f02:	f7fe fc1f 	bl	8005744 <USBD_CDC_RegisterInterface>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f0c:	f7f9 fc1a 	bl	8000744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f10:	4805      	ldr	r0, [pc, #20]	; (8006f28 <MX_USB_DEVICE_Init+0x54>)
 8006f12:	f7fe fd53 	bl	80059bc <USBD_Start>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f1c:	f7f9 fc12 	bl	8000744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f20:	bf00      	nop
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	200000ac 	.word	0x200000ac
 8006f28:	20000268 	.word	0x20000268
 8006f2c:	20000018 	.word	0x20000018
 8006f30:	20000098 	.word	0x20000098

08006f34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4905      	ldr	r1, [pc, #20]	; (8006f50 <CDC_Init_FS+0x1c>)
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <CDC_Init_FS+0x20>)
 8006f3e:	f7fe fc1b 	bl	8005778 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f42:	4905      	ldr	r1, [pc, #20]	; (8006f58 <CDC_Init_FS+0x24>)
 8006f44:	4803      	ldr	r0, [pc, #12]	; (8006f54 <CDC_Init_FS+0x20>)
 8006f46:	f7fe fc39 	bl	80057bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000944 	.word	0x20000944
 8006f54:	20000268 	.word	0x20000268
 8006f58:	20000544 	.word	0x20000544

08006f5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	2b23      	cmp	r3, #35	; 0x23
 8006f80:	d84a      	bhi.n	8007018 <CDC_Control_FS+0xac>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <CDC_Control_FS+0x1c>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08007019 	.word	0x08007019
 8006f8c:	08007019 	.word	0x08007019
 8006f90:	08007019 	.word	0x08007019
 8006f94:	08007019 	.word	0x08007019
 8006f98:	08007019 	.word	0x08007019
 8006f9c:	08007019 	.word	0x08007019
 8006fa0:	08007019 	.word	0x08007019
 8006fa4:	08007019 	.word	0x08007019
 8006fa8:	08007019 	.word	0x08007019
 8006fac:	08007019 	.word	0x08007019
 8006fb0:	08007019 	.word	0x08007019
 8006fb4:	08007019 	.word	0x08007019
 8006fb8:	08007019 	.word	0x08007019
 8006fbc:	08007019 	.word	0x08007019
 8006fc0:	08007019 	.word	0x08007019
 8006fc4:	08007019 	.word	0x08007019
 8006fc8:	08007019 	.word	0x08007019
 8006fcc:	08007019 	.word	0x08007019
 8006fd0:	08007019 	.word	0x08007019
 8006fd4:	08007019 	.word	0x08007019
 8006fd8:	08007019 	.word	0x08007019
 8006fdc:	08007019 	.word	0x08007019
 8006fe0:	08007019 	.word	0x08007019
 8006fe4:	08007019 	.word	0x08007019
 8006fe8:	08007019 	.word	0x08007019
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	08007019 	.word	0x08007019
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007019 	.word	0x08007019
 8007004:	08007019 	.word	0x08007019
 8007008:	08007019 	.word	0x08007019
 800700c:	08007019 	.word	0x08007019
 8007010:	08007019 	.word	0x08007019
 8007014:	08007019 	.word	0x08007019
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007018:	bf00      	nop
  }

  return (USBD_OK);
 800701a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	480f      	ldr	r0, [pc, #60]	; (8007074 <CDC_Receive_FS+0x4c>)
 8007036:	f7fe fbc1 	bl	80057bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800703a:	480e      	ldr	r0, [pc, #56]	; (8007074 <CDC_Receive_FS+0x4c>)
 800703c:	f7fe fc22 	bl	8005884 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++){
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e00b      	b.n	800705e <CDC_Receive_FS+0x36>
  		uint8_t byte = Buf[i];
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4413      	add	r3, r2
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	72fb      	strb	r3, [r7, #11]
  		arpcByteReceived(byte);
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd ff22 	bl	8004e9c <arpcByteReceived>
  for(int i = 0; i < *Len; i++){
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	429a      	cmp	r2, r3
 8007066:	d8ee      	bhi.n	8007046 <CDC_Receive_FS+0x1e>
  	}

  return (USBD_OK);
 8007068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000268 	.word	0x20000268

08007078 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <CDC_Transmit_FS+0x48>)
 800708a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800709a:	2301      	movs	r3, #1
 800709c:	e00b      	b.n	80070b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800709e:	887b      	ldrh	r3, [r7, #2]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4806      	ldr	r0, [pc, #24]	; (80070c0 <CDC_Transmit_FS+0x48>)
 80070a6:	f7fe fb67 	bl	8005778 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070aa:	4805      	ldr	r0, [pc, #20]	; (80070c0 <CDC_Transmit_FS+0x48>)
 80070ac:	f7fe fba4 	bl	80057f8 <USBD_CDC_TransmitPacket>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000268 	.word	0x20000268

080070c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2212      	movs	r2, #18
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	200000c8 	.word	0x200000c8

0800710c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2204      	movs	r2, #4
 800711c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800711e:	4b03      	ldr	r3, [pc, #12]	; (800712c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	200000dc 	.word	0x200000dc

08007130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007146:	4808      	ldr	r0, [pc, #32]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007148:	f7ff fde4 	bl	8006d14 <USBD_GetString>
 800714c:	e004      	b.n	8007158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007152:	4805      	ldr	r0, [pc, #20]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007154:	f7ff fdde 	bl	8006d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000d44 	.word	0x20000d44
 8007168:	080079a8 	.word	0x080079a8

0800716c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4904      	ldr	r1, [pc, #16]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800717e:	f7ff fdc9 	bl	8006d14 <USBD_GetString>
  return USBD_StrDesc;
 8007182:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000d44 	.word	0x20000d44
 8007190:	080079b4 	.word	0x080079b4

08007194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	221a      	movs	r2, #26
 80071a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071a6:	f000 f843 	bl	8007230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071aa:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	200000e0 	.word	0x200000e0

080071b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4907      	ldr	r1, [pc, #28]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ce:	4808      	ldr	r0, [pc, #32]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071d0:	f7ff fda0 	bl	8006d14 <USBD_GetString>
 80071d4:	e004      	b.n	80071e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4904      	ldr	r1, [pc, #16]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071da:	4805      	ldr	r0, [pc, #20]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071dc:	f7ff fd9a 	bl	8006d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000d44 	.word	0x20000d44
 80071f0:	080079bc 	.word	0x080079bc

080071f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4907      	ldr	r1, [pc, #28]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800720a:	4808      	ldr	r0, [pc, #32]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800720c:	f7ff fd82 	bl	8006d14 <USBD_GetString>
 8007210:	e004      	b.n	800721c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007218:	f7ff fd7c 	bl	8006d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000d44 	.word	0x20000d44
 800722c:	080079c8 	.word	0x080079c8

08007230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <Get_SerialNum+0x44>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <Get_SerialNum+0x48>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <Get_SerialNum+0x4c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007256:	2208      	movs	r2, #8
 8007258:	4909      	ldr	r1, [pc, #36]	; (8007280 <Get_SerialNum+0x50>)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f814 	bl	8007288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007260:	2204      	movs	r2, #4
 8007262:	4908      	ldr	r1, [pc, #32]	; (8007284 <Get_SerialNum+0x54>)
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f000 f80f 	bl	8007288 <IntToUnicode>
  }
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	1fff7a10 	.word	0x1fff7a10
 8007278:	1fff7a14 	.word	0x1fff7a14
 800727c:	1fff7a18 	.word	0x1fff7a18
 8007280:	200000e2 	.word	0x200000e2
 8007284:	200000f2 	.word	0x200000f2

08007288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e027      	b.n	80072f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	0f1b      	lsrs	r3, r3, #28
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d80b      	bhi.n	80072c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	0f1b      	lsrs	r3, r3, #28
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	440b      	add	r3, r1
 80072b8:	3230      	adds	r2, #48	; 0x30
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e00a      	b.n	80072d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	0f1b      	lsrs	r3, r3, #28
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4619      	mov	r1, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	440b      	add	r3, r1
 80072d0:	3237      	adds	r2, #55	; 0x37
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	3301      	adds	r3, #1
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	4413      	add	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	3301      	adds	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
 80072f0:	7dfa      	ldrb	r2, [r7, #23]
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d3d3      	bcc.n	80072a0 <IntToUnicode+0x18>
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007328:	d13a      	bne.n	80073a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	6313      	str	r3, [r2, #48]	; 0x30
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007346:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800734a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734c:	2302      	movs	r3, #2
 800734e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007354:	2303      	movs	r3, #3
 8007356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007358:	230a      	movs	r3, #10
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	4619      	mov	r1, r3
 8007362:	4812      	ldr	r0, [pc, #72]	; (80073ac <HAL_PCD_MspInit+0xa4>)
 8007364:	f7f9 fc7c 	bl	8000c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	4a0e      	ldr	r2, [pc, #56]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 800736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007372:	6353      	str	r3, [r2, #52]	; 0x34
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 800737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737c:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 800737e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007382:	6453      	str	r3, [r2, #68]	; 0x44
 8007384:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <HAL_PCD_MspInit+0xa0>)
 8007386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	2043      	movs	r0, #67	; 0x43
 8007396:	f7f9 fc2c 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800739a:	2043      	movs	r0, #67	; 0x43
 800739c:	f7f9 fc45 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073a0:	bf00      	nop
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40020000 	.word	0x40020000

080073b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7fe fb45 	bl	8005a56 <USBD_LL_SetupStage>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	4619      	mov	r1, r3
 80073fe:	f7fe fb7f 	bl	8005b00 <USBD_LL_DataOutStage>
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800741c:	78fa      	ldrb	r2, [r7, #3]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	334c      	adds	r3, #76	; 0x4c
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	f7fe fc18 	bl	8005c66 <USBD_LL_DataInStage>
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fd4c 	bl	8005eea <USBD_LL_SOF>
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007462:	2301      	movs	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d001      	beq.n	8007472 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800746e:	f7f9 f969 	bl	8000744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007478:	7bfa      	ldrb	r2, [r7, #15]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fcf6 	bl	8005e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fc9e 	bl	8005dca <USBD_LL_Reset>
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fcf1 	bl	8005e8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074cc:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <HAL_PCD_SuspendCallback+0x48>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	4a03      	ldr	r2, [pc, #12]	; (80074e0 <HAL_PCD_SuspendCallback+0x48>)
 80074d2:	f043 0306 	orr.w	r3, r3, #6
 80074d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed00 	.word	0xe000ed00

080074e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fce1 	bl	8005eba <USBD_LL_Resume>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fd39 	bl	8005f8e <USBD_LL_IsoOUTIncomplete>
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fcf5 	bl	8005f2a <USBD_LL_IsoINIncomplete>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fd4b 	bl	8005ff2 <USBD_LL_DevConnected>
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd48 	bl	8006008 <USBD_LL_DevDisconnected>
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d13c      	bne.n	800760a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <USBD_LL_Init+0x94>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <USBD_LL_Init+0x94>)
 800759c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <USBD_LL_Init+0x94>)
 80075a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075a8:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <USBD_LL_Init+0x94>)
 80075aa:	2204      	movs	r2, #4
 80075ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075ae:	4b19      	ldr	r3, [pc, #100]	; (8007614 <USBD_LL_Init+0x94>)
 80075b0:	2202      	movs	r2, #2
 80075b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075b4:	4b17      	ldr	r3, [pc, #92]	; (8007614 <USBD_LL_Init+0x94>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ba:	4b16      	ldr	r3, [pc, #88]	; (8007614 <USBD_LL_Init+0x94>)
 80075bc:	2202      	movs	r2, #2
 80075be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <USBD_LL_Init+0x94>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <USBD_LL_Init+0x94>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075cc:	4b11      	ldr	r3, [pc, #68]	; (8007614 <USBD_LL_Init+0x94>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <USBD_LL_Init+0x94>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <USBD_LL_Init+0x94>)
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075de:	480d      	ldr	r0, [pc, #52]	; (8007614 <USBD_LL_Init+0x94>)
 80075e0:	f7f9 fcf5 	bl	8000fce <HAL_PCD_Init>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075ea:	f7f9 f8ab 	bl	8000744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	4808      	ldr	r0, [pc, #32]	; (8007614 <USBD_LL_Init+0x94>)
 80075f2:	f7fa ff4c 	bl	800248e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	2100      	movs	r1, #0
 80075fa:	4806      	ldr	r0, [pc, #24]	; (8007614 <USBD_LL_Init+0x94>)
 80075fc:	f7fa ff00 	bl	8002400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007600:	2280      	movs	r2, #128	; 0x80
 8007602:	2101      	movs	r1, #1
 8007604:	4803      	ldr	r0, [pc, #12]	; (8007614 <USBD_LL_Init+0x94>)
 8007606:	f7fa fefb 	bl	8002400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000f44 	.word	0x20000f44

08007618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800762e:	4618      	mov	r0, r3
 8007630:	f7f9 fdea 	bl	8001208 <HAL_PCD_Start>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f942 	bl	80078c4 <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	461a      	mov	r2, r3
 800765c:	4603      	mov	r3, r0
 800765e:	70fb      	strb	r3, [r7, #3]
 8007660:	460b      	mov	r3, r1
 8007662:	70bb      	strb	r3, [r7, #2]
 8007664:	4613      	mov	r3, r2
 8007666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007676:	78bb      	ldrb	r3, [r7, #2]
 8007678:	883a      	ldrh	r2, [r7, #0]
 800767a:	78f9      	ldrb	r1, [r7, #3]
 800767c:	f7fa fabb 	bl	8001bf6 <HAL_PCD_EP_Open>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f91c 	bl	80078c4 <USBD_Get_USB_Status>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007690:	7bbb      	ldrb	r3, [r7, #14]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fa fb04 	bl	8001cc6 <HAL_PCD_EP_Close>
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f8fd 	bl	80078c4 <USBD_Get_USB_Status>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fa fbdc 	bl	8001eb4 <HAL_PCD_EP_SetStall>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f8de 	bl	80078c4 <USBD_Get_USB_Status>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770c:	7bbb      	ldrb	r3, [r7, #14]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7fa fc21 	bl	8001f7c <HAL_PCD_EP_ClrStall>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8bf 	bl	80078c4 <USBD_Get_USB_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774a:	7bbb      	ldrb	r3, [r7, #14]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da0b      	bge.n	8007788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	333e      	adds	r3, #62	; 0x3e
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	e00b      	b.n	80077a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	4613      	mov	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800779e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa f9ee 	bl	8001bac <HAL_PCD_SetAddress>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f874 	bl	80078c4 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	460b      	mov	r3, r1
 80077f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007808:	7af9      	ldrb	r1, [r7, #11]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	f7fa fb07 	bl	8001e20 <HAL_PCD_EP_Transmit>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f853 	bl	80078c4 <USBD_Get_USB_Status>
 800781e:	4603      	mov	r3, r0
 8007820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007822:	7dbb      	ldrb	r3, [r7, #22]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	460b      	mov	r3, r1
 800783a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800784a:	7af9      	ldrb	r1, [r7, #11]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f7fa fa83 	bl	8001d5a <HAL_PCD_EP_Receive>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f832 	bl	80078c4 <USBD_Get_USB_Status>
 8007860:	4603      	mov	r3, r0
 8007862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007864:	7dbb      	ldrb	r3, [r7, #22]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa fab3 	bl	8001df0 <HAL_PCD_EP_GetRxCount>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800789c:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_static_malloc+0x18>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20001450 	.word	0x20001450

080078b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d817      	bhi.n	8007908 <USBD_Get_USB_Status+0x44>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <USBD_Get_USB_Status+0x1c>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	080078f7 	.word	0x080078f7
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	08007903 	.word	0x08007903
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
    break;
 80078f4:	e00b      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
    break;
 80078fa:	e008      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007900:	e005      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
    break;
 8007906:	e002      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	73fb      	strb	r3, [r7, #15]
    break;
 800790c:	bf00      	nop
  }
  return usb_status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <memset>:
 800791c:	4402      	add	r2, r0
 800791e:	4603      	mov	r3, r0
 8007920:	4293      	cmp	r3, r2
 8007922:	d100      	bne.n	8007926 <memset+0xa>
 8007924:	4770      	bx	lr
 8007926:	f803 1b01 	strb.w	r1, [r3], #1
 800792a:	e7f9      	b.n	8007920 <memset+0x4>

0800792c <__libc_init_array>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	4d0d      	ldr	r5, [pc, #52]	; (8007964 <__libc_init_array+0x38>)
 8007930:	4c0d      	ldr	r4, [pc, #52]	; (8007968 <__libc_init_array+0x3c>)
 8007932:	1b64      	subs	r4, r4, r5
 8007934:	10a4      	asrs	r4, r4, #2
 8007936:	2600      	movs	r6, #0
 8007938:	42a6      	cmp	r6, r4
 800793a:	d109      	bne.n	8007950 <__libc_init_array+0x24>
 800793c:	4d0b      	ldr	r5, [pc, #44]	; (800796c <__libc_init_array+0x40>)
 800793e:	4c0c      	ldr	r4, [pc, #48]	; (8007970 <__libc_init_array+0x44>)
 8007940:	f000 f826 	bl	8007990 <_init>
 8007944:	1b64      	subs	r4, r4, r5
 8007946:	10a4      	asrs	r4, r4, #2
 8007948:	2600      	movs	r6, #0
 800794a:	42a6      	cmp	r6, r4
 800794c:	d105      	bne.n	800795a <__libc_init_array+0x2e>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f855 3b04 	ldr.w	r3, [r5], #4
 8007954:	4798      	blx	r3
 8007956:	3601      	adds	r6, #1
 8007958:	e7ee      	b.n	8007938 <__libc_init_array+0xc>
 800795a:	f855 3b04 	ldr.w	r3, [r5], #4
 800795e:	4798      	blx	r3
 8007960:	3601      	adds	r6, #1
 8007962:	e7f2      	b.n	800794a <__libc_init_array+0x1e>
 8007964:	08007df4 	.word	0x08007df4
 8007968:	08007df4 	.word	0x08007df4
 800796c:	08007df4 	.word	0x08007df4
 8007970:	08007df8 	.word	0x08007df8

08007974 <memcpy>:
 8007974:	440a      	add	r2, r1
 8007976:	4291      	cmp	r1, r2
 8007978:	f100 33ff 	add.w	r3, r0, #4294967295
 800797c:	d100      	bne.n	8007980 <memcpy+0xc>
 800797e:	4770      	bx	lr
 8007980:	b510      	push	{r4, lr}
 8007982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800798a:	4291      	cmp	r1, r2
 800798c:	d1f9      	bne.n	8007982 <memcpy+0xe>
 800798e:	bd10      	pop	{r4, pc}

08007990 <_init>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

0800799c <_fini>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr
