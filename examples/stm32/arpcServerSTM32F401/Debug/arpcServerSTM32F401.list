
arpcServerSTM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000791c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef4  08007ef4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007efc  08007efc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200000fc  08008000  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  08008000  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018156  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003627  00000000  00000000  00038282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0003b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018931  00000000  00000000  0003d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125ca  00000000  00000000  00055c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890ad  00000000  00000000  00068253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000f1354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007a98 	.word	0x08007a98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007a98 	.word	0x08007a98

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setLED>:
/* USER CODE BEGIN 0 */

RPC void HAL_Delay(uint32_t Delay);
RPC void setLED(uint8_t value);

void setLED(uint8_t value) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	461a      	mov	r2, r3
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <setLED+0x20>)
 80004e0:	f000 fd4c 	bl	8000f7c <HAL_GPIO_WritePin>
                    (GPIO_PinState)value);
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40020800 	.word	0x40020800

080004f0 <shutdown>:


void shutdown(uint8_t errorCode) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fa:	b672      	cpsid	i
}
 80004fc:	bf00      	nop
  __disable_irq();
  for (;;) {
    HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <shutdown+0x20>)
 8000504:	f000 fd53 	bl	8000fae <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fa7d 	bl	8000a08 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800050e:	e7f6      	b.n	80004fe <shutdown+0xe>
 8000510:	40020800 	.word	0x40020800

08000514 <sendByte>:
  }
}

void sendByte(uint8_t byte) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_VCOM
  while (CDC_Transmit_FS(&byte, 1) != USBD_OK) {

  }
#else
  if (HAL_UART_Transmit(&huart1, &byte, 1, 1000) != HAL_OK){
 800051e:	1df9      	adds	r1, r7, #7
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	2201      	movs	r2, #1
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <sendByte+0x2c>)
 8000528:	f002 fc6d 	bl	8002e06 <HAL_UART_Transmit>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <sendByte+0x24>
	  shutdown(0);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ffdc 	bl	80004f0 <shutdown>
  }

#endif
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000444 	.word	0x20000444

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 f9ec 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f81c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8b0 	bl	80006b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000554:	f000 f884 	bl	8000660 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000558:	f006 fd66 	bl	8007028 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  setLED(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ffb5 	bl	80004cc <setLED>
  /* USER CODE BEGIN WHILE */

  while (1) {
#ifndef USE_VCOM
    static uint8_t byte = 0;
    if (HAL_UART_Receive(&huart1, &byte, 1, 100) == HAL_OK) {
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	2201      	movs	r2, #1
 8000566:	4906      	ldr	r1, [pc, #24]	; (8000580 <main+0x3c>)
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x40>)
 800056a:	f002 fcde 	bl	8002f2a <HAL_UART_Receive>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f6      	bne.n	8000562 <main+0x1e>
      arpcByteReceived(byte);
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <main+0x3c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f004 fd7d 	bl	8005078 <arpcByteReceived>
  while (1) {
 800057e:	e7f0      	b.n	8000562 <main+0x1e>
 8000580:	20000118 	.word	0x20000118
 8000584:	20000444 	.word	0x20000444

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f007 fa76 	bl	8007a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005fc:	2319      	movs	r3, #25
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f001 ff62 	bl	80024dc <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f89b 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f9c4 	bl	80029cc <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f885 	bl	8000758 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <MX_USART1_UART_Init+0x4c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <MX_USART1_UART_Init+0x50>)
 800066e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000684:	220c      	movs	r2, #12
 8000686:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_USART1_UART_Init+0x48>)
 8000696:	f002 fb69 	bl	8002d6c <HAL_UART_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80006a0:	f000 f85a 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000444 	.word	0x20000444
 80006ac:	40011000 	.word	0x40011000
 80006b0:	0003d090 	.word	0x0003d090

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <MX_GPIO_Init+0x9c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_GPIO_Init+0x9c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0xa0>)
 8000726:	f000 fc29 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0xa0>)
 8000744:	f000 fa96 	bl	8000c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020800 	.word	0x40020800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_UART_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12c      	bne.n	8000830 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x88>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_UART_MspInit+0x88>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_UART_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800080e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000820:	2307      	movs	r3, #7
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_UART_MspInit+0x8c>)
 800082c:	f000 fa22 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40011000 	.word	0x40011000
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f89a 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <OTG_FS_IRQHandler+0x10>)
 800089e:	f000 fcf0 	bl	8001282 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20001168 	.word	0x20001168

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f007 f891 	bl	8007a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe1f 	bl	8000544 <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000914:	08007f04 	.word	0x08007f04
  ldr r2, =_sbss
 8000918:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800091c:	20001674 	.word	0x20001674

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f94f 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff04 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f967 	bl	8000c5a <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f92f 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000488 	.word	0x20000488

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000488 	.word	0x20000488

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e159      	b.n	8000f44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8148 	bne.w	8000f3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d005      	beq.n	8000cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d130      	bne.n	8000d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	091b      	lsrs	r3, r3, #4
 8000d12:	f003 0201 	and.w	r2, r3, #1
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d017      	beq.n	8000d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80a2 	beq.w	8000f3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a56      	ldr	r2, [pc, #344]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <HAL_GPIO_Init+0x2ec>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a49      	ldr	r2, [pc, #292]	; (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x202>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a48      	ldr	r2, [pc, #288]	; (8000f68 <HAL_GPIO_Init+0x2f4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1fe>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a47      	ldr	r2, [pc, #284]	; (8000f6c <HAL_GPIO_Init+0x2f8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1fa>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_GPIO_Init+0x2fc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1f6>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1f2>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x2ec>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f aea2 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	041a      	lsls	r2, r3, #16
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	400b      	ands	r3, r1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe4:	b08f      	sub	sp, #60	; 0x3c
 8000fe6:	af0a      	add	r7, sp, #40	; 0x28
 8000fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e10f      	b.n	8001214 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f006 f9fe 	bl	8007410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fb67 	bl	8003706 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	687e      	ldr	r6, [r7, #4]
 8001040:	466d      	mov	r5, sp
 8001042:	f106 0410 	add.w	r4, r6, #16
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001052:	e885 0003 	stmia.w	r5, {r0, r1}
 8001056:	1d33      	adds	r3, r6, #4
 8001058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f002 fa3e 	bl	80034dc <USB_CoreInit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0d0      	b.n	8001214 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fb55 	bl	8003728 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e04a      	b.n	800111a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	333d      	adds	r3, #61	; 0x3d
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	333c      	adds	r3, #60	; 0x3c
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3344      	adds	r3, #68	; 0x44
 80010c0:	4602      	mov	r2, r0
 80010c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3340      	adds	r3, #64	; 0x40
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	3348      	adds	r3, #72	; 0x48
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	334c      	adds	r3, #76	; 0x4c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3354      	adds	r3, #84	; 0x54
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3af      	bcc.n	8001084 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e044      	b.n	80011b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	3301      	adds	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3b5      	bcc.n	800112a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	687e      	ldr	r6, [r7, #4]
 80011c6:	466d      	mov	r5, sp
 80011c8:	f106 0410 	add.w	r4, r6, #16
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80011dc:	1d33      	adds	r3, r6, #4
 80011de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f002 faed 	bl	80037c0 <USB_DevInit>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00d      	b.n	8001214 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fc3c 	bl	8004a8a <USB_DevDisconnect>

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800121c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_PCD_Start+0x1c>
 8001234:	2302      	movs	r3, #2
 8001236:	e020      	b.n	800127a <HAL_PCD_Start+0x5e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	2b01      	cmp	r3, #1
 8001246:	d109      	bne.n	800125c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800124c:	2b01      	cmp	r3, #1
 800124e:	d005      	beq.n	800125c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fa3f 	bl	80036e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fbec 	bl	8004a48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001282:	b590      	push	{r4, r7, lr}
 8001284:	b08d      	sub	sp, #52	; 0x34
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fcaa 	bl	8004bf2 <USB_GetMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 848a 	bne.w	8001bba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fc0e 	bl	8004acc <USB_ReadInterrupts>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8480 	beq.w	8001bb8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fbfb 	bl	8004acc <USB_ReadInterrupts>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d107      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f002 0202 	and.w	r2, r2, #2
 80012ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fbe9 	bl	8004acc <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b10      	cmp	r3, #16
 8001302:	d161      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0210 	bic.w	r2, r2, #16
 8001312:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f003 020f 	and.w	r2, r3, #15
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	0c5b      	lsrs	r3, r3, #17
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b02      	cmp	r3, #2
 800133e:	d124      	bne.n	800138a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d035      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	6a38      	ldr	r0, [r7, #32]
 8001360:	f003 fa20 	bl	80047a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001370:	441a      	add	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001382:	441a      	add	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	e016      	b.n	80013b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	0c5b      	lsrs	r3, r3, #17
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	2b06      	cmp	r3, #6
 8001394:	d110      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800139c:	2208      	movs	r2, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	6a38      	ldr	r0, [r7, #32]
 80013a2:	f003 f9ff 	bl	80047a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	6a1a      	ldr	r2, [r3, #32]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b2:	441a      	add	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0210 	orr.w	r2, r2, #16
 80013c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fb7d 	bl	8004acc <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013dc:	f040 80a7 	bne.w	800152e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fb82 	bl	8004af2 <USB_ReadDevAllOutEpInterrupt>
 80013ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013f0:	e099      	b.n	8001526 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 808e 	beq.w	800151a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fba6 	bl	8004b5a <USB_ReadDevOutEPInterrupt>
 800140e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00c      	beq.n	8001434 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001426:	461a      	mov	r2, r3
 8001428:	2301      	movs	r3, #1
 800142a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800142c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fec2 	bl	80021b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00c      	beq.n	8001458 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2308      	movs	r3, #8
 800144e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 ff98 	bl	8002388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146e:	461a      	mov	r2, r3
 8001470:	2310      	movs	r3, #16
 8001472:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d030      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	2b80      	cmp	r3, #128	; 0x80
 8001488:	d109      	bne.n	800149e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001498:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	78db      	ldrb	r3, [r3, #3]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2200      	movs	r2, #0
 80014c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f006 f89d 	bl	8007608 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	2302      	movs	r3, #2
 80014de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f6:	461a      	mov	r2, r3
 80014f8:	2320      	movs	r3, #32
 80014fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001512:	461a      	mov	r2, r3
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f af62 	bne.w	80013f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f003 faca 	bl	8004acc <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001542:	f040 80db 	bne.w	80016fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 faeb 	bl	8004b26 <USB_ReadDevAllInEpInterrupt>
 8001550:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001556:	e0cd      	b.n	80016f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80c2 	beq.w	80016e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fb11 	bl	8004b96 <USB_ReadDevInEPInterrupt>
 8001574:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d057      	beq.n	8001630 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	2201      	movs	r2, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	69f9      	ldr	r1, [r7, #28]
 800159c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015a0:	4013      	ands	r3, r2
 80015a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b0:	461a      	mov	r2, r3
 80015b2:	2301      	movs	r3, #1
 80015b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d132      	bne.n	8001624 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	334c      	adds	r3, #76	; 0x4c
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4403      	add	r3, r0
 80015de:	3348      	adds	r3, #72	; 0x48
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4419      	add	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	334c      	adds	r3, #76	; 0x4c
 80015f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d113      	bne.n	8001624 <HAL_PCD_IRQHandler+0x3a2>
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3354      	adds	r3, #84	; 0x54
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800161c:	461a      	mov	r2, r3
 800161e:	2101      	movs	r1, #1
 8001620:	f003 fb18 	bl	8004c54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f005 ff71 	bl	8007512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001646:	461a      	mov	r2, r3
 8001648:	2308      	movs	r3, #8
 800164a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	015a      	lsls	r2, r3, #5
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001662:	461a      	mov	r2, r3
 8001664:	2310      	movs	r3, #16
 8001666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	015a      	lsls	r2, r3, #5
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167e:	461a      	mov	r2, r3
 8001680:	2340      	movs	r3, #64	; 0x40
 8001682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d023      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800168e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001690:	6a38      	ldr	r0, [r7, #32]
 8001692:	f002 f9f9 	bl	8003a88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3338      	adds	r3, #56	; 0x38
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	3304      	adds	r3, #4
 80016a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	78db      	ldrb	r3, [r3, #3]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2200      	movs	r2, #0
 80016b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f005 ffb4 	bl	800762c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	2302      	movs	r3, #2
 80016d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fcdb 	bl	800209e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f af2e 	bne.w	8001558 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 f9e3 	bl	8004acc <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800170c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001710:	d122      	bne.n	8001758 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fec2 	bl	80024c4 <HAL_PCDEx_LPM_Callback>
 8001740:	e002      	b.n	8001748 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 ff52 	bl	80075ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f9b5 	bl	8004acc <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176c:	d112      	bne.n	8001794 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f005 ff0e 	bl	80075a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001792:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f997 	bl	8004acc <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a8:	f040 80b7 	bne.w	800191a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 f95e 	bl	8003a88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	e046      	b.n	8001860 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	0151      	lsls	r1, r2, #5
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	440a      	add	r2, r1
 80017fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	461a      	mov	r2, r3
 8001814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001818:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	0151      	lsls	r1, r2, #5
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	440a      	add	r2, r1
 8001830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001838:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184a:	0151      	lsls	r1, r2, #5
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	440a      	add	r2, r1
 8001850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001858:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	3301      	adds	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	429a      	cmp	r2, r3
 8001868:	d3b3      	bcc.n	80017d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001878:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800187c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001896:	f043 030b 	orr.w	r3, r3, #11
 800189a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ac:	f043 030b 	orr.w	r3, r3, #11
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	e015      	b.n	80018e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018da:	f043 030b 	orr.w	r3, r3, #11
 80018de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001904:	461a      	mov	r2, r3
 8001906:	f003 f9a5 	bl	8004c54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f8d4 	bl	8004acc <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d124      	bne.n	800197a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f96a 	bl	8004c0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 f91f 	bl	8003b82 <USB_GetDevSpeed>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681c      	ldr	r4, [r3, #0]
 8001950:	f001 f9d8 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8001954:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4620      	mov	r0, r4
 8001960:	f001 fe1e 	bl	80035a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f005 fdfc 	bl	8007562 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f8a4 	bl	8004acc <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b08      	cmp	r3, #8
 800198c:	d10a      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f005 fdd9 	bl	8007546 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f002 0208 	and.w	r2, r2, #8
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 f88f 	bl	8004acc <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	2b80      	cmp	r3, #128	; 0x80
 80019b6:	d122      	bne.n	80019fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c4:	2301      	movs	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	e014      	b.n	80019f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fb27 	bl	800203c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3e5      	bcc.n	80019ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 f862 	bl	8004acc <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a12:	d13b      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a14:	2301      	movs	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	e02b      	b.n	8001a72 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3340      	adds	r3, #64	; 0x40
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d115      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da12      	bge.n	8001a6c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	333f      	adds	r3, #63	; 0x3f
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fae8 	bl	800203c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3301      	adds	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3ce      	bcc.n	8001a1a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 f81b 	bl	8004acc <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa0:	d155      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e045      	b.n	8001b34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d12e      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da2b      	bge.n	8001b2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ae2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d121      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6053      	str	r3, [r2, #4]
            break;
 8001b2c:	e007      	b.n	8001b3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3b4      	bcc.n	8001aa8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ffba 	bl	8004acc <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d10a      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f005 fd73 	bl	8007650 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 ffa4 	bl	8004acc <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d115      	bne.n	8001bba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f005 fd63 	bl	800766c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e000      	b.n	8001bba <HAL_PCD_IRQHandler+0x938>
      return;
 8001bb8:	bf00      	nop
    }
  }
}
 8001bba:	3734      	adds	r7, #52	; 0x34
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}

08001bc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_SetAddress+0x1a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e013      	b.n	8001c02 <HAL_PCD_SetAddress+0x42>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 ff02 	bl	80049fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	4608      	mov	r0, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	461a      	mov	r2, r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	803b      	strh	r3, [r7, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da0f      	bge.n	8001c50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3338      	adds	r3, #56	; 0x38
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	705a      	strb	r2, [r3, #1]
 8001c4e:	e00f      	b.n	8001c70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 020f 	and.w	r2, r3, #15
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	3304      	adds	r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c7c:	883a      	ldrh	r2, [r7, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	78ba      	ldrb	r2, [r7, #2]
 8001c86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c9a:	78bb      	ldrb	r3, [r7, #2]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_EP_Open+0xaa>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e00e      	b.n	8001cd2 <HAL_PCD_EP_Open+0xc8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff82 	bl	8003bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da0f      	bge.n	8001d0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 020f 	and.w	r2, r3, #15
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3338      	adds	r3, #56	; 0x38
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	705a      	strb	r2, [r3, #1]
 8001d0c:	e00f      	b.n	8001d2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_EP_Close+0x6e>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00e      	b.n	8001d66 <HAL_PCD_EP_Close+0x8c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 ffc0 	bl	8003cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6979      	ldr	r1, [r7, #20]
 8001de2:	f002 fa9f 	bl	8004324 <USB_EP0StartXfer>
 8001de6:	e008      	b.n	8001dfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	6979      	ldr	r1, [r7, #20]
 8001df6:	f002 f84d 	bl	8003e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	460b      	mov	r3, r1
 8001e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3338      	adds	r3, #56	; 0x38
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2201      	movs	r2, #1
 8001e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6979      	ldr	r1, [r7, #20]
 8001ea6:	f002 fa3d 	bl	8004324 <USB_EP0StartXfer>
 8001eaa:	e008      	b.n	8001ebe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6979      	ldr	r1, [r7, #20]
 8001eba:	f001 ffeb 	bl	8003e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 020f 	and.w	r2, r3, #15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d901      	bls.n	8001ee6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e050      	b.n	8001f88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da0f      	bge.n	8001f0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	3338      	adds	r3, #56	; 0x38
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	705a      	strb	r2, [r3, #1]
 8001f0c:	e00d      	b.n	8001f2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_SetStall+0x82>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01e      	b.n	8001f88 <HAL_PCD_EP_SetStall+0xc0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fc7b 	bl	8004854 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	b2d9      	uxtb	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f002 fe6b 	bl	8004c54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d901      	bls.n	8001fae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e042      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00f      	b.n	8001ff6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_PCD_EP_ClrStall+0x86>
 8002012:	2302      	movs	r3, #2
 8002014:	e00e      	b.n	8002034 <HAL_PCD_EP_ClrStall+0xa4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fc83 	bl	8004930 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da0c      	bge.n	800206a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3338      	adds	r3, #56	; 0x38
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e00c      	b.n	8002084 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 faa2 	bl	80045d4 <USB_EPStopXfer>
 8002090:	4603      	mov	r3, r0
 8002092:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002094:	7afb      	ldrb	r3, [r7, #11]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b08a      	sub	sp, #40	; 0x28
 80020a2:	af02      	add	r7, sp, #8
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3338      	adds	r3, #56	; 0x38
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d901      	bls.n	80020d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06c      	b.n	80021b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d902      	bls.n	80020f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3303      	adds	r3, #3
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fa:	e02b      	b.n	8002154 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d902      	bls.n	8002118 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3303      	adds	r3, #3
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002130:	b2db      	uxtb	r3, r3
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4603      	mov	r3, r0
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f002 faf6 	bl	8004728 <USB_WritePacket>

    ep->xfer_buff  += len;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	441a      	add	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	b29b      	uxth	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	429a      	cmp	r2, r3
 8002168:	d809      	bhi.n	800217e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002172:	429a      	cmp	r2, r3
 8002174:	d203      	bcs.n	800217e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1be      	bne.n	80020fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	429a      	cmp	r2, r3
 8002188:	d811      	bhi.n	80021ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2201      	movs	r2, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021aa:	4013      	ands	r3, r2
 80021ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	333c      	adds	r3, #60	; 0x3c
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d17b      	bne.n	80022e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4a61      	ldr	r2, [pc, #388]	; (8002380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f240 80b9 	bls.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80b3 	beq.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002220:	6093      	str	r3, [r2, #8]
 8002222:	e0a7      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	2320      	movs	r3, #32
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e098      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8093 	bne.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d90f      	bls.n	8002276 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e07e      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	440b      	add	r3, r1
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	1ad2      	subs	r2, r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d114      	bne.n	80022d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c0:	461a      	mov	r2, r3
 80022c2:	2101      	movs	r1, #1
 80022c4:	f002 fcc6 	bl	8004c54 <USB_EP0_OutStart>
 80022c8:	e006      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f005 f8fc 	bl	80074dc <HAL_PCD_DataOutStageCallback>
 80022e4:	e046      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d124      	bne.n	8002338 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e032      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	2320      	movs	r3, #32
 8002328:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 f8d3 	bl	80074dc <HAL_PCD_DataOutStageCallback>
 8002336:	e01d      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d114      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x1b0>
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002360:	461a      	mov	r2, r3
 8002362:	2100      	movs	r1, #0
 8002364:	f002 fc76 	bl	8004c54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f005 f8b4 	bl	80074dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	4f54300a 	.word	0x4f54300a
 8002384:	4f54310a 	.word	0x4f54310a

08002388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	333c      	adds	r3, #60	; 0x3c
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a15      	ldr	r2, [pc, #84]	; (8002410 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d90e      	bls.n	80023dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d4:	461a      	mov	r2, r3
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 f86b 	bl	80074b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <PCD_EP_OutSetupPacket_int+0x88>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d90c      	bls.n	8002404 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	f002 fc28 	bl	8004c54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	4f54300a 	.word	0x4f54300a

08002414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002432:	883b      	ldrh	r3, [r7, #0]
 8002434:	0419      	lsls	r1, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	430a      	orrs	r2, r1
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
 8002440:	e028      	b.n	8002494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e00d      	b.n	8002472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3340      	adds	r3, #64	; 0x40
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3301      	adds	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	3b01      	subs	r3, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ec      	bcc.n	8002456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800247c:	883b      	ldrh	r3, [r7, #0]
 800247e:	0418      	lsls	r0, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	3b01      	subs	r3, #1
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4302      	orrs	r2, r0
 800248c:	3340      	adds	r3, #64	; 0x40
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e264      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	4ba3      	ldr	r3, [pc, #652]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e23f      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a8a      	ldr	r2, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a87      	ldr	r2, [pc, #540]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a83      	ldr	r2, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b81      	ldr	r3, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fa2c 	bl	80009f0 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fa28 	bl	80009f0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e204      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fa18 	bl	80009f0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa14 	bl	80009f0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1f0      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c4      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4952      	ldr	r1, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe f9cd 	bl	80009f0 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe f9c9 	bl	80009f0 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a5      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4940      	ldr	r1, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe f9ac 	bl	80009f0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe f9a8 	bl	80009f0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e184      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d030      	beq.n	8002728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe f98c 	bl	80009f0 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe f988 	bl	80009f0 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e164      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e015      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe f975 	bl	80009f0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe f971 	bl	80009f0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e14d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a0 	beq.w	8002876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d121      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe f937 	bl	80009f0 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e011      	b.n	80027aa <HAL_RCC_OscConfig+0x2ce>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	42470000 	.word	0x42470000
 8002790:	42470e80 	.word	0x42470e80
 8002794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe f92a 	bl	80009f0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e106      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_OscConfig+0x4e4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027d4:	4b7b      	ldr	r3, [pc, #492]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a7a      	ldr	r2, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a77      	ldr	r2, [pc, #476]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027ee:	4b75      	ldr	r3, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a74      	ldr	r2, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a71      	ldr	r2, [pc, #452]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe f8ef 	bl	80009f0 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe f8eb 	bl	80009f0 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0c5      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x33a>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe f8d9 	bl	80009f0 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe f8d5 	bl	80009f0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0af      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 809b 	beq.w	80029b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d05c      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d141      	bne.n	8002918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe f8a9 	bl	80009f0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f8a5 	bl	80009f0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e081      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f87e 	bl	80009f0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f87a 	bl	80009f0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e056      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x41c>
 8002916:	e04e      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe f867 	bl	80009f0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe f863 	bl	80009f0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e03f      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x44a>
 8002944:	e037      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e032      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d028      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d121      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d11a      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002988:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298a:	4293      	cmp	r3, r2
 800298c:	d111      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40007000 	.word	0x40007000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470060 	.word	0x42470060

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fd ff98 	bl	80009f0 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fd ff94 	bl	80009f0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fef8 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08007ae0 	.word	0x08007ae0
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6079      	str	r1, [r7, #4]
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	60f9      	str	r1, [r7, #12]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002baa:	2100      	movs	r1, #0
 8002bac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bae:	4952      	ldr	r1, [pc, #328]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb0:	6889      	ldr	r1, [r1, #8]
 8002bb2:	f001 010c 	and.w	r1, r1, #12
 8002bb6:	2908      	cmp	r1, #8
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002bba:	2908      	cmp	r1, #8
 8002bbc:	f200 8094 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x150>
 8002bc0:	2900      	cmp	r1, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x32>
 8002bc4:	2904      	cmp	r1, #4
 8002bc6:	d003      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002bc8:	e08e      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bca:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x164>)
 8002bcc:	60bb      	str	r3, [r7, #8]
       break;
 8002bce:	e08e      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bd2:	60bb      	str	r3, [r7, #8]
      break;
 8002bd4:	e08b      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd6:	4948      	ldr	r1, [pc, #288]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bd8:	6849      	ldr	r1, [r1, #4]
 8002bda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002bde:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be0:	4945      	ldr	r1, [pc, #276]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002be2:	6849      	ldr	r1, [r1, #4]
 8002be4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002be8:	2900      	cmp	r1, #0
 8002bea:	d024      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4942      	ldr	r1, [pc, #264]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bee:	6849      	ldr	r1, [r1, #4]
 8002bf0:	0989      	lsrs	r1, r1, #6
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002bfc:	f04f 0500 	mov.w	r5, #0
 8002c00:	ea00 0204 	and.w	r2, r0, r4
 8002c04:	ea01 0305 	and.w	r3, r1, r5
 8002c08:	493d      	ldr	r1, [pc, #244]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c0a:	fb01 f003 	mul.w	r0, r1, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	fb01 f102 	mul.w	r1, r1, r2
 8002c14:	1844      	adds	r4, r0, r1
 8002c16:	493a      	ldr	r1, [pc, #232]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c18:	fba2 0101 	umull	r0, r1, r2, r1
 8002c1c:	1863      	adds	r3, r4, r1
 8002c1e:	4619      	mov	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	f7fd fad4 	bl	80001d4 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4613      	mov	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e04a      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	ea02 0400 	and.w	r4, r2, r0
 8002c4e:	ea03 0501 	and.w	r5, r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	014b      	lsls	r3, r1, #5
 8002c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c64:	0142      	lsls	r2, r0, #5
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	1b00      	subs	r0, r0, r4
 8002c6c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	018b      	lsls	r3, r1, #6
 8002c7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c7e:	0182      	lsls	r2, r0, #6
 8002c80:	1a12      	subs	r2, r2, r0
 8002c82:	eb63 0301 	sbc.w	r3, r3, r1
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	00d9      	lsls	r1, r3, #3
 8002c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c94:	00d0      	lsls	r0, r2, #3
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	1912      	adds	r2, r2, r4
 8002c9c:	eb45 0303 	adc.w	r3, r5, r3
 8002ca0:	f04f 0000 	mov.w	r0, #0
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	0299      	lsls	r1, r3, #10
 8002caa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cae:	0290      	lsls	r0, r2, #10
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f7fd fa88 	bl	80001d4 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x164>)
 8002cea:	60bb      	str	r3, [r7, #8]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	68bb      	ldr	r3, [r7, #8]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	017d7840 	.word	0x017d7840

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08007af0 	.word	0x08007af0

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffdc 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0b5b      	lsrs	r3, r3, #13
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08007af0 	.word	0x08007af0

08002d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e03f      	b.n	8002dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fd0e 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f9cb 	bl	800314c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08a      	sub	sp, #40	; 0x28
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d17c      	bne.n	8002f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_UART_Transmit+0x2c>
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e075      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_UART_Transmit+0x3e>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e06e      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5a:	f7fd fdc9 	bl	80009f0 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x82>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e98:	e02a      	b.n	8002ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f8e2 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e036      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1cf      	bne.n	8002e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f8b2 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e000      	b.n	8002f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b08a      	sub	sp, #40	; 0x28
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f040 808c 	bne.w	8003064 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_UART_Receive+0x2e>
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e084      	b.n	8003066 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Receive+0x40>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e07d      	b.n	8003066 <HAL_UART_Receive+0x13c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2222      	movs	r2, #34	; 0x22
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fd fd33 	bl	80009f0 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Receive+0x8a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002fc4:	e043      	b.n	800304e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2120      	movs	r1, #32
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f84c 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e042      	b.n	8003066 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e01f      	b.n	8003040 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d007      	beq.n	800301a <HAL_UART_Receive+0xf0>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_UART_Receive+0xfe>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e008      	b.n	800303a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003034:	b2da      	uxtb	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3301      	adds	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1b6      	bne.n	8002fc6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b090      	sub	sp, #64	; 0x40
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	e050      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d04c      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0x30>
 800308e:	f7fd fcaf 	bl	80009f0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800309a:	429a      	cmp	r2, r3
 800309c:	d241      	bcs.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030be:	637a      	str	r2, [r7, #52]	; 0x34
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e5      	bne.n	800309e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	613b      	str	r3, [r7, #16]
   return(result);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f2:	623a      	str	r2, [r7, #32]
 80030f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	69f9      	ldr	r1, [r7, #28]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e5      	bne.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00f      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	429a      	cmp	r2, r3
 800313e:	d09f      	beq.n	8003080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3740      	adds	r7, #64	; 0x40
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003150:	b09f      	sub	sp, #124	; 0x7c
 8003152:	af00      	add	r7, sp, #0
 8003154:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003162:	68d9      	ldr	r1, [r3, #12]
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	ea40 0301 	orr.w	r3, r0, r1
 800316c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800316e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	431a      	orrs	r2, r3
 8003178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	431a      	orrs	r2, r3
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003190:	f021 010c 	bic.w	r1, r1, #12
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800319a:	430b      	orrs	r3, r1
 800319c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	6999      	ldr	r1, [r3, #24]
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	ea40 0301 	orr.w	r3, r0, r1
 80031b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4bc5      	ldr	r3, [pc, #788]	; (80034d0 <UART_SetConfig+0x384>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d004      	beq.n	80031ca <UART_SetConfig+0x7e>
 80031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4bc3      	ldr	r3, [pc, #780]	; (80034d4 <UART_SetConfig+0x388>)
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d103      	bne.n	80031d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031ca:	f7ff fdbb 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80031ce:	6778      	str	r0, [r7, #116]	; 0x74
 80031d0:	e002      	b.n	80031d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7ff fda3 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80031d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	f040 80b6 	bne.w	8003350 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	461c      	mov	r4, r3
 80031e8:	f04f 0500 	mov.w	r5, #0
 80031ec:	4622      	mov	r2, r4
 80031ee:	462b      	mov	r3, r5
 80031f0:	1891      	adds	r1, r2, r2
 80031f2:	6439      	str	r1, [r7, #64]	; 0x40
 80031f4:	415b      	adcs	r3, r3
 80031f6:	647b      	str	r3, [r7, #68]	; 0x44
 80031f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031fc:	1912      	adds	r2, r2, r4
 80031fe:	eb45 0303 	adc.w	r3, r5, r3
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	00d9      	lsls	r1, r3, #3
 800320c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003210:	00d0      	lsls	r0, r2, #3
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	1911      	adds	r1, r2, r4
 8003218:	6639      	str	r1, [r7, #96]	; 0x60
 800321a:	416b      	adcs	r3, r5
 800321c:	667b      	str	r3, [r7, #100]	; 0x64
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	1891      	adds	r1, r2, r2
 800322a:	63b9      	str	r1, [r7, #56]	; 0x38
 800322c:	415b      	adcs	r3, r3
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003234:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003238:	f7fc ffcc 	bl	80001d4 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4ba5      	ldr	r3, [pc, #660]	; (80034d8 <UART_SetConfig+0x38c>)
 8003242:	fba3 2302 	umull	r2, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	011e      	lsls	r6, r3, #4
 800324a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324c:	461c      	mov	r4, r3
 800324e:	f04f 0500 	mov.w	r5, #0
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	1891      	adds	r1, r2, r2
 8003258:	6339      	str	r1, [r7, #48]	; 0x30
 800325a:	415b      	adcs	r3, r3
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
 800325e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003262:	1912      	adds	r2, r2, r4
 8003264:	eb45 0303 	adc.w	r3, r5, r3
 8003268:	f04f 0000 	mov.w	r0, #0
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	00d9      	lsls	r1, r3, #3
 8003272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003276:	00d0      	lsls	r0, r2, #3
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	1911      	adds	r1, r2, r4
 800327e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003280:	416b      	adcs	r3, r5
 8003282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	461a      	mov	r2, r3
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	1891      	adds	r1, r2, r2
 8003290:	62b9      	str	r1, [r7, #40]	; 0x28
 8003292:	415b      	adcs	r3, r3
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800329a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800329e:	f7fc ff99 	bl	80001d4 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <UART_SetConfig+0x38c>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a87      	ldr	r2, [pc, #540]	; (80034d8 <UART_SetConfig+0x38c>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032c8:	441e      	add	r6, r3
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	4618      	mov	r0, r3
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	1894      	adds	r4, r2, r2
 80032d8:	623c      	str	r4, [r7, #32]
 80032da:	415b      	adcs	r3, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032e2:	1812      	adds	r2, r2, r0
 80032e4:	eb41 0303 	adc.w	r3, r1, r3
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	f04f 0500 	mov.w	r5, #0
 80032f0:	00dd      	lsls	r5, r3, #3
 80032f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032f6:	00d4      	lsls	r4, r2, #3
 80032f8:	4622      	mov	r2, r4
 80032fa:	462b      	mov	r3, r5
 80032fc:	1814      	adds	r4, r2, r0
 80032fe:	653c      	str	r4, [r7, #80]	; 0x50
 8003300:	414b      	adcs	r3, r1
 8003302:	657b      	str	r3, [r7, #84]	; 0x54
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	461a      	mov	r2, r3
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	1891      	adds	r1, r2, r2
 8003310:	61b9      	str	r1, [r7, #24]
 8003312:	415b      	adcs	r3, r3
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800331e:	f7fc ff59 	bl	80001d4 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <UART_SetConfig+0x38c>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	; 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	3332      	adds	r3, #50	; 0x32
 800333a:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <UART_SetConfig+0x38c>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 0207 	and.w	r2, r3, #7
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4432      	add	r2, r6
 800334c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800334e:	e0b9      	b.n	80034c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003352:	461c      	mov	r4, r3
 8003354:	f04f 0500 	mov.w	r5, #0
 8003358:	4622      	mov	r2, r4
 800335a:	462b      	mov	r3, r5
 800335c:	1891      	adds	r1, r2, r2
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	415b      	adcs	r3, r3
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003368:	1912      	adds	r2, r2, r4
 800336a:	eb45 0303 	adc.w	r3, r5, r3
 800336e:	f04f 0000 	mov.w	r0, #0
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	00d9      	lsls	r1, r3, #3
 8003378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337c:	00d0      	lsls	r0, r2, #3
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	eb12 0804 	adds.w	r8, r2, r4
 8003386:	eb43 0905 	adc.w	r9, r3, r5
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	008b      	lsls	r3, r1, #2
 800339e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033a2:	0082      	lsls	r2, r0, #2
 80033a4:	4640      	mov	r0, r8
 80033a6:	4649      	mov	r1, r9
 80033a8:	f7fc ff14 	bl	80001d4 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <UART_SetConfig+0x38c>)
 80033b2:	fba3 2302 	umull	r2, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	011e      	lsls	r6, r3, #4
 80033ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033bc:	4618      	mov	r0, r3
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	1894      	adds	r4, r2, r2
 80033c8:	60bc      	str	r4, [r7, #8]
 80033ca:	415b      	adcs	r3, r3
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d2:	1812      	adds	r2, r2, r0
 80033d4:	eb41 0303 	adc.w	r3, r1, r3
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	f04f 0500 	mov.w	r5, #0
 80033e0:	00dd      	lsls	r5, r3, #3
 80033e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033e6:	00d4      	lsls	r4, r2, #3
 80033e8:	4622      	mov	r2, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	1814      	adds	r4, r2, r0
 80033ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80033f0:	414b      	adcs	r3, r1
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	008b      	lsls	r3, r1, #2
 8003408:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800340c:	0082      	lsls	r2, r0, #2
 800340e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003412:	f7fc fedf 	bl	80001d4 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <UART_SetConfig+0x38c>)
 800341c:	fba3 1302 	umull	r1, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <UART_SetConfig+0x38c>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343a:	441e      	add	r6, r3
 800343c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343e:	4618      	mov	r0, r3
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	1894      	adds	r4, r2, r2
 800344a:	603c      	str	r4, [r7, #0]
 800344c:	415b      	adcs	r3, r3
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003454:	1812      	adds	r2, r2, r0
 8003456:	eb41 0303 	adc.w	r3, r1, r3
 800345a:	f04f 0400 	mov.w	r4, #0
 800345e:	f04f 0500 	mov.w	r5, #0
 8003462:	00dd      	lsls	r5, r3, #3
 8003464:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003468:	00d4      	lsls	r4, r2, #3
 800346a:	4622      	mov	r2, r4
 800346c:	462b      	mov	r3, r5
 800346e:	eb12 0a00 	adds.w	sl, r2, r0
 8003472:	eb43 0b01 	adc.w	fp, r3, r1
 8003476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	008b      	lsls	r3, r1, #2
 800348a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800348e:	0082      	lsls	r2, r0, #2
 8003490:	4650      	mov	r0, sl
 8003492:	4659      	mov	r1, fp
 8003494:	f7fc fe9e 	bl	80001d4 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <UART_SetConfig+0x38c>)
 800349e:	fba3 1302 	umull	r1, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2164      	movs	r1, #100	; 0x64
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <UART_SetConfig+0x38c>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4432      	add	r2, r6
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	377c      	adds	r7, #124	; 0x7c
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	51eb851f 	.word	0x51eb851f

080034dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034dc:	b084      	sub	sp, #16
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	f107 001c 	add.w	r0, r7, #28
 80034ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d122      	bne.n	800353a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f001 fbee 	bl	8004d10 <USB_CoreReset>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e01a      	b.n	8003570 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 fbe2 	bl	8004d10 <USB_CoreReset>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
 8003562:	e005      	b.n	8003570 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10b      	bne.n	800358e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f043 0206 	orr.w	r2, r3, #6
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800359a:	b004      	add	sp, #16
 800359c:	4770      	bx	lr
	...

080035a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d165      	bne.n	8003680 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4a41      	ldr	r2, [pc, #260]	; (80036bc <USB_SetTurnaroundTime+0x11c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d906      	bls.n	80035ca <USB_SetTurnaroundTime+0x2a>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a40      	ldr	r2, [pc, #256]	; (80036c0 <USB_SetTurnaroundTime+0x120>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d202      	bcs.n	80035ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035c4:	230f      	movs	r3, #15
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e062      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <USB_SetTurnaroundTime+0x120>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d306      	bcc.n	80035e0 <USB_SetTurnaroundTime+0x40>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <USB_SetTurnaroundTime+0x124>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d202      	bcs.n	80035e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035da:	230e      	movs	r3, #14
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e057      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a38      	ldr	r2, [pc, #224]	; (80036c4 <USB_SetTurnaroundTime+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d306      	bcc.n	80035f6 <USB_SetTurnaroundTime+0x56>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a37      	ldr	r2, [pc, #220]	; (80036c8 <USB_SetTurnaroundTime+0x128>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d202      	bcs.n	80035f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035f0:	230d      	movs	r3, #13
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e04c      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <USB_SetTurnaroundTime+0x128>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d306      	bcc.n	800360c <USB_SetTurnaroundTime+0x6c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a32      	ldr	r2, [pc, #200]	; (80036cc <USB_SetTurnaroundTime+0x12c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d802      	bhi.n	800360c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003606:	230c      	movs	r3, #12
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e041      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <USB_SetTurnaroundTime+0x12c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d906      	bls.n	8003622 <USB_SetTurnaroundTime+0x82>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <USB_SetTurnaroundTime+0x130>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d802      	bhi.n	8003622 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800361c:	230b      	movs	r3, #11
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e036      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <USB_SetTurnaroundTime+0x130>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d906      	bls.n	8003638 <USB_SetTurnaroundTime+0x98>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <USB_SetTurnaroundTime+0x134>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003632:	230a      	movs	r3, #10
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e02b      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <USB_SetTurnaroundTime+0x134>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d906      	bls.n	800364e <USB_SetTurnaroundTime+0xae>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <USB_SetTurnaroundTime+0x138>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d202      	bcs.n	800364e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003648:	2309      	movs	r3, #9
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e020      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4a21      	ldr	r2, [pc, #132]	; (80036d8 <USB_SetTurnaroundTime+0x138>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d306      	bcc.n	8003664 <USB_SetTurnaroundTime+0xc4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <USB_SetTurnaroundTime+0x13c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d802      	bhi.n	8003664 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800365e:	2308      	movs	r3, #8
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e015      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <USB_SetTurnaroundTime+0x13c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d906      	bls.n	800367a <USB_SetTurnaroundTime+0xda>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <USB_SetTurnaroundTime+0x140>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d202      	bcs.n	800367a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003674:	2307      	movs	r3, #7
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e00a      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800367a:	2306      	movs	r3, #6
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e007      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003686:	2309      	movs	r3, #9
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e001      	b.n	8003690 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800368c:	2309      	movs	r3, #9
 800368e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	00d8acbf 	.word	0x00d8acbf
 80036c0:	00e4e1c0 	.word	0x00e4e1c0
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	01067380 	.word	0x01067380
 80036cc:	011a499f 	.word	0x011a499f
 80036d0:	01312cff 	.word	0x01312cff
 80036d4:	014ca43f 	.word	0x014ca43f
 80036d8:	016e3600 	.word	0x016e3600
 80036dc:	01a6ab1f 	.word	0x01a6ab1f
 80036e0:	01e84800 	.word	0x01e84800

080036e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d115      	bne.n	8003776 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003756:	2001      	movs	r0, #1
 8003758:	f7fd f956 	bl	8000a08 <HAL_Delay>
      ms++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 fa45 	bl	8004bf2 <USB_GetMode>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d01e      	beq.n	80037ac <USB_SetCurrentMode+0x84>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b31      	cmp	r3, #49	; 0x31
 8003772:	d9f0      	bls.n	8003756 <USB_SetCurrentMode+0x2e>
 8003774:	e01a      	b.n	80037ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d115      	bne.n	80037a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003788:	2001      	movs	r0, #1
 800378a:	f7fd f93d 	bl	8000a08 <HAL_Delay>
      ms++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 fa2c 	bl	8004bf2 <USB_GetMode>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <USB_SetCurrentMode+0x84>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b31      	cmp	r3, #49	; 0x31
 80037a4:	d9f0      	bls.n	8003788 <USB_SetCurrentMode+0x60>
 80037a6:	e001      	b.n	80037ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e005      	b.n	80037b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b32      	cmp	r3, #50	; 0x32
 80037b0:	d101      	bne.n	80037b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c0:	b084      	sub	sp, #16
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e009      	b.n	80037f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3340      	adds	r3, #64	; 0x40
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3301      	adds	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b0e      	cmp	r3, #14
 80037f8:	d9f2      	bls.n	80037e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11c      	bne.n	800383a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
 8003838:	e00b      	b.n	8003852 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003858:	461a      	mov	r2, r3
 800385a:	2300      	movs	r3, #0
 800385c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003864:	4619      	mov	r1, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386c:	461a      	mov	r2, r3
 800386e:	680b      	ldr	r3, [r1, #0]
 8003870:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10c      	bne.n	8003892 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800387e:	2100      	movs	r1, #0
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f965 	bl	8003b50 <USB_SetDevSpeed>
 8003886:	e008      	b.n	800389a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003888:	2101      	movs	r1, #1
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f960 	bl	8003b50 <USB_SetDevSpeed>
 8003890:	e003      	b.n	800389a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003892:	2103      	movs	r1, #3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f95b 	bl	8003b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800389a:	2110      	movs	r1, #16
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8f3 	bl	8003a88 <USB_FlushTxFifo>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f91f 	bl	8003af0 <USB_FlushRxFifo>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c2:	461a      	mov	r2, r3
 80038c4:	2300      	movs	r3, #0
 80038c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	461a      	mov	r2, r3
 80038dc:	2300      	movs	r3, #0
 80038de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	e043      	b.n	800396e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fc:	d118      	bne.n	8003930 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	461a      	mov	r2, r3
 8003912:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e013      	b.n	8003942 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e008      	b.n	8003942 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	2300      	movs	r3, #0
 8003940:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394e:	461a      	mov	r2, r3
 8003950:	2300      	movs	r3, #0
 8003952:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	461a      	mov	r2, r3
 8003962:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003966:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	3301      	adds	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3b7      	bcc.n	80038e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e043      	b.n	8003a04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800398e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003992:	d118      	bne.n	80039c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	461a      	mov	r2, r3
 80039a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e013      	b.n	80039d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e008      	b.n	80039d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3301      	adds	r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3b7      	bcc.n	800397c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <USB_DevInit+0x2c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f043 0208 	orr.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a80:	b004      	add	sp, #16
 8003a82:	4770      	bx	lr
 8003a84:	803c3800 	.word	0x803c3800

08003a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	; (8003aec <USB_FlushTxFifo+0x64>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e01b      	b.n	8003ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	daf2      	bge.n	8003a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <USB_FlushTxFifo+0x64>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e006      	b.n	8003ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d0f0      	beq.n	8003ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	00030d40 	.word	0x00030d40

08003af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <USB_FlushRxFifo+0x5c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e018      	b.n	8003b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	daf2      	bge.n	8003afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <USB_FlushRxFifo+0x5c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e006      	b.n	8003b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d0f0      	beq.n	8003b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	00030d40 	.word	0x00030d40

08003b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
 8003ba6:	e00a      	b.n	8003bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d002      	beq.n	8003bb4 <USB_GetDevSpeed+0x32>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d102      	bne.n	8003bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	75fb      	strb	r3, [r7, #23]
 8003bb8:	e001      	b.n	8003bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bba:	230f      	movs	r3, #15
 8003bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d13a      	bne.n	8003c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d155      	bne.n	8003ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c44:	4313      	orrs	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e036      	b.n	8003ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11a      	bne.n	8003ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d161      	bne.n	8003dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0e:	d11f      	bne.n	8003d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d70:	4013      	ands	r3, r2
 8003d72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d94:	4013      	ands	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0159      	lsls	r1, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	4619      	mov	r1, r3
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <USB_DeactivateEndpoint+0x1b0>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
 8003dba:	e060      	b.n	8003e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd2:	d11f      	bne.n	8003e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e34:	4013      	ands	r3, r2
 8003e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	43db      	mvns	r3, r3
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <USB_DeactivateEndpoint+0x1b4>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	ec337800 	.word	0xec337800
 8003e90:	eff37800 	.word	0xeff37800

08003e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 815c 	bne.w	800416e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d132      	bne.n	8003f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1c:	0cdb      	lsrs	r3, r3, #19
 8003f1e:	04db      	lsls	r3, r3, #19
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	e074      	b.n	800400e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	0cdb      	lsrs	r3, r3, #19
 8003f40:	04db      	lsls	r3, r3, #19
 8003f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6999      	ldr	r1, [r3, #24]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	440b      	add	r3, r1
 8003f80:	1e59      	subs	r1, r3, #1
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f8c:	4b9d      	ldr	r3, [pc, #628]	; (8004204 <USB_EPStartXfer+0x370>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	0148      	lsls	r0, r1, #5
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	4401      	add	r1, r0
 8003f98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	0148      	lsls	r0, r1, #5
 8003fba:	69f9      	ldr	r1, [r7, #28]
 8003fbc:	4401      	add	r1, r0
 8003fbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11f      	bne.n	800400e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800400c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d14b      	bne.n	80040ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d128      	bne.n	800408a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d110      	bne.n	800406a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e00f      	b.n	800408a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e133      	b.n	8004314 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	791b      	ldrb	r3, [r3, #4]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d015      	beq.n	8004100 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 811b 	beq.w	8004314 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	69f9      	ldr	r1, [r7, #28]
 80040f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fa:	4313      	orrs	r3, r2
 80040fc:	634b      	str	r3, [r1, #52]	; 0x34
 80040fe:	e109      	b.n	8004314 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d110      	bne.n	8004132 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e00f      	b.n	8004152 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6919      	ldr	r1, [r3, #16]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	b298      	uxth	r0, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4603      	mov	r3, r0
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fade 	bl	8004728 <USB_WritePacket>
 800416c:	e0d2      	b.n	8004314 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	440a      	add	r2, r1
 8004184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004188:	0cdb      	lsrs	r3, r3, #19
 800418a:	04db      	lsls	r3, r3, #19
 800418c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d126      	bne.n	8004208 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	0148      	lsls	r0, r1, #5
 80041d4:	69f9      	ldr	r1, [r7, #28]
 80041d6:	4401      	add	r1, r0
 80041d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041fe:	6113      	str	r3, [r2, #16]
 8004200:	e03a      	b.n	8004278 <USB_EPStartXfer+0x3e4>
 8004202:	bf00      	nop
 8004204:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4413      	add	r3, r2
 8004212:	1e5a      	subs	r2, r3, #1
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	8afa      	ldrh	r2, [r7, #22]
 8004224:	fb02 f203 	mul.w	r2, r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	8afb      	ldrh	r3, [r7, #22]
 800423c:	04d9      	lsls	r1, r3, #19
 800423e:	4b38      	ldr	r3, [pc, #224]	; (8004320 <USB_EPStartXfer+0x48c>)
 8004240:	400b      	ands	r3, r1
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	0148      	lsls	r0, r1, #5
 8004246:	69f9      	ldr	r1, [r7, #28]
 8004248:	4401      	add	r1, r0
 800424a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	69b9      	ldr	r1, [r7, #24]
 800426a:	0148      	lsls	r0, r1, #5
 800426c:	69f9      	ldr	r1, [r7, #28]
 800426e:	4401      	add	r1, r0
 8004270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10d      	bne.n	800429a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6919      	ldr	r1, [r3, #16]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	460a      	mov	r2, r1
 8004298:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d128      	bne.n	80042f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d110      	bne.n	80042d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00f      	b.n	80042f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	1ff80000 	.word	0x1ff80000

08004324 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 80ce 	bne.w	80044e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d132      	bne.n	80043b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800436c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ac:	0cdb      	lsrs	r3, r3, #19
 80043ae:	04db      	lsls	r3, r3, #19
 80043b0:	6113      	str	r3, [r2, #16]
 80043b2:	e04e      	b.n	8004452 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ce:	0cdb      	lsrs	r3, r3, #19
 80043d0:	04db      	lsls	r3, r3, #19
 80043d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800442a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004442:	6939      	ldr	r1, [r7, #16]
 8004444:	0148      	lsls	r0, r1, #5
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	4401      	add	r1, r0
 800444a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800444e:	4313      	orrs	r3, r2
 8004450:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d11e      	bne.n	8004496 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e097      	b.n	80045c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8083 	beq.w	80045c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044dc:	4313      	orrs	r3, r2
 80044de:	634b      	str	r3, [r1, #52]	; 0x34
 80044e0:	e071      	b.n	80045c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fc:	0cdb      	lsrs	r3, r3, #19
 80044fe:	04db      	lsls	r3, r3, #19
 8004500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004524:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800455c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	0148      	lsls	r0, r1, #5
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	4401      	add	r1, r0
 800457c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004580:	4313      	orrs	r3, r2
 8004582:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10d      	bne.n	80045a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6919      	ldr	r1, [r3, #16]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	460a      	mov	r2, r1
 80045a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d14a      	bne.n	8004688 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460a:	f040 8086 	bne.w	800471a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004630:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004654:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004662:	4293      	cmp	r3, r2
 8004664:	d902      	bls.n	800466c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
          break;
 800466a:	e056      	b.n	800471a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004684:	d0e7      	beq.n	8004656 <USB_EPStopXfer+0x82>
 8004686:	e048      	b.n	800471a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d13b      	bne.n	800471a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d902      	bls.n	8004700 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
          break;
 80046fe:	e00c      	b.n	800471a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004718:	d0e7      	beq.n	80046ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
}
 800471c:	4618      	mov	r0, r3
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	460b      	mov	r3, r1
 8004738:	71fb      	strb	r3, [r7, #7]
 800473a:	4613      	mov	r3, r2
 800473c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d123      	bne.n	8004796 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800474e:	88bb      	ldrh	r3, [r7, #4]
 8004750:	3303      	adds	r3, #3
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e018      	b.n	800478e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	031a      	lsls	r2, r3, #12
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	461a      	mov	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	3301      	adds	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d3e2      	bcc.n	800475c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3724      	adds	r7, #36	; 0x24
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e014      	b.n	80047fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	601a      	str	r2, [r3, #0]
    pDest++;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	3301      	adds	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3301      	adds	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	3301      	adds	r3, #1
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3e6      	bcc.n	80047d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004802:	8bfb      	ldrh	r3, [r7, #30]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01e      	beq.n	8004846 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	461a      	mov	r2, r3
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	701a      	strb	r2, [r3, #0]
      i++;
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	3301      	adds	r3, #1
 8004832:	623b      	str	r3, [r7, #32]
      pDest++;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	3301      	adds	r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800483a:	8bfb      	ldrh	r3, [r7, #30]
 800483c:	3b01      	subs	r3, #1
 800483e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004840:	8bfb      	ldrh	r3, [r7, #30]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ea      	bne.n	800481c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004848:	4618      	mov	r0, r3
 800484a:	372c      	adds	r7, #44	; 0x2c
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d12c      	bne.n	80048ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db12      	blt.n	80048a8 <USB_EPSetStall+0x54>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e02b      	b.n	8004922 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db12      	blt.n	8004902 <USB_EPSetStall+0xae>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00f      	beq.n	8004902 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004900:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004920:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d128      	bne.n	800499e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800496a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	791b      	ldrb	r3, [r3, #4]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d003      	beq.n	800497c <USB_EPClearStall+0x4c>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d138      	bne.n	80049ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e027      	b.n	80049ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d003      	beq.n	80049ce <USB_EPClearStall+0x9e>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d10f      	bne.n	80049ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a76:	f023 0302 	bic.w	r3, r3, #2
 8004a7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aa4:	f023 0303 	bic.w	r3, r3, #3
 8004aa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab8:	f043 0302 	orr.w	r3, r3, #2
 8004abc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0c1b      	lsrs	r3, r3, #16
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	b29b      	uxth	r3, r3
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b88:	68bb      	ldr	r3, [r7, #8]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	01db      	lsls	r3, r3, #7
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4013      	ands	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004be4:	68bb      	ldr	r3, [r7, #8]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	333c      	adds	r3, #60	; 0x3c
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <USB_EP0_OutStart+0xb8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d90a      	bls.n	8004c8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c88:	d101      	bne.n	8004c8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e037      	b.n	8004cfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	461a      	mov	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbc:	f043 0318 	orr.w	r3, r3, #24
 8004cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004cd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10f      	bne.n	8004cfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	4f54300a 	.word	0x4f54300a

08004d10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <USB_CoreReset+0x64>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e01b      	b.n	8004d66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	daf2      	bge.n	8004d1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <USB_CoreReset+0x64>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d0f0      	beq.n	8004d46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <checkBuffer>:
#include "arpc_generic.h"

inline uint8_t checkBuffer(uint8_t *buffer, uint32_t bufferIndex) {
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  const uint8_t receivedBytes = bufferIndex;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	73fb      	strb	r3, [r7, #15]

  if (receivedBytes < MIN_MESSAGE_BLOCK_LENGTH) {
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d801      	bhi.n	8004d90 <checkBuffer+0x18>
    return 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e010      	b.n	8004db2 <checkBuffer+0x3a>
  }

#define LAST_BYTE (buffer[receivedBytes - 1])
  if (LAST_BYTE != SYNC_BYTE) {
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b0a      	cmp	r3, #10
 8004d9c:	d001      	beq.n	8004da2 <checkBuffer+0x2a>
    return 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e007      	b.n	8004db2 <checkBuffer+0x3a>
  }

#define FRAME_LENGTH (buffer[0])
  if (FRAME_LENGTH != receivedBytes) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <checkBuffer+0x38>
    return 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <checkBuffer+0x3a>
  }

  return 1;
 8004db0:	2301      	movs	r3, #1
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <resetBuffer>:

inline void resetBuffer(uint8_t *buffer, uint32_t *bufferIndex) {
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  memset(buffer, 0, MAX_MESSAGE_BLOCK_LENGTH);
 8004dc8:	22ff      	movs	r2, #255	; 0xff
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f002 fe5b 	bl	8007a88 <memset>
  *bufferIndex = 0;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <calculateCRC>:

inline uint16_t calculateCRC(arpcDataFrame_t *frame) {
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint16_t crc = 0xFFFF;
 8004de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dec:	81fb      	strh	r3, [r7, #14]

  frame->crc = crc;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	89fa      	ldrh	r2, [r7, #14]
 8004df2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc

  return crc;
 8004df6:	89fb      	ldrh	r3, [r7, #14]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <checkCRC>:

inline uint8_t checkCRC(arpcDataFrame_t *frame) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  const uint16_t calculatedCRC = calculateCRC(frame);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ffe7 	bl	8004de0 <calculateCRC>
 8004e12:	4603      	mov	r3, r0
 8004e14:	81fb      	strh	r3, [r7, #14]
  return frame->crc == calculatedCRC;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004e1c:	89fa      	ldrh	r2, [r7, #14]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <arpcEncodeGeneric>:

inline void arpcEncodeGeneric(arpcDataFrame_t *frame, uint8_t functionId,
                              uint8_t *parameters, uint8_t parametersLength) {
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b0c5      	sub	sp, #276	; 0x114
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	f107 040c 	add.w	r4, r7, #12
 8004e3a:	6020      	str	r0, [r4, #0]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	1d39      	adds	r1, r7, #4
 8004e40:	600a      	str	r2, [r1, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f107 030b 	add.w	r3, r7, #11
 8004e48:	4602      	mov	r2, r0
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	f107 030a 	add.w	r3, r7, #10
 8004e50:	460a      	mov	r2, r1
 8004e52:	701a      	strb	r2, [r3, #0]

  if (frame == NULL) {
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <arpcEncodeGeneric+0x36>
    shutdown(FrameIsNull);
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7fb fb46 	bl	80004f0 <shutdown>
 8004e64:	e02f      	b.n	8004ec6 <arpcEncodeGeneric+0x96>
    return;
  }

  *frame = (const struct arpcDataFrame_t){0}; /* clear */
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e72:	461a      	mov	r2, r3
 8004e74:	2100      	movs	r1, #0
 8004e76:	f002 fe07 	bl	8007a88 <memset>

  frame->length = MIN_MESSAGE_BLOCK_LENGTH + parametersLength;
 8004e7a:	f107 030a 	add.w	r3, r7, #10
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	3305      	adds	r3, #5
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]

  frame->functionId = functionId;
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f107 020b 	add.w	r2, r7, #11
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	705a      	strb	r2, [r3, #1]

  /* not paramter count but parameter length in bytes */
  memcpy(frame->parameters, parameters, parametersLength);
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1c98      	adds	r0, r3, #2
 8004ea2:	f107 030a 	add.w	r3, r7, #10
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	f002 fdde 	bl	8007a6c <memcpy>

  frame->sync = SYNC_BYTE;
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe

  calculateCRC(frame);
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	f7ff ff8d 	bl	8004de0 <calculateCRC>
}
 8004ec6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd90      	pop	{r4, r7, pc}

08004ece <arpcSendFrame>:

inline void arpcSendFrame(arpcDataFrame_t *encodedFrame) {
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  if (encodedFrame == NULL) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <arpcSendFrame+0x16>
    shutdown(EncodedFrameIsNull);
 8004edc:	2001      	movs	r0, #1
 8004ede:	f7fb fb07 	bl	80004f0 <shutdown>
    return;
 8004ee2:	e032      	b.n	8004f4a <arpcSendFrame+0x7c>
  }

  sendByte(encodedFrame->length);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb13 	bl	8000514 <sendByte>
  sendByte(encodedFrame->functionId);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fb fb0e 	bl	8000514 <sendByte>

  for (uint8_t i = 0; i < encodedFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e009      	b.n	8004f12 <arpcSendFrame+0x44>
       i++) {
    sendByte(encodedFrame->parameters[i]);
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4413      	add	r3, r2
 8004f04:	789b      	ldrb	r3, [r3, #2]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fb fb04 	bl	8000514 <sendByte>
       i++) {
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < encodedFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	3b05      	subs	r3, #5
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	dbef      	blt.n	8004efe <arpcSendFrame+0x30>
  }

  sendByte(encodedFrame->crc & 0xFF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb faf4 	bl	8000514 <sendByte>
  sendByte(encodedFrame->crc >> 8);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fb faeb 	bl	8000514 <sendByte>
  sendByte(encodedFrame->sync);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fae5 	bl	8000514 <sendByte>
}
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <arpcReceiveFrame>:
static uint8_t buffer[MAX_MESSAGE_BLOCK_LENGTH] = {0};
static uint32_t bufferIndex = 0;

void arpcReceiveFrame(arpcDataFrame_t *responseFrame, uint8_t *buffer);

inline void arpcReceiveFrame(arpcDataFrame_t *responseFrame, uint8_t *buffer) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  if (responseFrame == NULL) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <arpcReceiveFrame+0x18>
    shutdown(ResponseFrameIsNull);
 8004f60:	2002      	movs	r0, #2
 8004f62:	f7fb fac5 	bl	80004f0 <shutdown>
    return;
 8004f66:	e031      	b.n	8004fcc <arpcReceiveFrame+0x7c>
  }

  responseFrame->length = buffer[0];
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	701a      	strb	r2, [r3, #0]
  responseFrame->functionId = buffer[1];
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	785a      	ldrb	r2, [r3, #1]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	705a      	strb	r2, [r3, #1]

  const uint8_t parameterByteCount =
      responseFrame->length - MIN_MESSAGE_BLOCK_LENGTH;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
  const uint8_t parameterByteCount =
 8004f7c:	3b05      	subs	r3, #5
 8004f7e:	73fb      	strb	r3, [r7, #15]

#define OFFSET_BYTE 2
  memcpy(responseFrame->parameters, buffer + OFFSET_BYTE, parameterByteCount);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	1c98      	adds	r0, r3, #2
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	3302      	adds	r3, #2
 8004f88:	7bfa      	ldrb	r2, [r7, #15]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f002 fd6e 	bl	8007a6c <memcpy>

#define COPY_ALL

/* not neccesary to copy */
#ifdef COPY_ALL
  responseFrame->crc = buffer[bufferIndex - 2] | (buffer[bufferIndex - 3] << 8);
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <arpcReceiveFrame+0x84>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3b02      	subs	r3, #2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <arpcReceiveFrame+0x84>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3b03      	subs	r3, #3
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  responseFrame->sync = buffer[bufferIndex - 1];
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <arpcReceiveFrame+0x84>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#endif
}
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000021c 	.word	0x2000021c

08004fd8 <processBuffer>:

void processBuffer() {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004fde:	af00      	add	r7, sp, #0
  if (!checkBuffer(buffer, bufferIndex))
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <processBuffer+0x94>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4822      	ldr	r0, [pc, #136]	; (8005070 <processBuffer+0x98>)
 8004fe8:	f7ff fec6 	bl	8004d78 <checkBuffer>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02f      	beq.n	8005052 <processBuffer+0x7a>
    goto reset;

  arpcDataFrame_t callFrame = {0};
 8004ff2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2100      	movs	r1, #0
 8005000:	f002 fd42 	bl	8007a88 <memset>
  arpcDataFrame_t responseFrame = {0};
 8005004:	463b      	mov	r3, r7
 8005006:	4618      	mov	r0, r3
 8005008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800500c:	461a      	mov	r2, r3
 800500e:	2100      	movs	r1, #0
 8005010:	f002 fd3a 	bl	8007a88 <memset>

  arpcReceiveFrame(&callFrame, buffer);
 8005014:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005018:	4915      	ldr	r1, [pc, #84]	; (8005070 <processBuffer+0x98>)
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ff98 	bl	8004f50 <arpcReceiveFrame>

  if (!checkCRC(&callFrame))
 8005020:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff feed 	bl	8004e04 <checkCRC>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <processBuffer+0x7e>
    goto reset;

  arpcFrameHandler[callFrame.functionId](&callFrame, &responseFrame);
 8005030:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	461a      	mov	r2, r3
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <processBuffer+0x9c>)
 800503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503e:	4639      	mov	r1, r7
 8005040:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3

  arpcSendFrame(&responseFrame);
 8005048:	463b      	mov	r3, r7
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff3f 	bl	8004ece <arpcSendFrame>
 8005050:	e002      	b.n	8005058 <processBuffer+0x80>
    goto reset;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <processBuffer+0x80>
    goto reset;
 8005056:	bf00      	nop

reset:
  resetBuffer(buffer, &bufferIndex);
 8005058:	4904      	ldr	r1, [pc, #16]	; (800506c <processBuffer+0x94>)
 800505a:	4805      	ldr	r0, [pc, #20]	; (8005070 <processBuffer+0x98>)
 800505c:	f7ff feaf 	bl	8004dbe <resetBuffer>
}
 8005060:	bf00      	nop
 8005062:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	2000021c 	.word	0x2000021c
 8005070:	2000011c 	.word	0x2000011c
 8005074:	08007af8 	.word	0x08007af8

08005078 <arpcByteReceived>:

void arpcByteReceived(uint8_t byte) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  buffer[bufferIndex] = byte;
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <arpcByteReceived+0x48>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	490f      	ldr	r1, [pc, #60]	; (80050c4 <arpcByteReceived+0x4c>)
 8005088:	79fa      	ldrb	r2, [r7, #7]
 800508a:	54ca      	strb	r2, [r1, r3]
  bufferIndex++;
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <arpcByteReceived+0x48>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <arpcByteReceived+0x48>)
 8005094:	6013      	str	r3, [r2, #0]

#define FRAME_LENGTH (buffer[0])
  if (bufferIndex >= FRAME_LENGTH)
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <arpcByteReceived+0x4c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <arpcByteReceived+0x48>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d802      	bhi.n	80050aa <arpcByteReceived+0x32>
    processBuffer();
 80050a4:	f7ff ff98 	bl	8004fd8 <processBuffer>
  else if (bufferIndex >= MAX_MESSAGE_BLOCK_LENGTH)
    shutdown(BufferOverFlow);
}
 80050a8:	e006      	b.n	80050b8 <arpcByteReceived+0x40>
  else if (bufferIndex >= MAX_MESSAGE_BLOCK_LENGTH)
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <arpcByteReceived+0x48>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2bfe      	cmp	r3, #254	; 0xfe
 80050b0:	d902      	bls.n	80050b8 <arpcByteReceived+0x40>
    shutdown(BufferOverFlow);
 80050b2:	2004      	movs	r0, #4
 80050b4:	f7fb fa1c 	bl	80004f0 <shutdown>
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	2000021c 	.word	0x2000021c
 80050c4:	2000011c 	.word	0x2000011c

080050c8 <HAL_Delay_generateResponseFrame>:
/* ========== ARPC Server Generic End ========== */
#define HAL_Delay_ID 0
extern void HAL_Delay(uint32_t Delay);

void HAL_Delay_generateResponseFrame(arpcDataFrame_t *callFrame,
                                     arpcDataFrame_t *responseFrame) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t Delay;
  memcpy(&Delay, callFrame->parameters, sizeof(uint32_t));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3302      	adds	r3, #2
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(Delay);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fc93 	bl	8000a08 <HAL_Delay>

  arpcEncodeGeneric(responseFrame, HAL_Delay_ID, NULL, 0);
 80050e2:	2300      	movs	r3, #0
 80050e4:	2200      	movs	r2, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	6838      	ldr	r0, [r7, #0]
 80050ea:	f7ff fea1 	bl	8004e30 <arpcEncodeGeneric>
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <setLED_generateResponseFrame>:

#define setLED_ID 1
extern void setLED(uint8_t value);

void setLED_generateResponseFrame(arpcDataFrame_t *callFrame,
                                  arpcDataFrame_t *responseFrame) {
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  uint8_t value;
  memcpy(&value, callFrame->parameters, sizeof(uint8_t));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3302      	adds	r3, #2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	73fb      	strb	r3, [r7, #15]
  setLED(value);
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb f9de 	bl	80004cc <setLED>

  arpcEncodeGeneric(responseFrame, setLED_ID, NULL, 0);
 8005110:	2300      	movs	r3, #0
 8005112:	2200      	movs	r2, #0
 8005114:	2101      	movs	r1, #1
 8005116:	6838      	ldr	r0, [r7, #0]
 8005118:	f7ff fe8a 	bl	8004e30 <arpcEncodeGeneric>
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005130:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005134:	f002 fc32 	bl	800799c <USBD_static_malloc>
 8005138:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	32b0      	adds	r2, #176	; 0xb0
 800514a:	2100      	movs	r1, #0
 800514c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005150:	2302      	movs	r3, #2
 8005152:	e0d4      	b.n	80052fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005154:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005158:	2100      	movs	r1, #0
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f002 fc94 	bl	8007a88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	32b0      	adds	r2, #176	; 0xb0
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	32b0      	adds	r2, #176	; 0xb0
 800517a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7c1b      	ldrb	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d138      	bne.n	80051fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800518c:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <USBD_CDC_Init+0x1e4>)
 800518e:	7819      	ldrb	r1, [r3, #0]
 8005190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005194:	2202      	movs	r2, #2
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f002 fadd 	bl	8007756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800519c:	4b5a      	ldr	r3, [pc, #360]	; (8005308 <USBD_CDC_Init+0x1e4>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	2201      	movs	r2, #1
 80051b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <USBD_CDC_Init+0x1e8>)
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051be:	2202      	movs	r2, #2
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f002 fac8 	bl	8007756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051c6:	4b51      	ldr	r3, [pc, #324]	; (800530c <USBD_CDC_Init+0x1e8>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051de:	2201      	movs	r2, #1
 80051e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051e2:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <USBD_CDC_Init+0x1ec>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3326      	adds	r3, #38	; 0x26
 80051f8:	2210      	movs	r2, #16
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e035      	b.n	800526a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051fe:	4b42      	ldr	r3, [pc, #264]	; (8005308 <USBD_CDC_Init+0x1e4>)
 8005200:	7819      	ldrb	r1, [r3, #0]
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	2202      	movs	r2, #2
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 faa5 	bl	8007756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800520c:	4b3e      	ldr	r3, [pc, #248]	; (8005308 <USBD_CDC_Init+0x1e4>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3324      	adds	r3, #36	; 0x24
 8005222:	2201      	movs	r2, #1
 8005224:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <USBD_CDC_Init+0x1e8>)
 8005228:	7819      	ldrb	r1, [r3, #0]
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	2202      	movs	r2, #2
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f002 fa91 	bl	8007756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005234:	4b35      	ldr	r3, [pc, #212]	; (800530c <USBD_CDC_Init+0x1e8>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800524c:	2201      	movs	r2, #1
 800524e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005250:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <USBD_CDC_Init+0x1ec>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	3326      	adds	r3, #38	; 0x26
 8005266:	2210      	movs	r2, #16
 8005268:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800526a:	4b29      	ldr	r3, [pc, #164]	; (8005310 <USBD_CDC_Init+0x1ec>)
 800526c:	7819      	ldrb	r1, [r3, #0]
 800526e:	2308      	movs	r3, #8
 8005270:	2203      	movs	r2, #3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f002 fa6f 	bl	8007756 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <USBD_CDC_Init+0x1ec>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	2201      	movs	r2, #1
 8005290:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	33b0      	adds	r3, #176	; 0xb0
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052c8:	2302      	movs	r3, #2
 80052ca:	e018      	b.n	80052fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7c1b      	ldrb	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <USBD_CDC_Init+0x1e8>)
 80052d6:	7819      	ldrb	r1, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f002 fb26 	bl	8007934 <USBD_LL_PrepareReceive>
 80052e8:	e008      	b.n	80052fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <USBD_CDC_Init+0x1e8>)
 80052ec:	7819      	ldrb	r1, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f002 fb1c 	bl	8007934 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000093 	.word	0x20000093
 800530c:	20000094 	.word	0x20000094
 8005310:	20000095 	.word	0x20000095

08005314 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005320:	4b3a      	ldr	r3, [pc, #232]	; (800540c <USBD_CDC_DeInit+0xf8>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f002 fa3b 	bl	80077a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800532c:	4b37      	ldr	r3, [pc, #220]	; (800540c <USBD_CDC_DeInit+0xf8>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3324      	adds	r3, #36	; 0x24
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005346:	4b32      	ldr	r3, [pc, #200]	; (8005410 <USBD_CDC_DeInit+0xfc>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f002 fa28 	bl	80077a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005352:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <USBD_CDC_DeInit+0xfc>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800536a:	2200      	movs	r2, #0
 800536c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <USBD_CDC_DeInit+0x100>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f002 fa14 	bl	80077a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800537a:	4b26      	ldr	r3, [pc, #152]	; (8005414 <USBD_CDC_DeInit+0x100>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f003 020f 	and.w	r2, r3, #15
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3324      	adds	r3, #36	; 0x24
 8005390:	2200      	movs	r2, #0
 8005392:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <USBD_CDC_DeInit+0x100>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3326      	adds	r3, #38	; 0x26
 80053aa:	2200      	movs	r2, #0
 80053ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	32b0      	adds	r2, #176	; 0xb0
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01f      	beq.n	8005400 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	33b0      	adds	r3, #176	; 0xb0
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	32b0      	adds	r2, #176	; 0xb0
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 fae8 	bl	80079b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	32b0      	adds	r2, #176	; 0xb0
 80053f2:	2100      	movs	r1, #0
 80053f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000093 	.word	0x20000093
 8005410:	20000094 	.word	0x20000094
 8005414:	20000095 	.word	0x20000095

08005418 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	32b0      	adds	r2, #176	; 0xb0
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	e0bf      	b.n	80055c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005450:	2b00      	cmp	r3, #0
 8005452:	d050      	beq.n	80054f6 <USBD_CDC_Setup+0xde>
 8005454:	2b20      	cmp	r3, #32
 8005456:	f040 80af 	bne.w	80055b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	88db      	ldrh	r3, [r3, #6]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03a      	beq.n	80054d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b25b      	sxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	da1b      	bge.n	80054a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	33b0      	adds	r3, #176	; 0xb0
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005482:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	88d2      	ldrh	r2, [r2, #6]
 8005488:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	2b07      	cmp	r3, #7
 8005490:	bf28      	it	cs
 8005492:	2307      	movcs	r3, #7
 8005494:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	89fa      	ldrh	r2, [r7, #14]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 fd43 	bl	8006f28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054a2:	e090      	b.n	80055c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	785a      	ldrb	r2, [r3, #1]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	88db      	ldrh	r3, [r3, #6]
 80054b2:	2b3f      	cmp	r3, #63	; 0x3f
 80054b4:	d803      	bhi.n	80054be <USBD_CDC_Setup+0xa6>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	88db      	ldrh	r3, [r3, #6]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	e000      	b.n	80054c0 <USBD_CDC_Setup+0xa8>
 80054be:	2240      	movs	r2, #64	; 0x40
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054c6:	6939      	ldr	r1, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054ce:	461a      	mov	r2, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fd55 	bl	8006f80 <USBD_CtlPrepareRx>
      break;
 80054d6:	e076      	b.n	80055c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	33b0      	adds	r3, #176	; 0xb0
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	7850      	ldrb	r0, [r2, #1]
 80054ee:	2200      	movs	r2, #0
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	4798      	blx	r3
      break;
 80054f4:	e067      	b.n	80055c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b0b      	cmp	r3, #11
 80054fc:	d851      	bhi.n	80055a2 <USBD_CDC_Setup+0x18a>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <USBD_CDC_Setup+0xec>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005535 	.word	0x08005535
 8005508:	080055b1 	.word	0x080055b1
 800550c:	080055a3 	.word	0x080055a3
 8005510:	080055a3 	.word	0x080055a3
 8005514:	080055a3 	.word	0x080055a3
 8005518:	080055a3 	.word	0x080055a3
 800551c:	080055a3 	.word	0x080055a3
 8005520:	080055a3 	.word	0x080055a3
 8005524:	080055a3 	.word	0x080055a3
 8005528:	080055a3 	.word	0x080055a3
 800552c:	0800555f 	.word	0x0800555f
 8005530:	08005589 	.word	0x08005589
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d107      	bne.n	8005550 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005540:	f107 030a 	add.w	r3, r7, #10
 8005544:	2202      	movs	r2, #2
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 fced 	bl	8006f28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800554e:	e032      	b.n	80055b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fc77 	bl	8006e46 <USBD_CtlError>
            ret = USBD_FAIL;
 8005558:	2303      	movs	r3, #3
 800555a:	75fb      	strb	r3, [r7, #23]
          break;
 800555c:	e02b      	b.n	80055b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b03      	cmp	r3, #3
 8005568:	d107      	bne.n	800557a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800556a:	f107 030d 	add.w	r3, r7, #13
 800556e:	2201      	movs	r2, #1
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 fcd8 	bl	8006f28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005578:	e01d      	b.n	80055b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f001 fc62 	bl	8006e46 <USBD_CtlError>
            ret = USBD_FAIL;
 8005582:	2303      	movs	r3, #3
 8005584:	75fb      	strb	r3, [r7, #23]
          break;
 8005586:	e016      	b.n	80055b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b03      	cmp	r3, #3
 8005592:	d00f      	beq.n	80055b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 fc55 	bl	8006e46 <USBD_CtlError>
            ret = USBD_FAIL;
 800559c:	2303      	movs	r3, #3
 800559e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055a0:	e008      	b.n	80055b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 fc4e 	bl	8006e46 <USBD_CtlError>
          ret = USBD_FAIL;
 80055aa:	2303      	movs	r3, #3
 80055ac:	75fb      	strb	r3, [r7, #23]
          break;
 80055ae:	e002      	b.n	80055b6 <USBD_CDC_Setup+0x19e>
          break;
 80055b0:	bf00      	nop
 80055b2:	e008      	b.n	80055c6 <USBD_CDC_Setup+0x1ae>
          break;
 80055b4:	bf00      	nop
      }
      break;
 80055b6:	e006      	b.n	80055c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fc43 	bl	8006e46 <USBD_CtlError>
      ret = USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80055e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	32b0      	adds	r2, #176	; 0xb0
 80055ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e065      	b.n	80056c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	32b0      	adds	r2, #176	; 0xb0
 8005604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005608:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 020f 	and.w	r2, r3, #15
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	3318      	adds	r3, #24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02f      	beq.n	8005684 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	f003 020f 	and.w	r2, r3, #15
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3318      	adds	r3, #24
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	f003 010f 	and.w	r1, r3, #15
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	460b      	mov	r3, r1
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4403      	add	r3, r0
 800564c:	3348      	adds	r3, #72	; 0x48
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	fbb2 f1f3 	udiv	r1, r2, r3
 8005654:	fb03 f301 	mul.w	r3, r3, r1
 8005658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800565a:	2b00      	cmp	r3, #0
 800565c:	d112      	bne.n	8005684 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 020f 	and.w	r2, r3, #15
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3318      	adds	r3, #24
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005676:	78f9      	ldrb	r1, [r7, #3]
 8005678:	2300      	movs	r3, #0
 800567a:	2200      	movs	r2, #0
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f002 f938 	bl	80078f2 <USBD_LL_Transmit>
 8005682:	e01f      	b.n	80056c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	33b0      	adds	r3, #176	; 0xb0
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	33b0      	adds	r3, #176	; 0xb0
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	32b0      	adds	r2, #176	; 0xb0
 80056e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	32b0      	adds	r2, #176	; 0xb0
 80056f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01a      	b.n	8005736 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f002 f936 	bl	8007976 <USBD_LL_GetRxDataSize>
 800570a:	4602      	mov	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	33b0      	adds	r3, #176	; 0xb0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005730:	4611      	mov	r1, r2
 8005732:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32b0      	adds	r2, #176	; 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e025      	b.n	80057ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	33b0      	adds	r3, #176	; 0xb0
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01a      	beq.n	80057aa <USBD_CDC_EP0_RxReady+0x6c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800577a:	2bff      	cmp	r3, #255	; 0xff
 800577c:	d015      	beq.n	80057aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	33b0      	adds	r3, #176	; 0xb0
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005796:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800579e:	b292      	uxth	r2, r2
 80057a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057bc:	2182      	movs	r1, #130	; 0x82
 80057be:	4818      	ldr	r0, [pc, #96]	; (8005820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057c0:	f000 fd09 	bl	80061d6 <USBD_GetEpDesc>
 80057c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057c6:	2101      	movs	r1, #1
 80057c8:	4815      	ldr	r0, [pc, #84]	; (8005820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057ca:	f000 fd04 	bl	80061d6 <USBD_GetEpDesc>
 80057ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057d0:	2181      	movs	r1, #129	; 0x81
 80057d2:	4813      	ldr	r0, [pc, #76]	; (8005820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057d4:	f000 fcff 	bl	80061d6 <USBD_GetEpDesc>
 80057d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2210      	movs	r2, #16
 80057e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d006      	beq.n	80057fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f4:	711a      	strb	r2, [r3, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d006      	beq.n	800580e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005808:	711a      	strb	r2, [r3, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2243      	movs	r2, #67	; 0x43
 8005812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000050 	.word	0x20000050

08005824 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800582c:	2182      	movs	r1, #130	; 0x82
 800582e:	4818      	ldr	r0, [pc, #96]	; (8005890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005830:	f000 fcd1 	bl	80061d6 <USBD_GetEpDesc>
 8005834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005836:	2101      	movs	r1, #1
 8005838:	4815      	ldr	r0, [pc, #84]	; (8005890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800583a:	f000 fccc 	bl	80061d6 <USBD_GetEpDesc>
 800583e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005840:	2181      	movs	r1, #129	; 0x81
 8005842:	4813      	ldr	r0, [pc, #76]	; (8005890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005844:	f000 fcc7 	bl	80061d6 <USBD_GetEpDesc>
 8005848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2210      	movs	r2, #16
 8005854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2200      	movs	r2, #0
 8005860:	711a      	strb	r2, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f042 0202 	orr.w	r2, r2, #2
 8005868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	711a      	strb	r2, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f042 0202 	orr.w	r2, r2, #2
 800587c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2243      	movs	r2, #67	; 0x43
 8005882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000050 	.word	0x20000050

08005894 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800589c:	2182      	movs	r1, #130	; 0x82
 800589e:	4818      	ldr	r0, [pc, #96]	; (8005900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058a0:	f000 fc99 	bl	80061d6 <USBD_GetEpDesc>
 80058a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058a6:	2101      	movs	r1, #1
 80058a8:	4815      	ldr	r0, [pc, #84]	; (8005900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058aa:	f000 fc94 	bl	80061d6 <USBD_GetEpDesc>
 80058ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058b0:	2181      	movs	r1, #129	; 0x81
 80058b2:	4813      	ldr	r0, [pc, #76]	; (8005900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058b4:	f000 fc8f 	bl	80061d6 <USBD_GetEpDesc>
 80058b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2210      	movs	r2, #16
 80058c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d4:	711a      	strb	r2, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e8:	711a      	strb	r2, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2243      	movs	r2, #67	; 0x43
 80058f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000050 	.word	0x20000050

08005904 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	220a      	movs	r2, #10
 8005910:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005912:	4b03      	ldr	r3, [pc, #12]	; (8005920 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	2000000c 	.word	0x2000000c

08005924 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005934:	2303      	movs	r3, #3
 8005936:	e009      	b.n	800594c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	33b0      	adds	r3, #176	; 0xb0
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	32b0      	adds	r2, #176	; 0xb0
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800597a:	2303      	movs	r3, #3
 800597c:	e008      	b.n	8005990 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	32b0      	adds	r2, #176	; 0xb0
 80059b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	e004      	b.n	80059ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	32b0      	adds	r2, #176	; 0xb0
 80059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32b0      	adds	r2, #176	; 0xb0
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e018      	b.n	8005a38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7c1b      	ldrb	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <USBD_CDC_ReceivePacket+0x68>)
 8005a10:	7819      	ldrb	r1, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 ff89 	bl	8007934 <USBD_LL_PrepareReceive>
 8005a22:	e008      	b.n	8005a36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <USBD_CDC_ReceivePacket+0x68>)
 8005a26:	7819      	ldrb	r1, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 ff7f 	bl	8007934 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000094 	.word	0x20000094

08005a44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e01f      	b.n	8005a9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	79fa      	ldrb	r2, [r7, #7]
 8005a8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f001 fdf9 	bl	8007688 <USBD_LL_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e025      	b.n	8005b08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	32ae      	adds	r2, #174	; 0xae
 8005ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	32ae      	adds	r2, #174	; 0xae
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f107 020e 	add.w	r2, r7, #14
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
 8005af0:	4602      	mov	r2, r0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fe01 	bl	8007720 <USBD_LL_Start>
 8005b1e:	4603      	mov	r3, r0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	4611      	mov	r1, r2
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	4611      	mov	r1, r2
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f908 	bl	8006dd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d01a      	beq.n	8005c1c <USBD_LL_SetupStage+0x72>
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d822      	bhi.n	8005c30 <USBD_LL_SetupStage+0x86>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <USBD_LL_SetupStage+0x4a>
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d00a      	beq.n	8005c08 <USBD_LL_SetupStage+0x5e>
 8005bf2:	e01d      	b.n	8005c30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fb5f 	bl	80062c0 <USBD_StdDevReq>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]
      break;
 8005c06:	e020      	b.n	8005c4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fbc7 	bl	80063a4 <USBD_StdItfReq>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1a:	e016      	b.n	8005c4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc29 	bl	800647c <USBD_StdEPReq>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2e:	e00c      	b.n	8005c4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fdce 	bl	80077e0 <USBD_LL_StallEP>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	bf00      	nop
  }

  return ret;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d16e      	bne.n	8005d4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	f040 8098 	bne.w	8005db0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d913      	bls.n	8005cb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	1ad2      	subs	r2, r2, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	bf28      	it	cs
 8005ca6:	4613      	movcs	r3, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f001 f984 	bl	8006fba <USBD_CtlContinueRx>
 8005cb2:	e07d      	b.n	8005db0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d014      	beq.n	8005cec <USBD_LL_DataOutStage+0x98>
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d81d      	bhi.n	8005d02 <USBD_LL_DataOutStage+0xae>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <USBD_LL_DataOutStage+0x7c>
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d003      	beq.n	8005cd6 <USBD_LL_DataOutStage+0x82>
 8005cce:	e018      	b.n	8005d02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75bb      	strb	r3, [r7, #22]
            break;
 8005cd4:	e018      	b.n	8005d08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fa5e 	bl	80061a2 <USBD_CoreFindIF>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75bb      	strb	r3, [r7, #22]
            break;
 8005cea:	e00d      	b.n	8005d08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fa60 	bl	80061bc <USBD_CoreFindEP>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75bb      	strb	r3, [r7, #22]
            break;
 8005d00:	e002      	b.n	8005d08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75bb      	strb	r3, [r7, #22]
            break;
 8005d06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d08:	7dbb      	ldrb	r3, [r7, #22]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d119      	bne.n	8005d42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d113      	bne.n	8005d42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d1a:	7dba      	ldrb	r2, [r7, #22]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	32ae      	adds	r2, #174	; 0xae
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d2a:	7dba      	ldrb	r2, [r7, #22]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d32:	7dba      	ldrb	r2, [r7, #22]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	32ae      	adds	r2, #174	; 0xae
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f001 f94a 	bl	8006fdc <USBD_CtlSendStatus>
 8005d48:	e032      	b.n	8005db0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fa31 	bl	80061bc <USBD_CoreFindEP>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d5e:	7dbb      	ldrb	r3, [r7, #22]
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d025      	beq.n	8005db0 <USBD_LL_DataOutStage+0x15c>
 8005d64:	7dbb      	ldrb	r3, [r7, #22]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d122      	bne.n	8005db0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d117      	bne.n	8005da6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d76:	7dba      	ldrb	r2, [r7, #22]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	32ae      	adds	r2, #174	; 0xae
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d86:	7dba      	ldrb	r2, [r7, #22]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d8e:	7dba      	ldrb	r2, [r7, #22]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	32ae      	adds	r2, #174	; 0xae
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	7afa      	ldrb	r2, [r7, #11]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	4798      	blx	r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	e000      	b.n	8005db2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d16f      	bne.n	8005eae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d15a      	bne.n	8005e94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d914      	bls.n	8005e14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f001 f8ac 	bl	8006f5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e06:	2300      	movs	r3, #0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f001 fd91 	bl	8007934 <USBD_LL_PrepareReceive>
 8005e12:	e03f      	b.n	8005e94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d11c      	bne.n	8005e5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d316      	bcc.n	8005e5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d20f      	bcs.n	8005e5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 f88d 	bl	8006f5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 fd6e 	bl	8007934 <USBD_LL_PrepareReceive>
 8005e58:	e01c      	b.n	8005e94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d10f      	bne.n	8005e86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e86:	2180      	movs	r1, #128	; 0x80
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f001 fca9 	bl	80077e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f001 f8b7 	bl	8007002 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03a      	beq.n	8005f14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fe42 	bl	8005b28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005eac:	e032      	b.n	8005f14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f97f 	bl	80061bc <USBD_CoreFindEP>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2bff      	cmp	r3, #255	; 0xff
 8005ec6:	d025      	beq.n	8005f14 <USBD_LL_DataInStage+0x15a>
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d122      	bne.n	8005f14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d11c      	bne.n	8005f14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005eda:	7dfa      	ldrb	r2, [r7, #23]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	32ae      	adds	r2, #174	; 0xae
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005eea:	7dfa      	ldrb	r2, [r7, #23]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ef2:	7dfa      	ldrb	r2, [r7, #23]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	32ae      	adds	r2, #174	; 0xae
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	7afa      	ldrb	r2, [r7, #11]
 8005f00:	4611      	mov	r1, r2
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f0a:	7dbb      	ldrb	r3, [r7, #22]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
 8005f12:	e000      	b.n	8005f16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d014      	beq.n	8005f84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6852      	ldr	r2, [r2, #4]
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	4611      	mov	r1, r2
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f80:	2303      	movs	r3, #3
 8005f82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fbe3 	bl	8007756 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2240      	movs	r2, #64	; 0x40
 8005f9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fbd5 	bl	8007756 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	621a      	str	r2, [r3, #32]

  return ret;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b04      	cmp	r3, #4
 8006020:	d106      	bne.n	8006030 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006028:	b2da      	uxtb	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b03      	cmp	r3, #3
 8006050:	d110      	bne.n	8006074 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	e01c      	b.n	80060da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d115      	bne.n	80060d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	; 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32ae      	adds	r2, #174	; 0xae
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	4611      	mov	r1, r2
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	32ae      	adds	r2, #174	; 0xae
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	e01c      	b.n	800613e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d115      	bne.n	800613c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32ae      	adds	r2, #174	; 0xae
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	32ae      	adds	r2, #174	; 0xae
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6852      	ldr	r2, [r2, #4]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	4611      	mov	r1, r2
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	885b      	ldrh	r3, [r3, #2]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d920      	bls.n	8006240 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006206:	e013      	b.n	8006230 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006208:	f107 030a 	add.w	r3, r7, #10
 800620c:	4619      	mov	r1, r3
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f000 f81b 	bl	800624a <USBD_GetNextDesc>
 8006214:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b05      	cmp	r3, #5
 800621c:	d108      	bne.n	8006230 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	789b      	ldrb	r3, [r3, #2]
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	429a      	cmp	r2, r3
 800622a:	d008      	beq.n	800623e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	b29a      	uxth	r2, r3
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	429a      	cmp	r2, r3
 800623a:	d8e5      	bhi.n	8006208 <USBD_GetEpDesc+0x32>
 800623c:	e000      	b.n	8006240 <USBD_GetEpDesc+0x6a>
          break;
 800623e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006240:	693b      	ldr	r3, [r7, #16]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	4413      	add	r3, r2
 8006264:	b29a      	uxth	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006276:	68fb      	ldr	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	3301      	adds	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062a2:	8a3b      	ldrh	r3, [r7, #16]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	b21a      	sxth	r2, r3
 80062a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062b2:	89fb      	ldrh	r3, [r7, #14]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d005      	beq.n	80062e6 <USBD_StdDevReq+0x26>
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d857      	bhi.n	800638e <USBD_StdDevReq+0xce>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00f      	beq.n	8006302 <USBD_StdDevReq+0x42>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d153      	bne.n	800638e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	32ae      	adds	r2, #174	; 0xae
 80062f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e04a      	b.n	8006398 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	2b09      	cmp	r3, #9
 8006308:	d83b      	bhi.n	8006382 <USBD_StdDevReq+0xc2>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <USBD_StdDevReq+0x50>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006365 	.word	0x08006365
 8006314:	08006379 	.word	0x08006379
 8006318:	08006383 	.word	0x08006383
 800631c:	0800636f 	.word	0x0800636f
 8006320:	08006383 	.word	0x08006383
 8006324:	08006343 	.word	0x08006343
 8006328:	08006339 	.word	0x08006339
 800632c:	08006383 	.word	0x08006383
 8006330:	0800635b 	.word	0x0800635b
 8006334:	0800634d 	.word	0x0800634d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa3c 	bl	80067b8 <USBD_GetDescriptor>
          break;
 8006340:	e024      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fba1 	bl	8006a8c <USBD_SetAddress>
          break;
 800634a:	e01f      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fbe0 	bl	8006b14 <USBD_SetConfig>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
          break;
 8006358:	e018      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fc83 	bl	8006c68 <USBD_GetConfig>
          break;
 8006362:	e013      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fcb4 	bl	8006cd4 <USBD_GetStatus>
          break;
 800636c:	e00e      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fce3 	bl	8006d3c <USBD_SetFeature>
          break;
 8006376:	e009      	b.n	800638c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fd07 	bl	8006d8e <USBD_ClrFeature>
          break;
 8006380:	e004      	b.n	800638c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd5e 	bl	8006e46 <USBD_CtlError>
          break;
 800638a:	bf00      	nop
      }
      break;
 800638c:	e004      	b.n	8006398 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fd58 	bl	8006e46 <USBD_CtlError>
      break;
 8006396:	bf00      	nop
  }

  return ret;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d005      	beq.n	80063ca <USBD_StdItfReq+0x26>
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d852      	bhi.n	8006468 <USBD_StdItfReq+0xc4>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <USBD_StdItfReq+0x26>
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d14e      	bne.n	8006468 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d840      	bhi.n	800645a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	889b      	ldrh	r3, [r3, #4]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d836      	bhi.n	8006450 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	889b      	ldrh	r3, [r3, #4]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fed9 	bl	80061a2 <USBD_CoreFindIF>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d01d      	beq.n	8006436 <USBD_StdItfReq+0x92>
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11a      	bne.n	8006436 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006400:	7bba      	ldrb	r2, [r7, #14]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006410:	7bba      	ldrb	r2, [r7, #14]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006418:	7bba      	ldrb	r2, [r7, #14]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	32ae      	adds	r2, #174	; 0xae
 800641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	4798      	blx	r3
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800642e:	e004      	b.n	800643a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006434:	e001      	b.n	800643a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	88db      	ldrh	r3, [r3, #6]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d110      	bne.n	8006464 <USBD_StdItfReq+0xc0>
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fdc7 	bl	8006fdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800644e:	e009      	b.n	8006464 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fcf7 	bl	8006e46 <USBD_CtlError>
          break;
 8006458:	e004      	b.n	8006464 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fcf2 	bl	8006e46 <USBD_CtlError>
          break;
 8006462:	e000      	b.n	8006466 <USBD_StdItfReq+0xc2>
          break;
 8006464:	bf00      	nop
      }
      break;
 8006466:	e004      	b.n	8006472 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fceb 	bl	8006e46 <USBD_CtlError>
      break;
 8006470:	bf00      	nop
  }

  return ret;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	889b      	ldrh	r3, [r3, #4]
 800648e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d007      	beq.n	80064ac <USBD_StdEPReq+0x30>
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	f200 817f 	bhi.w	80067a0 <USBD_StdEPReq+0x324>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02a      	beq.n	80064fc <USBD_StdEPReq+0x80>
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	f040 817a 	bne.w	80067a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fe83 	bl	80061bc <USBD_CoreFindEP>
 80064b6:	4603      	mov	r3, r0
 80064b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ba:	7b7b      	ldrb	r3, [r7, #13]
 80064bc:	2bff      	cmp	r3, #255	; 0xff
 80064be:	f000 8174 	beq.w	80067aa <USBD_StdEPReq+0x32e>
 80064c2:	7b7b      	ldrb	r3, [r7, #13]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 8170 	bne.w	80067aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80064ca:	7b7a      	ldrb	r2, [r7, #13]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064d2:	7b7a      	ldrb	r2, [r7, #13]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	32ae      	adds	r2, #174	; 0xae
 80064d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8163 	beq.w	80067aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064e4:	7b7a      	ldrb	r2, [r7, #13]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	32ae      	adds	r2, #174	; 0xae
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064fa:	e156      	b.n	80067aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d008      	beq.n	8006516 <USBD_StdEPReq+0x9a>
 8006504:	2b03      	cmp	r3, #3
 8006506:	f300 8145 	bgt.w	8006794 <USBD_StdEPReq+0x318>
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 809b 	beq.w	8006646 <USBD_StdEPReq+0x1ca>
 8006510:	2b01      	cmp	r3, #1
 8006512:	d03c      	beq.n	800658e <USBD_StdEPReq+0x112>
 8006514:	e13e      	b.n	8006794 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d002      	beq.n	8006528 <USBD_StdEPReq+0xac>
 8006522:	2b03      	cmp	r3, #3
 8006524:	d016      	beq.n	8006554 <USBD_StdEPReq+0xd8>
 8006526:	e02c      	b.n	8006582 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <USBD_StdEPReq+0xce>
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d00a      	beq.n	800654a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f951 	bl	80077e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f94d 	bl	80077e0 <USBD_LL_StallEP>
 8006546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006548:	e020      	b.n	800658c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc7a 	bl	8006e46 <USBD_CtlError>
              break;
 8006552:	e01b      	b.n	800658c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	885b      	ldrh	r3, [r3, #2]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10e      	bne.n	800657a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <USBD_StdEPReq+0xfe>
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d008      	beq.n	800657a <USBD_StdEPReq+0xfe>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	88db      	ldrh	r3, [r3, #6]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f933 	bl	80077e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fd2e 	bl	8006fdc <USBD_CtlSendStatus>

              break;
 8006580:	e004      	b.n	800658c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fc5e 	bl	8006e46 <USBD_CtlError>
              break;
 800658a:	bf00      	nop
          }
          break;
 800658c:	e107      	b.n	800679e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d002      	beq.n	80065a0 <USBD_StdEPReq+0x124>
 800659a:	2b03      	cmp	r3, #3
 800659c:	d016      	beq.n	80065cc <USBD_StdEPReq+0x150>
 800659e:	e04b      	b.n	8006638 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <USBD_StdEPReq+0x146>
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d00a      	beq.n	80065c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f915 	bl	80077e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f911 	bl	80077e0 <USBD_LL_StallEP>
 80065be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065c0:	e040      	b.n	8006644 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fc3e 	bl	8006e46 <USBD_CtlError>
              break;
 80065ca:	e03b      	b.n	8006644 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	885b      	ldrh	r3, [r3, #2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d136      	bne.n	8006642 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 f91b 	bl	800781e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fcf7 	bl	8006fdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fde2 	bl	80061bc <USBD_CoreFindEP>
 80065f8:	4603      	mov	r3, r0
 80065fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065fc:	7b7b      	ldrb	r3, [r7, #13]
 80065fe:	2bff      	cmp	r3, #255	; 0xff
 8006600:	d01f      	beq.n	8006642 <USBD_StdEPReq+0x1c6>
 8006602:	7b7b      	ldrb	r3, [r7, #13]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11c      	bne.n	8006642 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006608:	7b7a      	ldrb	r2, [r7, #13]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006610:	7b7a      	ldrb	r2, [r7, #13]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32ae      	adds	r2, #174	; 0xae
 8006616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d010      	beq.n	8006642 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006620:	7b7a      	ldrb	r2, [r7, #13]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32ae      	adds	r2, #174	; 0xae
 8006626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006636:	e004      	b.n	8006642 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fc03 	bl	8006e46 <USBD_CtlError>
              break;
 8006640:	e000      	b.n	8006644 <USBD_StdEPReq+0x1c8>
              break;
 8006642:	bf00      	nop
          }
          break;
 8006644:	e0ab      	b.n	800679e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <USBD_StdEPReq+0x1dc>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d032      	beq.n	80066bc <USBD_StdEPReq+0x240>
 8006656:	e097      	b.n	8006788 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <USBD_StdEPReq+0x1f2>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d004      	beq.n	800666e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fbed 	bl	8006e46 <USBD_CtlError>
                break;
 800666c:	e091      	b.n	8006792 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800666e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da0b      	bge.n	800668e <USBD_StdEPReq+0x212>
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	3310      	adds	r3, #16
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	3304      	adds	r3, #4
 800668c:	e00b      	b.n	80066a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3304      	adds	r3, #4
 80066a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2202      	movs	r2, #2
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc37 	bl	8006f28 <USBD_CtlSendData>
              break;
 80066ba:	e06a      	b.n	8006792 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da11      	bge.n	80066e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d117      	bne.n	800670e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fbb0 	bl	8006e46 <USBD_CtlError>
                  break;
 80066e6:	e054      	b.n	8006792 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	f003 020f 	and.w	r2, r3, #15
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fb9d 	bl	8006e46 <USBD_CtlError>
                  break;
 800670c:	e041      	b.n	8006792 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da0b      	bge.n	800672e <USBD_StdEPReq+0x2b2>
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	3310      	adds	r3, #16
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	3304      	adds	r3, #4
 800672c:	e00b      	b.n	8006746 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	3304      	adds	r3, #4
 8006746:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <USBD_StdEPReq+0x2d8>
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d103      	bne.n	800675c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	e00e      	b.n	800677a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 f87b 	bl	800785c <USBD_LL_IsStallEP>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e002      	b.n	800677a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2202      	movs	r2, #2
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fbd1 	bl	8006f28 <USBD_CtlSendData>
              break;
 8006786:	e004      	b.n	8006792 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fb5b 	bl	8006e46 <USBD_CtlError>
              break;
 8006790:	bf00      	nop
          }
          break;
 8006792:	e004      	b.n	800679e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fb55 	bl	8006e46 <USBD_CtlError>
          break;
 800679c:	bf00      	nop
      }
      break;
 800679e:	e005      	b.n	80067ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb4f 	bl	8006e46 <USBD_CtlError>
      break;
 80067a8:	e000      	b.n	80067ac <USBD_StdEPReq+0x330>
      break;
 80067aa:	bf00      	nop
  }

  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	885b      	ldrh	r3, [r3, #2]
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	2b06      	cmp	r3, #6
 80067da:	f200 8128 	bhi.w	8006a2e <USBD_GetDescriptor+0x276>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <USBD_GetDescriptor+0x2c>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006801 	.word	0x08006801
 80067e8:	08006819 	.word	0x08006819
 80067ec:	08006859 	.word	0x08006859
 80067f0:	08006a2f 	.word	0x08006a2f
 80067f4:	08006a2f 	.word	0x08006a2f
 80067f8:	080069cf 	.word	0x080069cf
 80067fc:	080069fb 	.word	0x080069fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	7c12      	ldrb	r2, [r2, #16]
 800680c:	f107 0108 	add.w	r1, r7, #8
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	60f8      	str	r0, [r7, #12]
      break;
 8006816:	e112      	b.n	8006a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7c1b      	ldrb	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	f107 0208 	add.w	r2, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800683a:	e100      	b.n	8006a3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	f107 0208 	add.w	r2, r7, #8
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
 800684c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	2202      	movs	r2, #2
 8006854:	701a      	strb	r2, [r3, #0]
      break;
 8006856:	e0f2      	b.n	8006a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	885b      	ldrh	r3, [r3, #2]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b05      	cmp	r3, #5
 8006860:	f200 80ac 	bhi.w	80069bc <USBD_GetDescriptor+0x204>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <USBD_GetDescriptor+0xb4>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006885 	.word	0x08006885
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068ed 	.word	0x080068ed
 8006878:	08006921 	.word	0x08006921
 800687c:	08006955 	.word	0x08006955
 8006880:	08006989 	.word	0x08006989
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a6:	e091      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 facb 	bl	8006e46 <USBD_CtlError>
            err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
          break;
 80068b6:	e089      	b.n	80069cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	7c12      	ldrb	r2, [r2, #16]
 80068d0:	f107 0108 	add.w	r1, r7, #8
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
 80068d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068da:	e077      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fab1 	bl	8006e46 <USBD_CtlError>
            err++;
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	3301      	adds	r3, #1
 80068e8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ea:	e06f      	b.n	80069cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7c12      	ldrb	r2, [r2, #16]
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690e:	e05d      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa97 	bl	8006e46 <USBD_CtlError>
            err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
          break;
 800691e:	e055      	b.n	80069cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006942:	e043      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa7d 	bl	8006e46 <USBD_CtlError>
            err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
          break;
 8006952:	e03b      	b.n	80069cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006976:	e029      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa63 	bl	8006e46 <USBD_CtlError>
            err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
          break;
 8006986:	e021      	b.n	80069cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7c12      	ldrb	r2, [r2, #16]
 80069a0:	f107 0108 	add.w	r1, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069aa:	e00f      	b.n	80069cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa49 	bl	8006e46 <USBD_CtlError>
            err++;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	3301      	adds	r3, #1
 80069b8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ba:	e007      	b.n	80069cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa41 	bl	8006e46 <USBD_CtlError>
          err++;
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	3301      	adds	r3, #1
 80069c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069ca:	bf00      	nop
      }
      break;
 80069cc:	e037      	b.n	8006a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7c1b      	ldrb	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	f107 0208 	add.w	r2, r7, #8
 80069e2:	4610      	mov	r0, r2
 80069e4:	4798      	blx	r3
 80069e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069e8:	e029      	b.n	8006a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fa2a 	bl	8006e46 <USBD_CtlError>
        err++;
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	3301      	adds	r3, #1
 80069f6:	72fb      	strb	r3, [r7, #11]
      break;
 80069f8:	e021      	b.n	8006a3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7c1b      	ldrb	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	f107 0208 	add.w	r2, r7, #8
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4798      	blx	r3
 8006a12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	2207      	movs	r2, #7
 8006a1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a1c:	e00f      	b.n	8006a3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa10 	bl	8006e46 <USBD_CtlError>
        err++;
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a2c:	e007      	b.n	8006a3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa08 	bl	8006e46 <USBD_CtlError>
      err++;
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a3c:	bf00      	nop
  }

  if (err != 0U)
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11e      	bne.n	8006a82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	88db      	ldrh	r3, [r3, #6]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d016      	beq.n	8006a7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a4c:	893b      	ldrh	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	88da      	ldrh	r2, [r3, #6]
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	bf28      	it	cs
 8006a5c:	4613      	movcs	r3, r2
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a62:	893b      	ldrh	r3, [r7, #8]
 8006a64:	461a      	mov	r2, r3
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa5d 	bl	8006f28 <USBD_CtlSendData>
 8006a6e:	e009      	b.n	8006a84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9e7 	bl	8006e46 <USBD_CtlError>
 8006a78:	e004      	b.n	8006a84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 faae 	bl	8006fdc <USBD_CtlSendStatus>
 8006a80:	e000      	b.n	8006a84 <USBD_GetDescriptor+0x2cc>
    return;
 8006a82:	bf00      	nop
  }
}
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	889b      	ldrh	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d131      	bne.n	8006b02 <USBD_SetAddress+0x76>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	88db      	ldrh	r3, [r3, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d12d      	bne.n	8006b02 <USBD_SetAddress+0x76>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8006aac:	d829      	bhi.n	8006b02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	885b      	ldrh	r3, [r3, #2]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d104      	bne.n	8006ad0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9bc 	bl	8006e46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ace:	e01d      	b.n	8006b0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	7bfa      	ldrb	r2, [r7, #15]
 8006ad4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fee9 	bl	80078b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa7a 	bl	8006fdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	e009      	b.n	8006b0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b00:	e004      	b.n	8006b0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f99e 	bl	8006e46 <USBD_CtlError>
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	4b4e      	ldr	r3, [pc, #312]	; (8006c64 <USBD_SetConfig+0x150>)
 8006b2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b2c:	4b4d      	ldr	r3, [pc, #308]	; (8006c64 <USBD_SetConfig+0x150>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d905      	bls.n	8006b40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f985 	bl	8006e46 <USBD_CtlError>
    return USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e08c      	b.n	8006c5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d002      	beq.n	8006b52 <USBD_SetConfig+0x3e>
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d029      	beq.n	8006ba4 <USBD_SetConfig+0x90>
 8006b50:	e075      	b.n	8006c3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b52:	4b44      	ldr	r3, [pc, #272]	; (8006c64 <USBD_SetConfig+0x150>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d020      	beq.n	8006b9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b5a:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <USBD_SetConfig+0x150>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b64:	4b3f      	ldr	r3, [pc, #252]	; (8006c64 <USBD_SetConfig+0x150>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe ffe7 	bl	8005b3e <USBD_SetClassConfig>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f962 	bl	8006e46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b8a:	e065      	b.n	8006c58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa25 	bl	8006fdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2203      	movs	r2, #3
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b9a:	e05d      	b.n	8006c58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fa1d 	bl	8006fdc <USBD_CtlSendStatus>
      break;
 8006ba2:	e059      	b.n	8006c58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ba4:	4b2f      	ldr	r3, [pc, #188]	; (8006c64 <USBD_SetConfig+0x150>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d112      	bne.n	8006bd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <USBD_SetConfig+0x150>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <USBD_SetConfig+0x150>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fe ffd6 	bl	8005b76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa06 	bl	8006fdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bd0:	e042      	b.n	8006c58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <USBD_SetConfig+0x150>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d02a      	beq.n	8006c36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fe ffc4 	bl	8005b76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006bee:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <USBD_SetConfig+0x150>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <USBD_SetConfig+0x150>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fe ff9d 	bl	8005b3e <USBD_SetClassConfig>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f918 	bl	8006e46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fe ffa9 	bl	8005b76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c2c:	e014      	b.n	8006c58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f9d4 	bl	8006fdc <USBD_CtlSendStatus>
      break;
 8006c34:	e010      	b.n	8006c58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9d0 	bl	8006fdc <USBD_CtlSendStatus>
      break;
 8006c3c:	e00c      	b.n	8006c58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f900 	bl	8006e46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <USBD_SetConfig+0x150>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7fe ff92 	bl	8005b76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	73fb      	strb	r3, [r7, #15]
      break;
 8006c56:	bf00      	nop
  }

  return ret;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000220 	.word	0x20000220

08006c68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	88db      	ldrh	r3, [r3, #6]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d004      	beq.n	8006c84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f8e2 	bl	8006e46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c82:	e023      	b.n	8006ccc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	dc02      	bgt.n	8006c96 <USBD_GetConfig+0x2e>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc03      	bgt.n	8006c9c <USBD_GetConfig+0x34>
 8006c94:	e015      	b.n	8006cc2 <USBD_GetConfig+0x5a>
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d00b      	beq.n	8006cb2 <USBD_GetConfig+0x4a>
 8006c9a:	e012      	b.n	8006cc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f93c 	bl	8006f28 <USBD_CtlSendData>
        break;
 8006cb0:	e00c      	b.n	8006ccc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f934 	bl	8006f28 <USBD_CtlSendData>
        break;
 8006cc0:	e004      	b.n	8006ccc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f8be 	bl	8006e46 <USBD_CtlError>
        break;
 8006cca:	bf00      	nop
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d81e      	bhi.n	8006d2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d004      	beq.n	8006cfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8a5 	bl	8006e46 <USBD_CtlError>
        break;
 8006cfc:	e01a      	b.n	8006d34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f043 0202 	orr.w	r2, r3, #2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	2202      	movs	r2, #2
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f900 	bl	8006f28 <USBD_CtlSendData>
      break;
 8006d28:	e004      	b.n	8006d34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f88a 	bl	8006e46 <USBD_CtlError>
      break;
 8006d32:	bf00      	nop
  }
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f940 	bl	8006fdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d5c:	e013      	b.n	8006d86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d10b      	bne.n	8006d7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	889b      	ldrh	r3, [r3, #4]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f930 	bl	8006fdc <USBD_CtlSendStatus>
}
 8006d7c:	e003      	b.n	8006d86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f860 	bl	8006e46 <USBD_CtlError>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d80b      	bhi.n	8006dbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10c      	bne.n	8006dc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f910 	bl	8006fdc <USBD_CtlSendStatus>
      }
      break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f840 	bl	8006e46 <USBD_CtlError>
      break;
 8006dc6:	e000      	b.n	8006dca <USBD_ClrFeature+0x3c>
      break;
 8006dc8:	bf00      	nop
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fa41 	bl	8006284 <SWAPBYTE>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fa34 	bl	8006284 <SWAPBYTE>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fa27 	bl	8006284 <SWAPBYTE>
 8006e36:	4603      	mov	r3, r0
 8006e38:	461a      	mov	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	80da      	strh	r2, [r3, #6]
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fcc4 	bl	80077e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e58:	2100      	movs	r1, #0
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fcc0 	bl	80077e0 <USBD_LL_StallEP>
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d036      	beq.n	8006eec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f000 f836 	bl	8006ef4 <USBD_GetLen>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4413      	add	r3, r2
 8006eae:	2203      	movs	r2, #3
 8006eb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006eb8:	e013      	b.n	8006ee2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
    idx++;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
    idx++;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e7      	bne.n	8006eba <USBD_GetString+0x52>
 8006eea:	e000      	b.n	8006eee <USBD_GetString+0x86>
    return;
 8006eec:	bf00      	nop
  }
}
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f04:	e005      	b.n	8006f12 <USBD_GetLen+0x1e>
  {
    len++;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f5      	bne.n	8006f06 <USBD_GetLen+0x12>
  }

  return len;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fccf 	bl	80078f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fcbe 	bl	80078f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fcc2 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fcb1 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fec:	2300      	movs	r3, #0
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fc7d 	bl	80078f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2205      	movs	r2, #5
 800700e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007012:	2300      	movs	r3, #0
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fc8b 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800702c:	2200      	movs	r2, #0
 800702e:	4912      	ldr	r1, [pc, #72]	; (8007078 <MX_USB_DEVICE_Init+0x50>)
 8007030:	4812      	ldr	r0, [pc, #72]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007032:	f7fe fd07 	bl	8005a44 <USBD_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800703c:	f7f9 fb8c 	bl	8000758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007040:	490f      	ldr	r1, [pc, #60]	; (8007080 <MX_USB_DEVICE_Init+0x58>)
 8007042:	480e      	ldr	r0, [pc, #56]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007044:	f7fe fd2e 	bl	8005aa4 <USBD_RegisterClass>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800704e:	f7f9 fb83 	bl	8000758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007052:	490c      	ldr	r1, [pc, #48]	; (8007084 <MX_USB_DEVICE_Init+0x5c>)
 8007054:	4809      	ldr	r0, [pc, #36]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007056:	f7fe fc65 	bl	8005924 <USBD_CDC_RegisterInterface>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007060:	f7f9 fb7a 	bl	8000758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007066:	f7fe fd53 	bl	8005b10 <USBD_Start>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007070:	f7f9 fb72 	bl	8000758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200000ac 	.word	0x200000ac
 800707c:	2000048c 	.word	0x2000048c
 8007080:	20000018 	.word	0x20000018
 8007084:	20000098 	.word	0x20000098

08007088 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800708c:	2200      	movs	r2, #0
 800708e:	4905      	ldr	r1, [pc, #20]	; (80070a4 <CDC_Init_FS+0x1c>)
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <CDC_Init_FS+0x20>)
 8007092:	f7fe fc61 	bl	8005958 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007096:	4905      	ldr	r1, [pc, #20]	; (80070ac <CDC_Init_FS+0x24>)
 8007098:	4803      	ldr	r0, [pc, #12]	; (80070a8 <CDC_Init_FS+0x20>)
 800709a:	f7fe fc7f 	bl	800599c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800709e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000b68 	.word	0x20000b68
 80070a8:	2000048c 	.word	0x2000048c
 80070ac:	20000768 	.word	0x20000768

080070b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b23      	cmp	r3, #35	; 0x23
 80070d4:	d84a      	bhi.n	800716c <CDC_Control_FS+0xac>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <CDC_Control_FS+0x1c>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	0800716d 	.word	0x0800716d
 80070e0:	0800716d 	.word	0x0800716d
 80070e4:	0800716d 	.word	0x0800716d
 80070e8:	0800716d 	.word	0x0800716d
 80070ec:	0800716d 	.word	0x0800716d
 80070f0:	0800716d 	.word	0x0800716d
 80070f4:	0800716d 	.word	0x0800716d
 80070f8:	0800716d 	.word	0x0800716d
 80070fc:	0800716d 	.word	0x0800716d
 8007100:	0800716d 	.word	0x0800716d
 8007104:	0800716d 	.word	0x0800716d
 8007108:	0800716d 	.word	0x0800716d
 800710c:	0800716d 	.word	0x0800716d
 8007110:	0800716d 	.word	0x0800716d
 8007114:	0800716d 	.word	0x0800716d
 8007118:	0800716d 	.word	0x0800716d
 800711c:	0800716d 	.word	0x0800716d
 8007120:	0800716d 	.word	0x0800716d
 8007124:	0800716d 	.word	0x0800716d
 8007128:	0800716d 	.word	0x0800716d
 800712c:	0800716d 	.word	0x0800716d
 8007130:	0800716d 	.word	0x0800716d
 8007134:	0800716d 	.word	0x0800716d
 8007138:	0800716d 	.word	0x0800716d
 800713c:	0800716d 	.word	0x0800716d
 8007140:	0800716d 	.word	0x0800716d
 8007144:	0800716d 	.word	0x0800716d
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800716d 	.word	0x0800716d
 8007150:	0800716d 	.word	0x0800716d
 8007154:	0800716d 	.word	0x0800716d
 8007158:	0800716d 	.word	0x0800716d
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800716d 	.word	0x0800716d
 8007164:	0800716d 	.word	0x0800716d
 8007168:	0800716d 	.word	0x0800716d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800716c:	bf00      	nop
  }

  return (USBD_OK);
 800716e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	480f      	ldr	r0, [pc, #60]	; (80071c8 <CDC_Receive_FS+0x4c>)
 800718a:	f7fe fc07 	bl	800599c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800718e:	480e      	ldr	r0, [pc, #56]	; (80071c8 <CDC_Receive_FS+0x4c>)
 8007190:	f7fe fc22 	bl	80059d8 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++){
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e00b      	b.n	80071b2 <CDC_Receive_FS+0x36>
  	  		uint8_t byte = Buf[i];
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	72fb      	strb	r3, [r7, #11]
  	  		arpcByteReceived(byte);
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fd ff66 	bl	8005078 <arpcByteReceived>
  for(int i = 0; i < *Len; i++){
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d8ee      	bhi.n	800719a <CDC_Receive_FS+0x1e>
  	  	}

  return (USBD_OK);
 80071bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2000048c 	.word	0x2000048c

080071cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2212      	movs	r2, #18
 8007200:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	200000c8 	.word	0x200000c8

08007214 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2204      	movs	r2, #4
 8007224:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007226:	4b03      	ldr	r3, [pc, #12]	; (8007234 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	200000dc 	.word	0x200000dc

08007238 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <USBD_FS_ProductStrDescriptor+0x34>)
 800724e:	4808      	ldr	r0, [pc, #32]	; (8007270 <USBD_FS_ProductStrDescriptor+0x38>)
 8007250:	f7ff fe0a 	bl	8006e68 <USBD_GetString>
 8007254:	e004      	b.n	8007260 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <USBD_FS_ProductStrDescriptor+0x34>)
 800725a:	4805      	ldr	r0, [pc, #20]	; (8007270 <USBD_FS_ProductStrDescriptor+0x38>)
 800725c:	f7ff fe04 	bl	8006e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000f68 	.word	0x20000f68
 8007270:	08007ab0 	.word	0x08007ab0

08007274 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	4904      	ldr	r1, [pc, #16]	; (8007294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007284:	4804      	ldr	r0, [pc, #16]	; (8007298 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007286:	f7ff fdef 	bl	8006e68 <USBD_GetString>
  return USBD_StrDesc;
 800728a:	4b02      	ldr	r3, [pc, #8]	; (8007294 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000f68 	.word	0x20000f68
 8007298:	08007abc 	.word	0x08007abc

0800729c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	6039      	str	r1, [r7, #0]
 80072a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	221a      	movs	r2, #26
 80072ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072ae:	f000 f843 	bl	8007338 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072b2:	4b02      	ldr	r3, [pc, #8]	; (80072bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200000e0 	.word	0x200000e0

080072c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4907      	ldr	r1, [pc, #28]	; (80072f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072d6:	4808      	ldr	r0, [pc, #32]	; (80072f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072d8:	f7ff fdc6 	bl	8006e68 <USBD_GetString>
 80072dc:	e004      	b.n	80072e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072e4:	f7ff fdc0 	bl	8006e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072e8:	4b02      	ldr	r3, [pc, #8]	; (80072f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000f68 	.word	0x20000f68
 80072f8:	08007ac4 	.word	0x08007ac4

080072fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4907      	ldr	r1, [pc, #28]	; (8007330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007312:	4808      	ldr	r0, [pc, #32]	; (8007334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007314:	f7ff fda8 	bl	8006e68 <USBD_GetString>
 8007318:	e004      	b.n	8007324 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4904      	ldr	r1, [pc, #16]	; (8007330 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800731e:	4805      	ldr	r0, [pc, #20]	; (8007334 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007320:	f7ff fda2 	bl	8006e68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007324:	4b02      	ldr	r3, [pc, #8]	; (8007330 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000f68 	.word	0x20000f68
 8007334:	08007ad0 	.word	0x08007ad0

08007338 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <Get_SerialNum+0x44>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <Get_SerialNum+0x48>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800734a:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <Get_SerialNum+0x4c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4413      	add	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800735e:	2208      	movs	r2, #8
 8007360:	4909      	ldr	r1, [pc, #36]	; (8007388 <Get_SerialNum+0x50>)
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f814 	bl	8007390 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007368:	2204      	movs	r2, #4
 800736a:	4908      	ldr	r1, [pc, #32]	; (800738c <Get_SerialNum+0x54>)
 800736c:	68b8      	ldr	r0, [r7, #8]
 800736e:	f000 f80f 	bl	8007390 <IntToUnicode>
  }
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	1fff7a10 	.word	0x1fff7a10
 8007380:	1fff7a14 	.word	0x1fff7a14
 8007384:	1fff7a18 	.word	0x1fff7a18
 8007388:	200000e2 	.word	0x200000e2
 800738c:	200000f2 	.word	0x200000f2

08007390 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
 80073a6:	e027      	b.n	80073f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	2b09      	cmp	r3, #9
 80073ae:	d80b      	bhi.n	80073c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0f1b      	lsrs	r3, r3, #28
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4619      	mov	r1, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	440b      	add	r3, r1
 80073c0:	3230      	adds	r2, #48	; 0x30
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	e00a      	b.n	80073de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	0f1b      	lsrs	r3, r3, #28
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4619      	mov	r1, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	440b      	add	r3, r1
 80073d8:	3237      	adds	r2, #55	; 0x37
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	3301      	adds	r3, #1
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4413      	add	r3, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	3301      	adds	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
 80073f8:	7dfa      	ldrb	r2, [r7, #23]
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3d3      	bcc.n	80073a8 <IntToUnicode+0x18>
  }
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007430:	d13a      	bne.n	80074a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	6313      	str	r3, [r2, #48]	; 0x30
 8007442:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800744e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007454:	2302      	movs	r3, #2
 8007456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007458:	2300      	movs	r3, #0
 800745a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800745c:	2303      	movs	r3, #3
 800745e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007460:	230a      	movs	r3, #10
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	4619      	mov	r1, r3
 800746a:	4812      	ldr	r0, [pc, #72]	; (80074b4 <HAL_PCD_MspInit+0xa4>)
 800746c:	f7f9 fc02 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007470:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	4a0e      	ldr	r2, [pc, #56]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747a:	6353      	str	r3, [r2, #52]	; 0x34
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 8007486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800748a:	6453      	str	r3, [r2, #68]	; 0x44
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_PCD_MspInit+0xa0>)
 800748e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	2043      	movs	r0, #67	; 0x43
 800749e:	f7f9 fbb2 	bl	8000c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074a2:	2043      	movs	r0, #67	; 0x43
 80074a4:	f7f9 fbcb 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074a8:	bf00      	nop
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40020000 	.word	0x40020000

080074b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fe fb6b 	bl	8005baa <USBD_LL_SetupStage>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074ee:	78fa      	ldrb	r2, [r7, #3]
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	4619      	mov	r1, r3
 8007506:	f7fe fba5 	bl	8005c54 <USBD_LL_DataOutStage>
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	334c      	adds	r3, #76	; 0x4c
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	4619      	mov	r1, r3
 800753a:	f7fe fc3e 	bl	8005dba <USBD_LL_DataInStage>
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fd72 	bl	800603e <USBD_LL_SOF>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d001      	beq.n	800757a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007576:	f7f9 f8ef 	bl	8000758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007580:	7bfa      	ldrb	r2, [r7, #15]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fd1c 	bl	8005fc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe fcc4 	bl	8005f1e <USBD_LL_Reset>
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd17 	bl	8005fe2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <HAL_PCD_SuspendCallback+0x48>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	4a03      	ldr	r2, [pc, #12]	; (80075e8 <HAL_PCD_SuspendCallback+0x48>)
 80075da:	f043 0306 	orr.w	r3, r3, #6
 80075de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed00 	.word	0xe000ed00

080075ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fd07 	bl	800600e <USBD_LL_Resume>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fd5f 	bl	80060e2 <USBD_LL_IsoOUTIncomplete>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fd1b 	bl	800607e <USBD_LL_IsoINIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fd71 	bl	8006146 <USBD_LL_DevConnected>
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fd6e 	bl	800615c <USBD_LL_DevDisconnected>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d13c      	bne.n	8007712 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <USBD_LL_Init+0x94>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <USBD_LL_Init+0x94>)
 80076a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <USBD_LL_Init+0x94>)
 80076aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <USBD_LL_Init+0x94>)
 80076b2:	2204      	movs	r2, #4
 80076b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076b6:	4b19      	ldr	r3, [pc, #100]	; (800771c <USBD_LL_Init+0x94>)
 80076b8:	2202      	movs	r2, #2
 80076ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076bc:	4b17      	ldr	r3, [pc, #92]	; (800771c <USBD_LL_Init+0x94>)
 80076be:	2200      	movs	r2, #0
 80076c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <USBD_LL_Init+0x94>)
 80076c4:	2202      	movs	r2, #2
 80076c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076c8:	4b14      	ldr	r3, [pc, #80]	; (800771c <USBD_LL_Init+0x94>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <USBD_LL_Init+0x94>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <USBD_LL_Init+0x94>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <USBD_LL_Init+0x94>)
 80076dc:	2200      	movs	r2, #0
 80076de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <USBD_LL_Init+0x94>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076e6:	480d      	ldr	r0, [pc, #52]	; (800771c <USBD_LL_Init+0x94>)
 80076e8:	f7f9 fc7b 	bl	8000fe2 <HAL_PCD_Init>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076f2:	f7f9 f831 	bl	8000758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	4808      	ldr	r0, [pc, #32]	; (800771c <USBD_LL_Init+0x94>)
 80076fa:	f7fa fed2 	bl	80024a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	2100      	movs	r1, #0
 8007702:	4806      	ldr	r0, [pc, #24]	; (800771c <USBD_LL_Init+0x94>)
 8007704:	f7fa fe86 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007708:	2280      	movs	r2, #128	; 0x80
 800770a:	2101      	movs	r1, #1
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <USBD_LL_Init+0x94>)
 800770e:	f7fa fe81 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20001168 	.word	0x20001168

08007720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007736:	4618      	mov	r0, r3
 8007738:	f7f9 fd70 	bl	800121c <HAL_PCD_Start>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f942 	bl	80079cc <USBD_Get_USB_Status>
 8007748:	4603      	mov	r3, r0
 800774a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774c:	7bbb      	ldrb	r3, [r7, #14]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	461a      	mov	r2, r3
 8007764:	4603      	mov	r3, r0
 8007766:	70fb      	strb	r3, [r7, #3]
 8007768:	460b      	mov	r3, r1
 800776a:	70bb      	strb	r3, [r7, #2]
 800776c:	4613      	mov	r3, r2
 800776e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800777e:	78bb      	ldrb	r3, [r7, #2]
 8007780:	883a      	ldrh	r2, [r7, #0]
 8007782:	78f9      	ldrb	r1, [r7, #3]
 8007784:	f7fa fa41 	bl	8001c0a <HAL_PCD_EP_Open>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f91c 	bl	80079cc <USBD_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fa fa8a 	bl	8001cda <HAL_PCD_EP_Close>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 f8fd 	bl	80079cc <USBD_Get_USB_Status>
 80077d2:	4603      	mov	r3, r0
 80077d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077fa:	78fa      	ldrb	r2, [r7, #3]
 80077fc:	4611      	mov	r1, r2
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fa fb62 	bl	8001ec8 <HAL_PCD_EP_SetStall>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f8de 	bl	80079cc <USBD_Get_USB_Status>
 8007810:	4603      	mov	r3, r0
 8007812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007814:	7bbb      	ldrb	r3, [r7, #14]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7fa fba7 	bl	8001f90 <HAL_PCD_EP_ClrStall>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f8bf 	bl	80079cc <USBD_Get_USB_Status>
 800784e:	4603      	mov	r3, r0
 8007850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007852:	7bbb      	ldrb	r3, [r7, #14]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800786e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007874:	2b00      	cmp	r3, #0
 8007876:	da0b      	bge.n	8007890 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	333e      	adds	r3, #62	; 0x3e
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	e00b      	b.n	80078a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	4613      	mov	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80078a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fa f974 	bl	8001bc0 <HAL_PCD_SetAddress>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f874 	bl	80079cc <USBD_Get_USB_Status>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	460b      	mov	r3, r1
 8007900:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007910:	7af9      	ldrb	r1, [r7, #11]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	f7fa fa8d 	bl	8001e34 <HAL_PCD_EP_Transmit>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f853 	bl	80079cc <USBD_Get_USB_Status>
 8007926:	4603      	mov	r3, r0
 8007928:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800792a:	7dbb      	ldrb	r3, [r7, #22]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	460b      	mov	r3, r1
 8007942:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007952:	7af9      	ldrb	r1, [r7, #11]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	f7fa fa09 	bl	8001d6e <HAL_PCD_EP_Receive>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f832 	bl	80079cc <USBD_Get_USB_Status>
 8007968:	4603      	mov	r3, r0
 800796a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800796c:	7dbb      	ldrb	r3, [r7, #22]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f7fa fa39 	bl	8001e04 <HAL_PCD_EP_GetRxCount>
 8007992:	4603      	mov	r3, r0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <USBD_static_malloc+0x18>)
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000224 	.word	0x20000224

080079b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d817      	bhi.n	8007a10 <USBD_Get_USB_Status+0x44>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBD_Get_USB_Status+0x1c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	080079f9 	.word	0x080079f9
 80079ec:	080079ff 	.word	0x080079ff
 80079f0:	08007a05 	.word	0x08007a05
 80079f4:	08007a0b 	.word	0x08007a0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
    break;
 80079fc:	e00b      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
    break;
 8007a02:	e008      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
    break;
 8007a08:	e005      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0e:	e002      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	73fb      	strb	r3, [r7, #15]
    break;
 8007a14:	bf00      	nop
  }
  return usb_status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <__libc_init_array>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4d0d      	ldr	r5, [pc, #52]	; (8007a5c <__libc_init_array+0x38>)
 8007a28:	4c0d      	ldr	r4, [pc, #52]	; (8007a60 <__libc_init_array+0x3c>)
 8007a2a:	1b64      	subs	r4, r4, r5
 8007a2c:	10a4      	asrs	r4, r4, #2
 8007a2e:	2600      	movs	r6, #0
 8007a30:	42a6      	cmp	r6, r4
 8007a32:	d109      	bne.n	8007a48 <__libc_init_array+0x24>
 8007a34:	4d0b      	ldr	r5, [pc, #44]	; (8007a64 <__libc_init_array+0x40>)
 8007a36:	4c0c      	ldr	r4, [pc, #48]	; (8007a68 <__libc_init_array+0x44>)
 8007a38:	f000 f82e 	bl	8007a98 <_init>
 8007a3c:	1b64      	subs	r4, r4, r5
 8007a3e:	10a4      	asrs	r4, r4, #2
 8007a40:	2600      	movs	r6, #0
 8007a42:	42a6      	cmp	r6, r4
 8007a44:	d105      	bne.n	8007a52 <__libc_init_array+0x2e>
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4c:	4798      	blx	r3
 8007a4e:	3601      	adds	r6, #1
 8007a50:	e7ee      	b.n	8007a30 <__libc_init_array+0xc>
 8007a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a56:	4798      	blx	r3
 8007a58:	3601      	adds	r6, #1
 8007a5a:	e7f2      	b.n	8007a42 <__libc_init_array+0x1e>
 8007a5c:	08007efc 	.word	0x08007efc
 8007a60:	08007efc 	.word	0x08007efc
 8007a64:	08007efc 	.word	0x08007efc
 8007a68:	08007f00 	.word	0x08007f00

08007a6c <memcpy>:
 8007a6c:	440a      	add	r2, r1
 8007a6e:	4291      	cmp	r1, r2
 8007a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a74:	d100      	bne.n	8007a78 <memcpy+0xc>
 8007a76:	4770      	bx	lr
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a82:	4291      	cmp	r1, r2
 8007a84:	d1f9      	bne.n	8007a7a <memcpy+0xe>
 8007a86:	bd10      	pop	{r4, pc}

08007a88 <memset>:
 8007a88:	4402      	add	r2, r0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d100      	bne.n	8007a92 <memset+0xa>
 8007a90:	4770      	bx	lr
 8007a92:	f803 1b01 	strb.w	r1, [r3], #1
 8007a96:	e7f9      	b.n	8007a8c <memset+0x4>

08007a98 <_init>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	bf00      	nop
 8007a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	469e      	mov	lr, r3
 8007aa2:	4770      	bx	lr

08007aa4 <_fini>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	bf00      	nop
 8007aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	469e      	mov	lr, r3
 8007aae:	4770      	bx	lr
